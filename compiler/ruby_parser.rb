############################################################
# This file is imported from a different project.
# DO NOT make modifications in this repo.
# File a patch instead and assign it to Ryan Davis
############################################################

#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.5
# from Racc grammer file "".
#

require 'racc/parser.rb'
class RubyParser < Racc::Parser


require 'ruby_lexer'
##### State transition tables begin ###

clist = [
'-502,231,232,574,656,352,386,-502,-502,-502,463,-90,-502,-502,-502,782',
'-502,-83,352,-84,231,232,-87,340,427,615,-502,340,373,771,863,371,499',
'3,497,-502,-502,861,-502,-502,-502,-502,-502,640,-64,640,86,572,-429',
'-86,638,573,638,-89,33,-429,686,499,616,497,589,590,593,596,-89,355',
'356,514,387,-84,729,-90,-85,719,463,-502,463,-274,355,356,367,862,-502',
'-72,-274,-274,-274,310,-502,-274,-274,-274,-90,-274,463,258,-87,258',
'-83,258,-84,654,463,-274,-274,575,341,254,256,-502,341,712,-274,-274',
'-82,-274,-274,-274,-274,-274,-75,464,-76,-502,-482,656,741,254,256,-502',
'-502,254,256,-87,-89,352,615,734,615,-87,-87,-274,-274,-274,-274,-274',
'-274,-274,-274,-274,-274,-274,-274,-274,-274,656,-81,-274,-274,-274',
'-86,340,-274,732,352,-274,-86,-86,-274,616,-274,616,-274,712,-274,503',
'-274,-274,-274,-274,-274,-274,-274,-85,-274,464,-274,464,730,-85,-85',
'254,256,254,256,355,356,518,-434,-274,-274,-486,352,-274,-274,464,-274',
'-274,-486,-486,-486,254,256,464,-486,-486,-77,-486,-87,254,256,685,654',
'-350,355,356,-486,352,254,256,353,746,510,-85,497,546,-486,-486,-83',
'-486,-486,-486,-486,-486,341,721,615,307,-86,750,-427,758,654,-430,306',
'712,-79,-427,254,256,-430,-85,355,356,505,-486,-486,-486,-486,-486,-486',
'-486,-486,-486,-486,-486,-486,-486,-486,616,-77,-486,-486,-486,496,660',
'497,355,356,-486,-88,-84,284,-480,-76,533,-486,-77,-486,-87,-486,-486',
'-486,-486,-486,-486,-486,284,-486,-486,-486,-482,708,501,-85,503,-77',
'665,705,-77,-79,-79,-486,-486,-486,-86,-502,-486,-78,-86,-486,-486,533',
'-502,-502,-502,-77,-79,-502,-502,-502,-326,-502,-425,231,232,704,-281',
'-326,766,-425,-78,-502,-483,-281,-480,-79,-85,703,-79,-77,-502,-502',
'701,-502,-502,-502,-502,-502,698,-273,-88,-486,-280,-486,-280,-480,-273',
'562,-486,-280,-486,-280,384,-482,-483,-482,-483,364,666,383,562,-326',
'-80,-425,362,408,-479,-281,-281,687,-502,-280,407,119,-486,-281,-486',
'-502,-280,-280,-280,-273,310,-502,-280,-280,683,-280,-273,-432,-273',
'-434,-486,-280,-486,-280,-432,373,-87,726,712,-79,680,382,-502,373,-280',
'-280,363,-280,-280,-280,-280,-280,-280,-425,-422,310,-502,-281,-428',
'-280,-425,-422,-502,-502,-483,-428,-479,358,359,-83,-273,678,-75,-280',
'-280,-280,-280,-280,-280,-280,-280,-280,-280,-280,-280,-280,-280,-479',
'775,-280,-280,-280,-422,661,-433,394,310,-280,664,-422,-282,-433,392',
'-280,-280,-422,-280,-282,-280,-280,-280,-280,-280,-280,-280,776,-280',
'782,-280,-431,593,596,580,345,310,-282,-431,-281,-261,579,343,-280,-282',
'-88,-281,-280,-80,503,-280,-280,17,20,25,31,37,-433,393,405,52,62,651',
'-282,786,80,404,88,93,5,11,15,21,27,589,590,593,596,49,54,59,63,66,70',
'76,578,344,96,-282,258,-281,788,644,29,38,42,45,46,51,56,64,67,71,77',
'81,85,89,645,8,13,382,24,30,35,284,285,261,265,267,270,273,275,277,279',
'281,-433,286,263,117,791,269,272,-433,40,726,712,53,254,256,69,75,793',
'84,-261,94,280,258,283,18,262,266,268,271,274,276,278,60,282,254,256',
'641,82,86,90,4,9,14,427,-90,797,33,-82,264,17,20,25,-433,37,284,417',
'422,52,62,415,416,798,80,258,88,93,5,11,15,21,27,254,256,250,251,49',
'54,59,63,66,70,76,800,-89,96,280,-81,254,256,262,266,38,231,232,46,51',
'56,64,67,71,77,81,85,89,288,8,13,636,24,30,35,284,285,261,265,267,270',
'273,275,277,279,281,562,286,263,231,232,269,272,310,123,254,256,126',
'254,256,69,75,310,84,231,232,280,288,283,18,262,266,268,271,274,276',
'278,60,282,629,808,621,82,86,90,4,9,14,-262,-72,620,33,811,264,-482',
'-482,-482,284,-482,618,254,256,-482,-482,736,284,284,-482,284,-482,-482',
'-482,-482,-482,-482,-482,284,609,608,564,-482,-482,-482,-482,-482,-482',
'-482,563,280,562,426,310,262,266,644,533,-482,825,511,-482,-482,-482',
'-482,-482,-482,-482,-482,-482,-482,828,-482,-482,705,-482,-482,-482',
'284,285,261,265,267,270,273,275,277,279,281,704,286,263,705,831,269',
'272,422,-482,684,258,-482,-482,493,-482,-482,839,-482,467,-482,280,-482',
'283,-482,262,266,268,271,274,276,278,-482,282,842,844,466,-482,-482',
'-482,-482,-482,-482,-483,-483,-483,-482,-483,264,-63,-86,-483,-483,-217',
'847,454,-483,420,-483,-483,-483,-483,-483,-483,-483,850,851,852,419',
'-483,-483,-483,-483,-483,-483,-483,672,673,853,676,85,89,418,284,390',
'-483,389,388,-483,-483,-483,-483,-483,-483,-483,-483,-483,-483,381,-483',
'-483,379,-483,-483,-483,284,285,261,265,267,270,273,275,277,279,281',
'860,286,263,378,375,269,272,374,-483,661,373,-483,-483,368,-483,-483',
'310,-483,562,-483,280,-483,283,-483,262,266,268,271,274,276,278,-483',
'282,562,305,361,-483,-483,-483,-483,-483,-483,875,876,877,-483,878,264',
'612,-88,12,17,20,25,31,37,705,258,357,52,62,337,331,608,80,315,88,93',
'5,11,15,21,27,888,290,288,260,49,54,59,63,66,70,76,284,258,96,291,292',
'293,294,295,29,38,42,45,46,51,56,64,67,71,77,81,85,89,891,8,13,151,24',
'30,35,147,138,280,562,562,116,262,266,268,271,291,292,293,294,295,97',
'562,,,40,,,53,,,69,75,,84,,94,,,,18,587,,,595,598,600,,60,,,,,82,86',
'90,4,9,14,,,,33,12,17,20,25,31,37,,,,52,62,,,,80,,88,93,5,11,15,21,27',
'589,590,593,596,49,54,59,63,66,70,76,284,,96,291,292,293,294,295,29',
'38,42,45,46,51,56,64,67,71,77,81,85,89,,8,13,,24,30,35,,,280,,,,262',
'266,268,271,,,,,,,,,,40,,,53,,,69,75,,84,,94,,,,18,587,,,595,598,600',
',60,,,,,82,86,90,4,9,14,,,,33,12,17,20,25,31,37,,,,52,62,,,,80,,88,93',
'5,11,15,21,27,589,590,593,596,49,54,59,63,66,70,76,,,96,,,,,,29,38,42',
'45,46,51,56,64,67,71,77,81,85,89,,8,13,,24,30,35,284,,,,,,,,,,,,,,,',
'269,272,,40,,,53,,,69,75,,84,,94,280,,283,18,262,266,268,271,,,278,60',
'282,,,,82,86,90,4,9,14,,,,33,12,17,20,25,31,37,,,,52,62,,,,80,,88,93',
'5,11,15,21,27,,,,,49,54,59,63,66,70,76,,,96,,,,,,29,38,42,45,46,51,56',
'64,67,71,77,81,85,89,,8,13,,24,30,35,284,-504,-504,-504,-504,270,273',
',,-504,-504,,,,,,269,272,,40,,,53,,,69,75,,84,,94,280,,283,18,262,266',
'268,271,274,276,278,60,282,,,,82,86,90,4,9,14,,,,33,12,17,20,25,31,37',
',,,52,62,,,,80,,88,93,5,11,15,21,27,,,,,49,54,59,63,66,70,76,,,96,,',
',,,29,38,42,45,46,51,56,64,67,71,77,81,85,89,,8,13,,24,30,35,284,285',
'261,265,267,270,273,275,277,279,281,,-504,-504,,,269,272,,40,,,53,,',
'69,75,,84,,94,280,,283,18,262,266,268,271,274,276,278,60,282,,,,82,86',
'90,4,9,14,,,,33,12,17,20,25,31,37,,,,52,62,,,,80,,88,93,5,11,15,21,27',
',,,,49,54,59,63,66,70,76,,,96,,,,,,29,38,42,45,46,51,56,64,67,71,77',
'81,85,89,,8,13,,24,30,35,284,,,,,,,,,,,,,,,,269,272,,40,,,53,,,69,75',
',84,,94,280,,283,18,262,266,268,271,,,278,60,282,,,,82,86,90,4,9,14',
',,,33,12,17,20,25,31,37,,,,52,62,,,,80,,88,93,5,11,15,21,27,,,,,49,54',
'59,63,66,70,76,,,96,,,,,,29,38,42,45,46,51,56,64,67,71,77,81,85,89,',
'8,13,,24,30,35,284,-504,-504,-504,-504,270,273,,,-504,-504,,,,,,269',
'272,,40,,,53,,,69,75,,84,,94,280,,283,18,262,266,268,271,274,276,278',
'60,282,,,,82,86,90,4,9,14,,,,33,12,17,20,25,31,37,,,,52,62,,,,80,,88',
'93,5,11,15,21,27,,,,,49,54,59,63,66,70,76,,,96,,,,,,29,38,42,45,46,51',
'56,64,67,71,77,81,85,89,,8,13,,24,30,35,284,-504,-504,-504,-504,270',
'273,,,-504,-504,,,,,,269,272,,40,,,53,,,69,75,,84,,94,280,,283,18,262',
'266,268,271,274,276,278,60,282,,,,82,86,90,4,9,14,,,,33,12,17,20,25',
'31,37,,,,52,62,,,,80,,88,93,5,11,15,21,27,,,,,49,54,59,63,66,70,76,',
',96,,,,,,29,38,42,45,46,51,56,64,67,71,77,81,85,89,,8,13,,24,30,35,284',
'-504,-504,-504,-504,270,273,,,-504,-504,,,,,,269,272,,40,,,302,,,69',
'75,,84,,94,280,,283,18,262,266,268,271,274,276,278,60,282,,,,82,86,90',
'4,9,14,,,,33,12,17,20,25,31,37,,,,52,62,,,,80,,88,93,5,11,15,21,27,',
',,,49,54,59,63,66,70,76,,,96,,,,,,29,38,42,45,46,51,56,64,67,71,77,81',
'85,89,,8,13,,24,30,35,284,,,,,,,,,,,,,,,,269,272,,40,,,53,,,69,75,,84',
',94,280,,283,18,262,266,268,271,,,278,60,282,,,,82,86,90,4,9,14,,,,33',
'12,17,20,25,31,37,,,,52,62,,,,80,,88,93,5,11,15,21,27,,,,,49,54,59,63',
'66,70,76,,,96,,,,,,29,38,42,45,46,51,56,64,67,71,77,81,85,89,,8,13,',
'24,30,35,284,-504,-504,-504,-504,270,273,,,-504,-504,,,,,,269,272,,40',
',,53,,,69,75,,84,,94,280,,283,18,262,266,268,271,274,276,278,60,282',
',,,82,86,90,4,9,14,,,,33,12,17,20,25,31,37,,,,52,62,,,,80,,88,93,5,11',
'15,21,27,,,,,49,54,59,63,66,70,76,,,96,,,,,,29,38,42,45,46,51,56,64',
'67,71,77,81,85,89,,8,13,,24,30,35,284,285,261,265,267,270,273,,,279',
'281,,,,,,269,272,,40,,,53,,,69,75,,84,,94,280,,283,18,262,266,268,271',
'274,276,278,60,282,,,,82,86,90,4,9,14,,,,33,12,17,20,25,31,37,,,,52',
'62,,,,80,,88,93,5,11,15,21,27,,,,,49,54,59,63,66,70,76,,,96,,,,,,29',
'38,42,45,46,51,56,64,67,71,77,81,85,89,,8,13,,24,30,35,284,-504,-504',
'-504,-504,270,273,,,-504,-504,,,,,,269,272,,40,,,53,,,69,75,,84,,94',
'280,,283,18,262,266,268,271,274,276,278,60,282,,,,82,86,90,4,9,14,,',
',33,12,17,20,25,31,37,,,,52,62,,,,80,,88,93,5,11,15,21,27,,,,,49,54',
'59,63,66,70,76,,,96,,,,,,29,38,42,45,46,51,56,64,67,71,77,81,85,89,',
'8,13,,24,30,35,284,285,261,265,267,270,273,275,,279,281,,,,,,269,272',
',40,,,53,,,69,75,,84,,94,280,,283,18,262,266,268,271,274,276,278,60',
'282,,,,82,86,90,4,9,14,,,,33,12,17,20,25,31,37,,,,52,62,,,,80,,88,93',
'5,11,15,21,27,,,,,49,54,59,63,66,70,76,,,96,,,,,,29,38,42,45,46,51,56',
'64,67,71,77,81,85,89,,8,13,,24,30,35,284,,,,,,,,,,,,,,,,269,272,,40',
',,53,,,69,75,,84,,94,280,,283,18,262,266,268,271,,,278,60,282,,,,82',
'86,90,4,9,14,,,,33,12,17,20,25,31,37,,,,52,62,,,,80,,88,93,5,11,15,21',
'27,,,,,49,54,59,63,66,70,76,,,96,,,,,,29,38,42,45,46,51,56,64,67,71',
'77,81,85,89,,8,13,,24,30,35,284,285,261,265,267,270,273,275,277,279',
'281,,-504,-504,,,269,272,,40,,,53,,,69,75,,84,,94,280,,283,18,262,266',
'268,271,274,276,278,60,282,,,,82,86,90,4,9,14,,,,33,12,17,20,25,31,37',
',,,52,62,,,,80,,88,93,5,11,15,21,27,,,,,49,54,59,63,66,70,76,,,96,,',
',,,29,38,42,45,46,51,56,64,67,71,77,81,85,89,,8,13,,24,30,35,284,,,',
',,,,,,,,,,,,269,272,,40,,,53,,,69,75,,84,,94,280,,,18,262,266,268,271',
',,,60,,,,,82,86,90,4,9,14,,,,33,12,17,20,25,31,37,,,,52,62,,,,80,,88',
'93,5,11,15,21,27,,,,,49,54,59,63,66,70,76,,,96,,,,,,29,38,42,45,46,51',
'56,64,67,71,77,81,85,89,,8,13,,24,30,35,284,,,,,,,,,,,,,,,,269,272,',
'40,,,53,,,69,75,,84,,94,280,,283,18,262,266,268,271,,,,60,,,,,82,86',
'90,4,9,14,,,,33,12,17,20,25,31,37,,,,52,62,,,,80,,88,93,5,11,15,21,27',
',,,,49,54,59,63,66,70,76,,,96,,,,,,29,38,42,45,46,51,56,64,67,71,77',
'81,85,89,,8,13,,24,30,35,284,,,,,,,,,,,,,,,,269,272,,40,,,53,,,69,75',
',84,,94,280,,283,18,262,266,268,271,,,,60,,,,,82,86,90,4,9,14,,,,33',
'12,17,20,25,31,37,,,,52,62,,,,80,,88,93,5,11,15,21,27,,,,,49,54,59,63',
'66,70,76,,,96,,,,,,29,38,42,45,46,51,56,64,67,71,77,81,85,89,,8,13,',
'24,30,35,,,,,,,,,,,,,,,,,,,,40,,,53,,,69,75,,84,,94,,,,18,,,,,,,,60',
',,,,82,86,90,4,9,14,,,,33,12,17,20,25,31,37,,,,52,62,,,,80,,88,93,5',
'11,15,21,27,,,,,49,54,59,63,66,70,76,,,96,,,,,,29,38,42,45,46,51,56',
'64,67,71,77,81,85,89,,8,13,,24,30,35,,,,,,,,,,,,,,,,,,,,40,,,53,,,69',
'75,,84,,94,,,,18,,,,,,,,60,,,,,82,86,90,4,9,14,,,,33,12,17,20,25,31',
'37,,,,52,62,,,,80,,88,93,5,11,15,21,27,,,,,49,54,59,63,66,70,76,,,96',
',,,,,29,38,42,45,46,51,56,64,67,71,77,81,85,89,,8,13,,24,30,35,,,,,',
',,,,,,,,,,,,,,40,,,53,,,69,75,,84,,94,,,,18,,,,,,,,60,,,,,82,86,90,4',
'9,14,,,,33,12,17,20,25,31,37,,,,52,62,,,,80,,88,93,5,11,15,21,27,,,',
',49,54,59,63,66,70,76,,,96,,,,,,29,38,42,45,46,51,56,64,67,71,77,81',
'85,89,,8,13,,24,30,35,,,,,,,,,,,,,,,,,,,,40,,,302,,,69,75,,84,,94,,',
',18,,,,,,,,60,,,,,82,86,90,4,9,14,,,,33,12,17,20,25,31,37,,,,52,62,',
',,80,,88,93,5,11,15,21,27,,,,,49,54,59,63,66,70,76,,,96,,,,,,29,38,42',
'45,46,51,56,64,67,71,77,81,85,89,,8,13,,24,30,35,,,,,,,,,,,,,,,,,,,',
'40,,,53,,,69,75,,84,,94,,,,18,,,,,,,,60,,,,,82,86,90,4,9,14,,,,33,12',
'17,20,25,31,37,,,,52,62,,,,80,,88,93,5,11,15,21,27,,,,,49,54,59,63,66',
'70,76,,,96,,,,,,29,38,42,45,46,51,56,64,67,71,77,81,85,89,,8,13,,24',
'30,35,,,,,,,,,,,,,,,,,,,,40,,,53,,,69,75,,84,,94,,,,18,,,,,,,,60,,,',
',82,86,90,4,9,14,,,,33,12,17,20,25,31,37,,,,52,62,,,,80,,88,93,5,11',
'15,21,27,,,,,49,54,59,63,66,70,76,,,96,,,,,,29,38,42,45,46,51,56,64',
'67,71,77,81,85,89,,8,13,,24,30,35,,,,,,,,,,,,,,,,,,,,40,,,53,,,69,75',
',84,,94,,,,18,,,,,,,,60,,,,,82,86,90,4,9,14,,,,33,12,17,20,25,31,37',
',,,52,62,,,,80,,88,93,5,11,15,21,27,,,,,49,54,59,63,66,70,76,,,96,,',
',,,29,38,42,45,46,51,56,64,67,71,77,81,85,89,,8,13,,24,30,35,,,,,,,',
',,,,,,,,,,,,40,,,53,,,69,75,,84,,94,,,,18,,,,,,,,60,,,,,82,86,90,4,9',
'14,,,,33,12,17,20,25,31,37,,,,52,62,,,,80,,88,93,5,11,15,21,27,,,,,49',
'54,59,63,66,70,76,,,96,,,,,,29,38,42,45,46,51,56,64,67,71,77,81,85,89',
',8,13,,24,30,35,,,,,,,,,,,,,,,,,,,,40,,,302,,,69,75,,84,,94,,,,18,,',
',,,,,60,,,,,82,86,90,4,9,14,,,,33,12,17,20,25,31,37,,,,52,62,,,,80,',
'88,93,5,11,15,21,27,,,,,49,54,59,63,66,70,76,,,96,,,,,,29,38,42,45,46',
'51,56,64,67,71,77,81,85,89,,8,13,,24,30,35,284,285,261,265,267,270,273',
'275,277,279,281,,286,263,,,269,272,,40,,,53,,,69,75,,84,,94,280,,283',
'18,262,266,268,271,274,276,278,60,282,,,,82,86,90,4,9,14,17,20,25,33',
'37,264,,,52,62,,,258,80,,88,93,5,11,15,21,27,,,,,49,54,59,63,66,70,76',
',,96,,,,,,,38,,,46,51,56,64,67,71,77,81,85,89,,8,13,,24,30,35,284,285',
'261,265,267,270,273,275,277,279,281,,286,263,,,269,272,,123,,,126,,',
'69,75,,84,,,280,,283,18,262,266,268,271,274,276,278,60,282,,,,82,86',
'90,4,9,14,17,20,25,33,37,264,,,52,62,,,258,80,,88,93,5,11,15,21,27,',
',,,49,54,59,63,66,70,76,,,96,,,,,,,38,,,46,51,56,64,67,71,77,81,85,89',
',8,13,,24,30,35,284,285,261,265,267,270,273,275,277,279,281,,286,263',
',,269,272,,123,,-217,126,,,69,75,,84,,,280,,283,18,262,266,268,271,274',
'276,278,60,282,,,,82,86,90,4,9,14,17,20,25,33,37,264,,,52,62,-217,,',
'80,,88,93,5,11,15,21,27,,,,,49,54,59,63,66,70,76,,,,,,,,,,38,,,46,51',
'56,64,67,71,77,81,85,89,,8,13,,24,30,35,284,285,261,265,267,270,273',
'275,277,279,281,,286,263,,,269,272,,123,,,126,,,69,75,,84,,,280,,283',
'18,262,266,268,271,274,276,278,129,282,,,,82,86,90,4,9,14,17,20,25,33',
'37,264,,,52,62,562,,,80,,88,93,5,100,101,21,27,,,,,107,108,109,63,66',
'70,76,,,,,,,,,,38,,,46,51,56,64,67,71,77,81,85,89,,8,13,,24,30,35,284',
'285,261,265,267,270,273,275,277,279,281,,286,263,,,269,272,,123,,,126',
',,69,75,,84,,,280,,283,18,262,266,268,271,274,276,278,129,282,,,,82',
'86,90,4,9,14,17,20,25,33,37,264,,,52,62,,,,80,,88,93,5,100,101,21,27',
',,,,107,54,59,63,66,70,76,,,,,,,,,,38,,,46,51,56,64,67,71,77,81,85,89',
',8,13,,24,30,35,284,285,261,265,267,270,273,275,277,279,281,,286,263',
',,269,272,,123,,,126,,,69,75,,84,,321,280,,283,18,262,266,268,271,274',
'276,278,129,282,,,,82,86,90,4,9,14,-480,-480,-480,33,-480,264,,,-480',
'-480,,,,-480,,-480,-480,-480,-480,-480,-480,-480,,-480,,,-480,-480,-480',
'-480,-480,-480,-480,,,,,,,,,,-480,,,-480,-480,-480,-480,-480,-480,-480',
'-480,-480,-480,,-480,-480,,-480,-480,-480,284,285,261,265,267,270,273',
'275,277,279,281,,286,263,,,269,272,,-480,,,-480,-480,,-480,-480,,-480',
',-480,280,-480,283,-480,262,266,268,271,274,276,278,-480,282,-480,,',
'-480,-480,-480,-480,-480,-480,17,20,25,-480,37,264,,,52,62,,,,80,,88',
'93,5,11,15,21,27,,,,,49,54,59,63,66,70,76,,,,,,,,,,38,,,46,51,56,64',
'67,71,77,81,85,89,,8,13,,24,30,35,284,285,261,265,267,270,273,275,277',
'279,281,,286,263,,,269,272,,123,,,126,,,69,75,,84,,,280,,283,18,262',
'266,268,271,274,276,278,129,282,,,,82,86,90,4,9,14,17,20,25,33,37,264',
',,52,62,,,,80,,88,93,5,100,101,21,27,,,,,107,108,109,63,66,70,76,,,',
',,,,,,38,,,46,51,56,64,67,71,77,81,85,89,,8,13,,24,30,35,284,285,261',
'265,267,270,273,275,277,279,281,,286,263,,,269,272,,123,,,126,,,69,75',
',84,,648,280,,283,18,262,266,268,271,274,276,278,129,282,,,,82,86,90',
'4,9,14,17,20,25,33,37,264,,,52,62,,,,80,,88,93,5,100,101,21,27,,,,,107',
'108,109,63,66,70,76,,,,,,,,,,38,,,46,51,56,64,67,71,77,81,85,89,,8,13',
',24,30,35,284,285,261,265,267,270,273,275,277,279,281,,286,263,,,269',
'272,,123,,,126,,,69,75,,84,,,280,,283,18,262,266,268,271,274,276,278',
'129,282,,,,82,86,90,4,9,14,17,20,25,33,37,264,,,52,62,,,,80,,88,93,5',
'100,101,21,27,,,,,107,54,59,63,66,70,76,,,,,,,,,,38,,,46,51,56,64,67',
'71,77,81,85,89,,8,13,,24,30,35,284,285,261,265,267,270,273,275,277,279',
'281,,286,263,,,269,272,,123,,,126,,,69,75,,84,,321,280,,283,18,262,266',
'268,271,274,276,278,129,282,,,,82,86,90,4,9,14,17,20,25,33,37,264,,',
'52,62,,,,80,,88,93,5,100,101,21,27,,,,,107,108,109,63,66,70,76,,,,,',
',,,,38,,,46,51,56,64,67,71,77,81,85,89,,8,13,,24,30,35,284,285,261,265',
'267,270,273,275,277,279,281,,286,263,,,269,272,,123,,,126,,,69,75,,84',
',,280,,283,18,262,266,268,271,274,276,278,129,282,,,,82,86,90,4,9,14',
'17,20,25,33,37,264,,,52,62,,,,80,,88,93,5,100,101,21,27,,,,,107,108',
'109,63,66,70,76,,,,,,,,,,38,,,46,51,56,64,67,71,77,81,85,89,,8,13,,24',
'30,35,284,285,261,265,267,270,273,275,277,279,281,,286,263,,,269,272',
',123,,,126,,,69,75,,84,,,280,,283,18,262,266,268,271,274,276,278,129',
'282,,,,82,86,90,4,9,14,17,20,25,33,37,264,,,52,62,,,,80,,88,93,5,100',
'101,21,27,,,,,107,108,109,63,66,70,76,,,,,,,,,,105,,,46,51,56,64,67',
'71,77,81,85,89,,8,13,,,,104,284,285,261,265,267,270,273,275,277,279',
'281,,286,263,,,269,272,,143,,,126,,,69,75,,84,,,280,,283,,262,266,268',
'271,274,276,278,,282,,,,82,86,90,4,9,14,17,20,25,33,37,264,,,52,62,',
',,80,,88,93,5,100,101,21,27,,,,,107,108,109,63,66,70,76,,,,,,,,,,105',
',,46,51,56,64,67,71,77,81,85,89,,8,13,,,,104,284,285,261,265,267,270',
'273,275,277,279,281,,286,263,,,269,272,,106,,,53,,,69,75,,84,,94,280',
',283,,262,266,268,271,274,276,278,,282,,,,82,86,90,4,9,14,17,20,25,33',
'37,264,,,52,62,,,,80,,88,93,5,11,15,21,27,,,,,49,54,59,63,66,70,76,',
',96,,,,,,,38,,,46,51,56,64,67,71,77,81,85,89,,8,13,,24,30,35,284,285',
'261,265,267,270,273,275,277,279,281,,286,263,,,269,272,,123,,,126,,',
'69,75,,84,,,280,,283,18,262,266,268,271,274,276,278,60,282,,,,82,86',
'90,4,9,14,17,20,25,33,37,264,,,52,62,,,,80,,88,93,5,100,101,21,27,,',
',,107,108,109,63,66,70,76,,,,,,,,,,38,,,46,51,56,64,67,71,77,81,85,89',
',8,13,,24,30,35,,,,,,,,,,,,,,,,,,,,123,,,126,,,69,75,,84,,,,,,18,,,',
',,,,129,,,,,82,86,90,4,9,14,17,20,25,33,37,,,,52,62,,,,80,,88,93,5,11',
'15,21,27,,,,,49,54,59,63,66,70,76,,,96,,,,,,,38,,,46,51,56,64,67,71',
'77,81,85,89,,8,13,,24,30,35,,,,,,,,,,,,,,,,,,,,123,,,126,,,69,75,,84',
',628,,119,,18,,,,,,,,60,,,,,82,86,90,4,9,14,17,20,25,33,37,,,,52,62',
',,,80,,88,93,5,100,101,21,27,,,,,107,54,59,63,66,70,76,,,,,,,,,,38,',
',46,51,56,64,67,71,77,81,85,89,,8,13,,24,30,35,,,,,,,,,,,,,,,,,,,,123',
',,126,,,69,75,,84,,552,,119,,18,,,,,,,,129,,,,,82,86,90,4,9,14,17,20',
'25,33,37,,,,52,62,,,,80,,88,93,5,100,101,21,27,,,,,107,54,59,63,66,70',
'76,,,,,,,,,,38,,,46,51,56,64,67,71,77,81,85,89,,8,13,,24,30,35,,,,,',
',,,,,,,,,,,,,,123,,,126,,,69,75,,84,,135,,119,,18,,,,,,,,129,,,,,82',
'86,90,4,9,14,17,20,25,33,37,,,,52,62,,,,80,,88,93,5,100,101,21,27,,',
',,107,108,109,63,66,70,76,,,,,,,,,,38,,,46,51,56,64,67,71,77,81,85,89',
',8,13,,24,30,35,,,,,,,,,,,,,,,,,,,,123,,,126,,,69,75,,84,,805,,119,',
'18,,,,,,,,129,,,,,82,86,90,4,9,14,17,20,25,33,37,,,,52,62,,,,80,,88',
'93,5,11,15,21,27,,,,,49,54,59,63,66,70,76,,,,,,,,,,38,,,46,51,56,64',
'67,71,77,81,85,89,,8,13,,24,30,35,,,,,,,,,,,,,,,,,,,,123,,,126,,,69',
'75,,84,,,,,,18,,,,,,,,129,,,,,82,86,90,4,9,14,-251,-251,-251,33,-251',
',,,-251,-251,,,,-251,,-251,-251,-251,-251,-251,-251,-251,,,,,-251,-251',
'-251,-251,-251,-251,-251,,,,,,,,,,-251,,,-251,-251,-251,-251,-251,-251',
'-251,-251,-251,-251,,-251,-251,,-251,-251,-251,,,,,,,,,,,,,,,,,,,,-251',
',,-251,310,,-251,-251,,-251,,-251,,-251,,-251,,,,,,,,-251,,,,,-251,-251',
'-251,-251,-251,-251,17,20,25,-251,37,,,,52,62,,,,80,,88,93,5,100,101',
'21,27,,,,,107,108,109,63,66,70,76,,,,,,,,,,38,,,46,51,56,64,67,71,77',
'81,85,89,,8,13,,24,30,35,,,,,,,,,,,,,,,,,,,,123,,,126,,,69,75,,84,,',
',,,18,,,,,,,,129,,,,,82,86,90,4,9,14,17,20,25,33,37,,,,52,62,,,,80,',
'88,93,5,100,101,21,27,,,,,107,108,109,63,66,70,76,,,,,,,,,,38,,,46,51',
'56,64,67,71,77,81,85,89,,8,13,,24,30,35,,,,,,,,,,,,,,,,,,,,123,,,126',
',,69,75,,84,,868,,119,,18,,,,,,,,129,,,,,82,86,90,4,9,14,17,20,25,33',
'37,,,,52,62,,,,80,,88,93,5,11,15,21,27,,,,,49,54,59,63,66,70,76,,,96',
',,,,,,38,,,46,51,56,64,67,71,77,81,85,89,,8,13,,24,30,35,,,,,,,,,,,',
',,,,,,,,123,,,126,,,69,75,,84,,,,,,18,,,,,,,,60,,,,,82,86,90,4,9,14',
'17,20,25,33,37,,,,52,62,,,,80,,88,93,5,100,101,21,27,,,,,107,108,109',
'63,66,70,76,,,,,,,,,,38,,,46,51,56,64,67,71,77,81,85,89,,8,13,,24,30',
'35,,,,,,,,,,,,,,,,,,,,123,,,126,,,69,75,,84,,804,,119,,18,,,,,,,,129',
',,,,82,86,90,4,9,14,17,20,25,33,37,,,,52,62,,,,80,,88,93,5,11,15,21',
'27,,,,,49,54,59,63,66,70,76,,,96,,,,,,,38,,,46,51,56,64,67,71,77,81',
'85,89,,8,13,,24,30,35,,,,,,,,,,,,,,,,,,,,123,,,126,,,69,75,,84,,,,,',
'18,,,,,,,,60,,,,,82,86,90,4,9,14,17,20,25,33,37,,,,52,62,,,,80,,88,93',
'5,100,101,21,27,,,,,107,108,109,63,66,70,76,,,,,,,,,,38,,,46,51,56,64',
'67,71,77,81,85,89,,8,13,,24,30,35,,,,,,,,,,,,,,,,,,,,123,,,126,,,69',
'75,,84,,867,,119,,18,,,,,,,,129,,,,,82,86,90,4,9,14,17,20,25,33,37,',
',,52,62,,,,80,,88,93,5,11,15,21,27,,,,,49,54,59,63,66,70,76,,,,,,,,',
',38,,,46,51,56,64,67,71,77,81,85,89,,8,13,,24,30,35,,,,,,,,,,,,,,,,',
',,,123,,,126,,,69,75,,84,,,,,,18,,,,,,,,129,,,,,82,86,90,4,9,14,17,20',
'25,33,37,,,,52,62,,,,80,,88,93,5,100,101,21,27,,,,,107,108,109,63,66',
'70,76,,,,,,,,,,38,,,46,51,56,64,67,71,77,81,85,89,,8,13,,24,30,35,,',
',,,,,,,,,,,,,,,,,123,,,126,,,69,75,,84,,,,,,18,,,,,,,,129,,,,,82,86',
'90,4,9,14,17,20,25,33,37,,,,52,62,,,,80,,88,93,5,100,101,21,27,,,,,107',
'108,109,63,66,70,76,,,,,,,,,,38,,,46,51,56,64,67,71,77,81,85,89,,8,13',
',24,30,35,,,,,,,,,,,,,,,,,,,,123,,,126,,,69,75,,84,,,,,,18,,,,,,,,129',
',,,,82,86,90,4,9,14,17,20,25,33,37,,,,52,62,,,,80,,88,93,5,100,101,21',
'27,,,,,107,108,109,63,66,70,76,,,,,,,,,,38,,,46,51,56,64,67,71,77,81',
'85,89,,8,13,,24,30,35,,,,,,,,,,,,,,,,,,,,123,,,126,,,69,75,,84,,492',
',,,18,,,,,,,,129,,,,,82,86,90,4,9,14,17,20,25,33,37,,,,52,62,,,,80,',
'88,93,5,11,15,21,27,,,,,49,54,59,63,66,70,76,,,96,,,,,,,38,,,46,51,56',
'64,67,71,77,81,85,89,,8,13,,24,30,35,,,,,,,,,,,,,,,,,,,,123,,,126,,',
'69,75,,84,,,,,,18,,,,,,,,60,,,,,82,86,90,4,9,14,-479,-479,-479,33,-479',
',,,-479,-479,,,,-479,,-479,-479,-479,-479,-479,-479,-479,,-479,,,-479',
'-479,-479,-479,-479,-479,-479,,,,,,,,,,-479,,,-479,-479,-479,-479,-479',
'-479,-479,-479,-479,-479,,-479,-479,,-479,-479,-479,,,,,,,,,,,,,,,,',
',,,-479,,,-479,-479,,-479,-479,,-479,,-479,,-479,,-479,,,,,,,,-479,',
'-479,,,-479,-479,-479,-479,-479,-479,17,20,25,-479,37,,,,52,62,,,,80',
',88,93,5,100,101,21,27,,,,,107,108,109,63,66,70,76,,,,,,,,,,38,,,46',
'51,56,64,67,71,77,81,85,89,,8,13,,24,30,35,,,,,,,,,,,,,,,,,,,,123,,',
'126,,,69,75,,84,,768,,119,,18,,,,,,,,129,,,,,82,86,90,4,9,14,-251,-251',
'-251,33,-251,,,,-251,-251,,,,-251,,-251,-251,-251,-251,-251,-251,-251',
',,,,-251,-251,-251,-251,-251,-251,-251,,,,,,,,,,-251,,,-251,-251,-251',
'-251,-251,-251,-251,-251,-251,-251,,-251,-251,,-251,-251,-251,,,,,,',
',,,,,,,,,,,,,-251,,,-251,305,,-251,-251,,-251,,-251,,-251,,-251,,,,',
',,,-251,,,,,-251,-251,-251,-251,-251,-251,17,20,25,-251,37,,,,52,62',
',,,80,,88,93,5,100,101,21,27,,,,,107,108,109,63,66,70,76,,,,,,,,,,38',
',,46,51,56,64,67,71,77,81,85,89,,8,13,,24,30,35,,,,,,,,,,,,,,,,,,,,123',
',,126,,,69,75,,84,,,,,,18,,,,,,,,129,,,,,82,86,90,4,9,14,,,,33,17,20',
'25,31,37,,,,52,62,,,,80,,88,93,5,11,15,21,27,,,,,49,54,59,63,66,70,76',
',,96,,,,,,29,38,42,45,46,51,56,64,67,71,77,81,85,89,,8,13,,24,30,35',
',,,,,,,,,,,,,,,,,,,40,,,53,,,69,75,,84,,94,,,,18,,,,,,,,60,,,,,82,86',
'90,4,9,14,17,20,25,33,37,,,,52,62,,,,80,,88,93,5,11,15,21,27,,,,,49',
'54,59,63,66,70,76,,,96,,,,,,,38,,,46,51,56,64,67,71,77,81,85,89,,8,13',
',24,30,35,,,,,,,,,,,,,,,,,,,,123,,,126,,,69,75,,84,,,,,,18,,,,,,,,60',
',,,,82,86,90,4,9,14,17,20,25,33,37,,,,52,62,,,,80,,88,93,5,100,101,21',
'27,,,,,107,108,109,63,66,70,76,,,,,,,,,,38,,,46,51,56,64,67,71,77,81',
'85,89,,8,13,,24,30,35,,,,,,,,,,,,,,,,,,,,123,,,126,,,69,75,,84,,892',
',119,,18,,,,,,,,129,,,,,82,86,90,4,9,14,17,20,25,33,37,,,,52,62,,,,80',
',88,93,5,11,15,21,27,,,,,49,54,59,63,66,70,76,,,,,,,,,,38,,,46,51,56',
'64,67,71,77,81,85,89,,8,13,,24,30,35,,,,,,,,,,,,,,,,,,,,123,,,126,,',
'69,75,,84,,,,,,18,,,,,,,,129,,,,,82,86,90,4,9,14,17,20,25,33,37,,,,52',
'62,,,,80,,88,93,5,100,101,21,27,,,,,107,54,59,63,66,70,76,,,,,,,,,,38',
',,46,51,56,64,67,71,77,81,85,89,,8,13,,24,30,35,,,,,,,,,,,,,,,,,,,,123',
',,126,,,69,75,,84,,321,,,,18,,,,,,,,129,,,,,82,86,90,4,9,14,17,20,25',
'33,37,,,,52,62,,,,80,,88,93,5,100,101,21,27,,,,,107,108,109,63,66,70',
'76,,,,,,,,,,38,,,46,51,56,64,67,71,77,81,85,89,,8,13,,24,30,35,,,,,',
',,,,,,,,,,,,,,123,,,126,,,69,75,,84,,,,,,18,,,,,,,,129,,,,,82,86,90',
'4,9,14,17,20,25,33,37,,,,52,62,,,,80,,88,93,5,100,101,21,27,,,,,107',
'108,109,63,66,70,76,,,,,,,,,,38,,,46,51,56,64,67,71,77,81,85,89,,8,13',
',24,30,35,,,,,,,,,,,,,,,,,,,,123,,,126,,,69,75,,84,,,,,,18,,,,,,,,129',
',,,,82,86,90,4,9,14,17,20,25,33,37,,,,52,62,,,,80,,88,93,5,100,101,21',
'27,,,,,107,108,109,63,66,70,76,,,,,,,,,,38,,,46,51,56,64,67,71,77,81',
'85,89,,8,13,,24,30,35,,,,,,,,,,,,,,,,,,,,123,,,126,,,69,75,,84,,,,,',
'18,,,,,,,,129,,,,,82,86,90,4,9,14,17,20,25,33,37,,,,52,62,,,,80,,88',
'93,5,100,101,21,27,,,,,107,54,59,63,66,70,76,,,,,,,,,,38,,,46,51,56',
'64,67,71,77,81,85,89,,8,13,,24,30,35,,,,,,,,,,,,,,,,,,,,123,,,126,,',
'69,75,,84,,135,,119,,18,,,,,,,,129,,,,,82,86,90,4,9,14,17,20,25,33,37',
',,,52,62,,,,80,,88,93,5,11,15,21,27,,,,,49,54,59,63,66,70,76,,,96,,',
',,,,38,,,46,51,56,64,67,71,77,81,85,89,,8,13,,24,30,35,,,,,,,,,,,,,',
',,,,,,123,,,126,,,69,75,,84,,,,,,18,,,,,,,,60,,,,,82,86,90,4,9,14,17',
'20,25,33,37,,,,52,62,,,,80,,88,93,5,100,101,21,27,,,,,107,108,109,63',
'66,70,76,,,,,,,,,,38,,,46,51,56,64,67,71,77,81,85,89,,8,13,,24,30,35',
',,,,,,,,,,,,,,,,,,,123,,,126,,,69,75,,84,,,,,,18,,,,,,,,129,,,,,82,86',
'90,4,9,14,17,20,25,33,37,,,,52,62,,,,80,,88,93,5,100,101,21,27,,,,,107',
'54,59,63,66,70,76,,,,,,,,,,38,,,46,51,56,64,67,71,77,81,85,89,,8,13',
',24,30,35,,,,,,,,,,,,,,,,,,,,123,,,126,,,69,75,,84,,135,,119,,18,,,',
',,,,129,,,,,82,86,90,4,9,14,17,20,25,33,37,,,,52,62,,,,80,,88,93,5,100',
'101,21,27,,,,,107,108,109,63,66,70,76,,,,,,,,,,38,,,46,51,56,64,67,71',
'77,81,85,89,,8,13,,24,30,35,,,,,,,,,,,,,,,,,,,,123,,,126,,,69,75,,84',
',,,,,18,,,,,,,,129,,,,,82,86,90,4,9,14,17,20,25,33,37,,,,52,62,,,,80',
',88,93,5,100,101,21,27,,,,,107,108,109,63,66,70,76,,,,,,,,,,38,,,46',
'51,56,64,67,71,77,81,85,89,,8,13,,24,30,35,,,,,,,,,,,,,,,,,,,,123,,',
'126,,,69,75,,84,,,,,,18,,,,,,,,129,,,,,82,86,90,4,9,14,17,20,25,33,37',
',,,52,62,,,,80,,88,93,5,100,101,21,27,,,,,107,108,109,63,66,70,76,,',
',,,,,,,38,,,46,51,56,64,67,71,77,81,85,89,,8,13,,24,30,35,,,,,,,,,,',
',,,,,,,,,123,,,126,,,69,75,,84,,,,,,18,,,,,,,,129,,,,,82,86,90,4,9,14',
'17,20,25,33,37,,,,52,62,,,,80,,88,93,5,100,101,21,27,,,,,107,108,109',
'63,66,70,76,,,,,,,,,,105,,,46,51,56,64,67,71,77,81,85,89,587,8,13,595',
'598,600,104,,,,,,,,,,,,,,,,,,,,143,,,126,,,69,75,,84,,,601,,,,,,,589',
'590,593,596,,,,,,82,86,90,4,9,14,17,20,25,33,37,,,,52,62,,,,80,,88,93',
'5,100,101,21,27,,,,,107,108,109,63,66,70,76,,,,,,,,,,105,,,46,51,401',
'64,67,71,402,81,85,89,587,8,13,595,598,600,104,,,,,,,,,,,,,,,,,,,,399',
',,126,,,69,75,,84,,,601,,,,,,,589,590,593,596,,,,,,82,86,90,4,9,14,17',
'20,25,33,37,,,,52,62,,,,80,,88,93,5,100,101,21,27,,,,,107,108,109,63',
'66,70,76,,,,,,,,,,38,,,46,51,56,64,67,71,77,81,85,89,,8,13,,24,30,35',
',,,,,,,,,,,,,,,,,,,123,,,126,,,69,75,,84,,,,,,18,,,,,,,,129,,,,,82,86',
'90,4,9,14,17,20,25,33,37,,,,52,62,,,,80,,88,93,5,100,101,21,27,,,,,107',
'108,109,63,66,70,76,,,,,,,,,,105,,,46,51,401,64,67,71,402,81,85,89,',
'8,13,,,,104,,,,,,,,,,,,,,,,,,,,399,,,126,,,69,75,,84,,,,,,,,,,,,,,,',
',,,82,86,90,4,9,14,17,20,25,33,37,,,,52,62,,,,80,,88,93,5,100,101,21',
'27,,,,,107,108,109,63,66,70,76,,,,,,,,,,38,,,46,51,56,64,67,71,77,81',
'85,89,,8,13,,24,30,35,,,,,,,,,,,,,,,,,,,,123,,,126,,,69,75,,84,,748',
',,,18,,,,,,,,129,,,,,82,86,90,4,9,14,17,20,25,33,37,,,,52,62,,,,80,',
'88,93,5,100,101,21,27,,,,,107,108,109,63,66,70,76,,,,,,,,,,38,,,46,51',
'56,64,67,71,77,81,85,89,,8,13,,24,30,35,,,,,,,,,,,,,,,,,,,,123,,,126',
',,69,75,,84,,,,,,18,,,,,,,,129,,,,,82,86,90,4,9,14,17,20,25,33,37,,',
',52,62,,,,80,,88,93,5,100,101,21,27,,,,,107,108,109,63,66,70,76,,,,',
',,,,,38,,,46,51,56,64,67,71,77,81,85,89,,8,13,,24,30,35,,,,,,,,,,,,',
',,,,,,,123,,,126,,,69,75,,84,,,,,,18,,,,,,,,129,,,,,82,86,90,4,9,14',
'17,20,25,33,37,,,,52,62,,,,80,,88,93,5,100,101,21,27,,,,,107,108,109',
'63,66,70,76,,,,,,,,,,38,,,46,51,56,64,67,71,77,81,85,89,,8,13,,24,30',
'35,,,,,,,,,,,,,,,,,,,,123,,,126,,,69,75,,84,,,,,,18,,,,,,,,129,,,,,82',
'86,90,4,9,14,17,20,25,33,37,,,,52,62,,,,80,,88,93,5,100,101,21,27,,',
',,107,108,109,63,66,70,76,,,,,,,,,,38,,,46,51,56,64,67,71,77,81,85,89',
',8,13,,24,30,35,,,,,,,,,,,,,,,,,,,,123,,,126,,,69,75,,84,,,,,,18,,,',
',,,,129,,,,,82,86,90,4,9,14,17,20,25,33,37,,,,52,62,,,,80,,88,93,5,100',
'101,21,27,,,,,107,108,109,63,66,70,76,,,,,,,,,,105,,,46,51,56,64,67',
'71,77,81,85,89,,8,13,,,,104,,,,,,,,,,,,,,,,,,,,143,,,144,,,69,75,,84',
',146,,,,,,,,,,,,,,,,,82,86,90,4,9,14,17,20,25,33,37,,,,52,62,,,,80,',
'88,93,5,11,15,21,27,,,,,49,54,59,63,66,70,76,,,96,,,,,,,38,,,46,51,56',
'64,67,71,77,81,85,89,,8,13,,24,30,35,,,,,,,,,,,,,,,,,,,,123,,,126,,',
'69,75,,84,,,,,,18,,,,,,,,60,,,,,82,86,90,4,9,14,17,20,25,33,37,,,,52',
'62,,,,80,,88,93,5,11,15,21,27,,,,,49,54,59,63,66,70,76,,,96,,,,,,,38',
',,46,51,56,64,67,71,77,81,85,89,,8,13,,24,30,35,,,,,,,,,,,,,,,,,,,,123',
',,126,,,69,75,,84,,,,,,18,,,,,,,,60,,,,,82,86,90,4,9,14,17,20,25,33',
'37,,,,52,62,,,,80,,88,93,5,11,15,21,27,,,,,49,54,59,63,66,70,76,,,96',
',,,,,,38,,,46,51,56,64,67,71,77,81,85,89,,8,13,,24,30,35,,,,,,,,,,,',
',,,,,,,,123,,,126,,,69,75,,84,,,,,,18,,,,,,,,60,,,,,82,86,90,4,9,14',
'17,20,25,33,37,,,,52,62,,,,80,,88,93,5,11,15,21,27,,,,,49,54,59,63,66',
'70,76,,,96,,,,,,,38,,,46,51,56,64,67,71,77,81,85,89,,8,13,,24,30,35',
',,,,,,,,,,,,,,,,,,,123,,,126,,,69,75,,84,,,,,,18,,,,,,,,60,,,,,82,86',
'90,4,9,14,17,20,25,33,37,,,,52,62,,,,80,,88,93,5,100,101,21,27,,,,,107',
'54,59,63,66,70,76,,,,,,,,,,38,,,46,51,56,64,67,71,77,81,85,89,,8,13',
',24,30,35,,,,,,,,,,,,,,,,,,,,123,,,126,,,69,75,,84,,321,,,,18,,,,,,',
',129,,,,,82,86,90,4,9,14,17,20,25,33,37,,,,52,62,,,,80,,88,93,5,100',
'101,21,27,,,,,107,108,109,63,66,70,76,,,,,,,,,,105,,,46,51,56,64,67',
'71,77,81,85,89,,8,13,,,,104,,,,,,,,,,,,,,,,,,,,106,,,53,,,69,75,,84',
',94,,,,,,,,,,,724,,,,,,82,86,90,4,9,14,17,20,25,33,37,,,,52,62,,,,80',
',88,93,5,100,101,21,27,,,,,107,108,109,63,66,70,76,,,,,,,,,,38,,,46',
'51,56,64,67,71,77,81,85,89,,8,13,,24,30,35,,,,,,,,,,,,,,,,,,,,123,,',
'126,,,69,75,,84,,,,,,18,,,,,,,,129,,,,,82,86,90,4,9,14,17,20,25,33,37',
',,,52,62,,,,80,,88,93,5,100,101,21,27,,,,,107,108,109,63,66,70,76,,',
',,,,,,,38,,,46,51,56,64,67,71,77,81,85,89,,8,13,,24,30,35,,,,,,,,,,',
',,,,,,,,,123,,,126,,,69,75,,84,,,,,,18,,,,,,,,129,,,,,82,86,90,4,9,14',
'17,20,25,33,37,,,,52,62,,,,80,,88,93,5,100,101,21,27,,,,,107,108,109',
'63,66,70,76,,,,,,,,,,38,,,46,51,56,64,67,71,77,81,85,89,,8,13,,24,30',
'35,,,,,,,,,,,,,,,,,,,,123,,,126,,,69,75,,84,,,,,,18,,,,,,,,129,,,,,82',
'86,90,4,9,14,17,20,25,33,37,,,,52,62,,,,80,,88,93,5,100,101,21,27,,',
',,107,108,109,63,66,70,76,,,,,,,,,,38,,,46,51,56,64,67,71,77,81,85,89',
',8,13,,24,30,35,,,,,,,,,,,,,,,,,,,,123,,,126,,,69,75,,84,,744,,,,18',
',,,,,,,129,,,,,82,86,90,4,9,14,17,20,25,33,37,,,,52,62,,,,80,,88,93',
'5,100,101,21,27,,,,,107,108,109,63,66,70,76,,,,,,,,,,38,,,46,51,56,64',
'67,71,77,81,85,89,,8,13,,24,30,35,,,,,,,,,,,,,,,,,,,,123,,,126,,,69',
'75,,84,,,,,,18,,,,,,,,129,,,,,82,86,90,4,9,14,17,20,25,33,37,,,,52,62',
',,,80,,88,93,5,100,101,21,27,,,,,107,108,109,63,66,70,76,,,,,,,,,,38',
',,46,51,56,64,67,71,77,81,85,89,,8,13,,24,30,35,,,,,,,,,,,,,,,,,,,,123',
',,126,426,,69,75,,84,,,,,,18,,,,,,,,129,,,,,82,86,90,4,9,14,17,20,25',
'33,37,,,,52,62,,,,80,,88,93,5,100,101,21,27,,,,,107,108,109,63,66,70',
'76,,,,,,,,,,38,,,46,51,56,64,67,71,77,81,85,89,,8,13,,24,30,35,,,,,',
',,,,,,,,,,,,,,123,,,126,,,69,75,,84,,,,,,18,,,,,,,,129,,,,,82,86,90',
'4,9,14,17,20,25,33,37,,,,52,62,,,,80,,88,93,5,100,101,21,27,,,,,107',
'108,109,63,66,70,76,,,,,,,,,,38,,,46,51,56,64,67,71,77,81,85,89,,8,13',
',24,30,35,,,,,,,,,,,,,,,,,,,,123,,,126,,,69,75,,84,,,,,,18,,,,,,,,129',
',,,,82,86,90,4,9,14,17,20,25,33,37,,,,52,62,,,,80,,88,93,5,100,101,21',
'27,,,,,107,108,109,63,66,70,76,,,,,,,,,,38,,,46,51,56,64,67,71,77,81',
'85,89,,8,13,,24,30,35,,,,,,,,,,,,,,,,,,,,123,,,126,,,69,75,,84,,,,,',
'18,,,,,,,,129,,,,,82,86,90,4,9,14,17,20,25,33,37,,,,52,62,,,,80,,88',
'93,5,100,101,21,27,,,,,107,108,109,63,66,70,76,,,,,,,,,,38,,,46,51,56',
'64,67,71,77,81,85,89,,8,13,,24,30,35,,,,,,,,,,,,,,,,,,,,123,,,126,,',
'69,75,,84,,,,,,18,,,,,,,,129,,,,,82,86,90,4,9,14,17,20,25,33,37,,,,52',
'62,,,,80,,88,93,5,100,101,21,27,,,,,107,108,109,63,66,70,76,,,,,,,,',
',38,,,46,51,56,64,67,71,77,81,85,89,,8,13,,24,30,35,,,,,,,,,,,,,,,,',
',,,123,,,126,,,69,75,,84,,,,,,18,,,,,,,,129,,,,,82,86,90,4,9,14,17,20',
'25,33,37,,,,52,62,,,,80,,88,93,5,100,101,21,27,,,,,107,108,109,63,66',
'70,76,,,,,,,,,,38,,,46,51,56,64,67,71,77,81,85,89,,8,13,,24,30,35,,',
',,,,,,,,,,,,,,,,,123,,,126,,,69,75,,84,,,,,,18,,,,,,,,129,,,,,82,86',
'90,4,9,14,17,20,25,33,37,,,,52,62,,,,80,,88,93,5,100,101,21,27,,,,,107',
'108,109,63,66,70,76,,,,,,,,,,38,,,46,51,56,64,67,71,77,81,85,89,,8,13',
',24,30,35,,,,,,,,,,,,,,,,,,,,123,,,126,,,69,75,,84,,,,,,18,,,,,,,,129',
',,,,82,86,90,4,9,14,17,20,25,33,37,,,,52,62,,,,80,,88,93,5,100,101,21',
'27,,,,,107,108,109,63,66,70,76,,,,,,,,,,38,,,46,51,56,64,67,71,77,81',
'85,89,,8,13,,24,30,35,,,,,,,,,,,,,,,,,,,,123,,,126,,,69,75,,84,,,,,',
'18,,,,,,,,129,,,,,82,86,90,4,9,14,17,20,25,33,37,,,,52,62,,,,80,,88',
'93,5,100,101,21,27,,,,,107,108,109,63,66,70,76,,,,,,,,,,38,,,46,51,56',
'64,67,71,77,81,85,89,,8,13,,24,30,35,,,,,,,,,,,,,,,,,,,,123,,,126,,',
'69,75,,84,,,,,,18,,,,,,,,129,,,,,82,86,90,4,9,14,17,20,25,33,37,,,,52',
'62,,,,80,,88,93,5,100,101,21,27,,,,,107,108,109,63,66,70,76,,,,,,,,',
',38,,,46,51,56,64,67,71,77,81,85,89,,8,13,,24,30,35,,,,,,,,,,,,,,,,',
',,,123,,,126,,,69,75,,84,,,,,,18,,,,,,,,129,,,,,82,86,90,4,9,14,17,20',
'25,33,37,,,,52,62,,,,80,,88,93,5,100,101,21,27,,,,,107,108,109,63,66',
'70,76,,,,,,,,,,38,,,46,51,56,64,67,71,77,81,85,89,,8,13,,24,30,35,,',
',,,,,,,,,,,,,,,,,123,,,126,,,69,75,,84,,,,,,18,,,,,,,,129,,,,,82,86',
'90,4,9,14,17,20,25,33,37,,,,52,62,,,,80,,88,93,5,100,101,21,27,,,,,107',
'108,109,63,66,70,76,,,,,,,,,,38,,,46,51,56,64,67,71,77,81,85,89,,8,13',
',24,30,35,,,,,,,,,,,,,,,,,,,,123,,,126,,,69,75,,84,,,,,,18,,,,,,,,129',
',,,,82,86,90,4,9,14,17,20,25,33,37,,,,52,62,,,,80,,88,93,5,100,101,21',
'27,,,,,107,108,109,63,66,70,76,,,,,,,,,,38,,,46,51,56,64,67,71,77,81',
'85,89,,8,13,,24,30,35,,,,,,,,,,,,,,,,,,,,123,,,126,,,69,75,,84,,,,,',
'18,,,,,,,,129,,,,,82,86,90,4,9,14,17,20,25,33,37,,,,52,62,,,,80,,88',
'93,5,100,101,21,27,,,,,107,108,109,63,66,70,76,,,,,,,,,,38,,,46,51,56',
'64,67,71,77,81,85,89,,8,13,,24,30,35,,,,,,,,,,,,,,,,,,,,123,,,126,,',
'69,75,,84,,,,,,18,,,,,,,,129,,,,,82,86,90,4,9,14,17,20,25,33,37,,,,52',
'62,,,,80,,88,93,5,100,101,21,27,,,,,107,108,109,63,66,70,76,,,,,,,,',
',38,,,46,51,56,64,67,71,77,81,85,89,,8,13,,24,30,35,,,,,,,,,,,,,,,,',
',,,123,,,126,,,69,75,,84,,,,,,18,,,,,,,,129,,,,,82,86,90,4,9,14,17,20',
'25,33,37,,,,52,62,,,,80,,88,93,5,100,101,21,27,,,,,107,108,109,63,66',
'70,76,,,,,,,,,,38,,,46,51,56,64,67,71,77,81,85,89,,8,13,,24,30,35,,',
',,,,,,,,,,,,,,,,,123,,,126,,,69,75,,84,,,,,,18,,,,,,,,129,,,,,82,86',
'90,4,9,14,17,20,25,33,37,,,,52,62,,,,80,,88,93,5,100,101,21,27,,,,,107',
'108,109,63,66,70,76,,,,,,,,,,38,,,46,51,56,64,67,71,77,81,85,89,,8,13',
',24,30,35,,,,,,,,,,,,,,,,,,,,123,,,126,,,69,75,,84,,,,,,18,,,,,,,,129',
',,,,82,86,90,4,9,14,17,20,25,33,37,,,,52,62,,,,80,,88,93,5,100,101,21',
'27,,,,,107,108,109,63,66,70,76,,,,,,,,,,38,,,46,51,56,64,67,71,77,81',
'85,89,,8,13,,24,30,35,,,,,,,,,,,,,,,,,,,,123,,,126,,,69,75,,84,,,,,',
'18,,,,,,,,129,,,,,82,86,90,4,9,14,17,20,25,33,37,,,,52,62,,,,80,,88',
'93,5,100,101,21,27,,,,,107,108,109,63,66,70,76,,,,,,,,,,38,,,46,51,56',
'64,67,71,77,81,85,89,,8,13,,24,30,35,,,,,,,,,,,,,,,,,,,,123,,,126,,',
'69,75,,84,,,,,,18,,,,,,,,129,,,,,82,86,90,4,9,14,17,20,25,33,37,,,,52',
'62,,,,80,,88,93,5,100,101,21,27,,,,,107,108,109,63,66,70,76,,,,,,,,',
',38,,,46,51,56,64,67,71,77,81,85,89,,8,13,,24,30,35,,,,,,,,,,,,,,,,',
',,,123,,,126,,,69,75,,84,,,,,,18,,,,,,,,129,,,,,82,86,90,4,9,14,17,20',
'25,33,37,,,,52,62,,,,80,,88,93,5,100,101,21,27,,,,,107,108,109,63,66',
'70,76,,,,,,,,,,38,,,46,51,56,64,67,71,77,81,85,89,,8,13,,24,30,35,,',
',,,,,,,,,,,,,,,,,123,,,126,,,69,75,,84,,,,,,18,,,,,,,,129,,,,,82,86',
'90,4,9,14,17,20,25,33,37,,,,52,62,,,,80,,88,93,5,100,101,21,27,,,,,107',
'108,109,63,66,70,76,,,,,,,,,,38,,,46,51,56,64,67,71,77,81,85,89,,8,13',
',24,30,35,,,,,,,,,,,,,,,,,,,,123,,,126,,,69,75,,84,,,,,,18,,,,,,,,129',
',,,,82,86,90,4,9,14,17,20,25,33,37,,,,52,62,,,,80,,88,93,5,100,101,21',
'27,,,,,107,108,109,63,66,70,76,,,,,,,,,,38,,,46,51,56,64,67,71,77,81',
'85,89,,8,13,,24,30,35,,,,,,,,,,,,,,,,,,,,123,,,126,,,69,75,,84,,,,,',
'18,,,,,,,,129,,,,,82,86,90,4,9,14,17,20,25,33,37,,,,52,62,,,,80,,88',
'93,5,100,101,21,27,,,,,107,108,109,63,66,70,76,,,,,,,,,,38,,,46,51,56',
'64,67,71,77,81,85,89,,8,13,,24,30,35,,,,,,,,,,,,,,,,,,,,123,,,126,,',
'69,75,,84,,,,,,18,,,,,,,,129,,,,,82,86,90,4,9,14,17,20,25,33,37,,,,52',
'62,,,,80,,88,93,5,100,101,21,27,,,,,107,108,109,63,66,70,76,,,,,,,,',
',38,,,46,51,56,64,67,71,77,81,85,89,,8,13,,24,30,35,,,,,,,,,,,,,,,,',
',,,123,,,126,,,69,75,,84,,,,,,18,,,,,,,,129,,,,,82,86,90,4,9,14,17,20',
'25,33,37,,,,52,62,,,,80,,88,93,5,100,101,21,27,,,,,107,108,109,63,66',
'70,76,,,,,,,,,,38,,,46,51,56,64,67,71,77,81,85,89,,8,13,,24,30,35,,',
',,,,,,,,,,,,,,,,,123,,,126,,,69,75,,84,,,,,,18,,,,,,,,129,,,,,82,86',
'90,4,9,14,17,20,25,33,37,,,,52,62,,,,80,,88,93,5,100,101,21,27,,,,,107',
'108,109,63,66,70,76,,,,,,,,,,38,,,46,51,56,64,67,71,77,81,85,89,,8,13',
',24,30,35,,,,,,,,,,,,,,,,,,,,123,,,126,,,69,75,,84,,848,,,,18,,,,,,',
',129,,,,,82,86,90,4,9,14,17,20,25,33,37,,,,52,62,,,,80,,88,93,5,100',
'101,21,27,,,,,107,54,59,63,66,70,76,,,,,,,,,,38,,,46,51,56,64,67,71',
'77,81,85,89,,8,13,,24,30,35,,,,,,,,,,,,,,,,,,,,123,,,126,,,69,75,,84',
',321,,,,18,,,,,,,,129,,,,,82,86,90,4,9,14,17,20,25,33,37,,,,52,62,,',
',80,,88,93,5,11,15,21,27,,,,,49,54,59,63,66,70,76,,,96,,,,,,,38,,,46',
'51,56,64,67,71,77,81,85,89,,8,13,,24,30,35,,,,,,,,,,,,,,,,,,,,123,,',
'126,,,69,75,,84,,,,,,18,,,,,,,,60,,,,,82,86,90,4,9,14,17,20,25,33,37',
',,,52,62,,,,80,,88,93,5,11,15,21,27,,,,,49,54,59,63,66,70,76,,,96,,',
',,,,38,,,46,51,56,64,67,71,77,81,85,89,,8,13,,24,30,35,,,,,,,,,,,,,',
',,,,,,123,,,126,,,69,75,,84,,,,,,18,,,,,,,,60,,,,,82,86,90,4,9,14,17',
'20,25,33,37,,,,52,62,,,,80,,88,93,5,11,15,21,27,,,,,49,54,59,63,66,70',
'76,,,96,,,,,,,38,,,46,51,56,64,67,71,77,81,85,89,,8,13,,24,30,35,,,',
',,,,,,,,,,,,,,,,123,,,126,,,69,75,,84,,,,,,18,,,,,,,,60,,,,,82,86,90',
'4,9,14,17,20,25,33,37,,,,52,62,,,,80,,88,93,5,11,15,21,27,,,,,49,54',
'59,63,66,70,76,,,96,,,,,,,38,,,46,51,56,64,67,71,77,81,85,89,,8,13,',
'24,30,35,,,,,,,,,,,,,,,,,,,,123,,,126,,,69,75,,84,,,,,,18,,,,,,,,60',
',,,,82,86,90,4,9,14,,,,33,17,20,25,31,37,,,,52,62,,,,80,,88,93,5,11',
'15,21,27,,,,,49,54,59,63,66,70,76,,,96,,,,,,29,38,42,45,46,51,56,64',
'67,71,77,81,85,89,,8,13,,24,30,35,,,,,,,,,,,,,,,,,,,,40,,,53,,,69,75',
',84,,94,,,,18,,,,,,,,60,,,,,82,86,90,4,9,14,17,20,25,33,37,,,,52,62',
',,,80,,88,93,5,100,101,21,27,,,,,107,108,109,63,66,70,76,,,,,,,,,,38',
',,46,51,56,64,67,71,77,81,85,89,,8,13,,24,30,35,,,,,,,,,,,,,,,,,,,,123',
',,126,,,69,75,,84,,555,,119,,18,,,,,,,,129,,,,,82,86,90,4,9,14,17,20',
'25,33,37,,,,52,62,,,,80,,88,93,5,100,101,21,27,,,,,107,108,109,63,66',
'70,76,,,,,,,,,,38,,,46,51,56,64,67,71,77,81,85,89,,8,13,,24,30,35,,',
',,,,,,,,,,,,,,,,,123,,,126,,,69,75,,84,,,,,,18,,,,,,,,129,,,,,82,86',
'90,4,9,14,17,20,25,33,37,,,,52,62,,,,80,,88,93,5,100,101,21,27,,,,,107',
'108,109,63,66,70,76,,,,,,,,,,38,,,46,51,56,64,67,71,77,81,85,89,,8,13',
',24,30,35,,,,,,,,,,,,,,,,,,,,123,,,126,,,69,75,,84,,,,,,18,,,,,,,,129',
',,,,82,86,90,4,9,14,17,20,25,33,37,,,,52,62,,,,80,,88,93,5,100,101,21',
'27,,,,,107,108,109,63,66,70,76,,,,,,,,,,38,,,46,51,56,64,67,71,77,81',
'85,89,,8,13,,24,30,35,,,,,,,,,,,,,,,,,,,,123,,,126,,,69,75,,84,,,,,',
'18,,,,,,,,129,,,,,82,86,90,4,9,14,17,20,25,33,37,,,,52,62,,,,80,,88',
'93,5,100,101,21,27,,,,,107,54,59,63,66,70,76,,,,,,,,,,38,,,46,51,56',
'64,67,71,77,81,85,89,,8,13,,24,30,35,,,,,,,,,,,,,,,,,,,,123,,,126,,',
'471,75,,84,,135,,119,,18,,,,,,,,129,,,,,82,86,90,4,9,14,17,20,25,33',
'37,,,,52,62,,,,80,,88,93,5,100,101,21,27,,,,,107,54,59,63,66,70,76,',
',,,,,,,,38,,,46,51,56,64,67,71,77,81,85,89,,8,13,,24,30,35,,,,,,,,,',
',,,,,,,,,,123,,,126,,473,69,75,,84,,135,,119,,18,,,,,,,,129,,,,,82,86',
'90,4,9,14,17,20,25,33,37,,,,52,62,,,,80,,88,93,5,100,101,21,27,,,,,107',
'108,109,63,66,70,76,,,,,,,,,,38,,,46,51,56,64,67,71,77,81,85,89,,8,13',
',24,30,35,,,,,,,,,,,,,,,,,,,,123,,,126,,,69,75,,84,,,,,,18,,,,,,,,129',
',,,,82,86,90,4,9,14,17,20,25,33,37,,,,52,62,,,,80,,88,93,5,100,101,21',
'27,,,,,107,108,109,63,66,70,76,,,,,,,,,,38,,,46,51,56,64,67,71,77,81',
'85,89,,8,13,,24,30,35,,,,,,,,,,,,,,,,,,,,123,,,126,,,69,75,,84,,552',
',119,,18,,,,,,,,129,,,,,82,86,90,4,9,14,17,20,25,33,37,,,,52,62,,,,80',
',88,93,5,100,101,21,27,,,,,107,54,59,63,66,70,76,,,,,,,,,,38,,,46,51',
'56,64,67,71,77,81,85,89,,8,13,,24,30,35,,,,,,,,,,,,,,,,,,,,123,,,126',
',,69,75,,84,,135,,119,,18,,,,,,,,129,,,,,82,86,90,4,9,14,17,20,25,33',
'37,,,,52,62,,,,80,,88,93,5,11,15,21,27,,,,,49,54,59,63,66,70,76,,,96',
',,,,,,38,,,46,51,56,64,67,71,77,81,85,89,,8,13,,24,30,35,,,,,,,,,,,',
',,,,,,,,123,,,126,,,69,75,,84,,,,,,18,,,,,,,,60,,,,,82,86,90,4,9,14',
'17,20,25,33,37,,,,52,62,,,,80,,88,93,5,11,15,21,27,,,,,49,54,59,63,66',
'70,76,,,,,,,,,,38,,,46,51,56,64,67,71,77,81,85,89,,8,13,,24,30,35,,',
',,,,,,,,,,,,,,,,,123,,,126,,,69,75,,84,,492,,,,18,,,,,,,,129,,,,,82',
'86,90,4,9,14,17,20,25,33,37,,,,52,62,,,,80,,88,93,5,100,101,21,27,,',
',,107,108,109,63,66,70,76,,,,,,,,,,105,,,46,51,56,64,67,71,77,81,85',
'89,,8,13,,,,104,,,,,,,,,,,,,,,,,,,,835,,,126,,,69,75,,84,,,,,,,,,,,',
',,,,,,,82,86,90,4,9,14,17,20,25,33,37,,,,52,62,,,,80,,88,93,5,100,101',
'21,27,,,,,107,108,109,63,66,70,76,,,,,,,,,,38,,,46,51,56,64,67,71,77',
'81,85,89,,8,13,,24,30,35,,,,,,,,,,,,,,,,,,,,123,,,126,,,69,75,,84,,',
',,,18,,,,,,,,129,,,,,82,86,90,4,9,14,17,20,25,33,37,,,,52,62,,,,80,',
'88,93,5,100,101,21,27,,,,,107,108,109,63,66,70,76,,,,,,,,,,38,,,46,51',
'56,64,67,71,77,81,85,89,,8,13,,24,30,35,,,,,,,,,,,,,,,,,,,,123,,,126',
',,69,75,,84,,,,,,18,,,,,,,,129,,,,,82,86,90,4,9,14,17,20,25,33,37,,',
',52,62,,,,80,,88,93,5,100,101,21,27,,,,,107,108,109,63,66,70,76,,,,',
',,,,,38,,,46,51,56,64,67,71,77,81,85,89,,8,13,,24,30,35,,,,,,,,,,,,',
',,,,,,,123,,,126,,,69,75,,84,,,,,,18,,,,,,,,129,,,,,82,86,90,4,9,14',
'-251,-251,-251,33,-251,,,,-251,-251,,,,-251,,-251,-251,-251,-251,-251',
'-251,-251,,,,,-251,-251,-251,-251,-251,-251,-251,,,,,,,,,,-251,,,-251',
'-251,-251,-251,-251,-251,-251,-251,-251,-251,,-251,-251,,-251,-251,-251',
',,,,,,,,,,,,,,,,,,,-251,,,-251,310,,-251,-251,,-251,,-251,,-251,,-251',
',,,,,,,-251,,,,,-251,-251,-251,-251,-251,-251,17,20,25,-251,37,,,,52',
'62,,,,80,,88,93,5,100,101,21,27,,,,,107,108,109,63,66,70,76,,,,,,,,',
',38,,,46,51,56,64,67,71,77,81,85,89,,8,13,,24,30,35,,,,,,,,,,,,,,,,',
',,,123,,,126,,,69,75,,84,,,,,,18,,,,,,,,129,,,,,82,86,90,4,9,14,17,20',
'25,33,37,,,,52,62,,,,80,,88,93,5,100,101,21,27,,,,,107,108,109,63,66',
'70,76,,,,,,,,,,38,,,46,51,56,64,67,71,77,81,85,89,,8,13,,24,30,35,,',
',,,,,,,,,,,,,,,,,123,,,126,,,69,75,,84,,,,,,18,,,,,,,,129,,,,,82,86',
'90,4,9,14,17,20,25,33,37,,,,52,62,,,,80,,88,93,5,100,101,21,27,,,,,107',
'108,109,63,66,70,76,,,,,,,,,,38,,,46,51,56,64,67,71,77,81,85,89,,8,13',
',24,30,35,,,,,,,,,,,,,,,,,,,,123,,,126,,,69,75,,84,,,,,,18,,,,,,,,129',
',,,,82,86,90,4,9,14,17,20,25,33,37,,,,52,62,,,,80,,88,93,5,11,15,21',
'27,,,,,49,54,59,63,66,70,76,,,,,,,,,,38,,,46,51,56,64,67,71,77,81,85',
'89,,8,13,,24,30,35,,,,,,,,,,,,,,,,,,,,123,,,126,,,69,75,,84,,492,,,',
'18,,,,,,,,129,,,,,82,86,90,4,9,14,-484,-484,-484,33,-484,,,,-484,-484',
',,,-484,,-484,-484,-484,-484,-484,-484,-484,,,,,-484,-484,-484,-484',
'-484,-484,-484,,,,,,,,,,-484,,,-484,-484,-484,-484,-484,-484,-484,-484',
'-484,-484,,-484,-484,,-484,-484,-484,,,,,,,,,,,,,,,,,,,,-484,,,-484',
'-484,,-484,-484,,-484,,-484,,-484,,-484,,,,,,,,-484,,,,,-484,-484,-484',
'-484,-484,-484,17,20,25,-484,37,,,,52,62,,,,80,,88,93,5,100,101,21,27',
',,,,107,108,109,63,66,70,76,,,,,,,,,,38,,,46,51,56,64,67,71,77,81,85',
'89,,8,13,,24,30,35,,,,,,,,,,,,,,,,,,,,123,,,126,,,69,75,,84,,,,,,18',
',,,,,,,129,,,,,82,86,90,4,9,14,-485,-485,-485,33,-485,,,,-485,-485,',
',,-485,,-485,-485,-485,-485,-485,-485,-485,,,,,-485,-485,-485,-485,-485',
'-485,-485,,,,,,,,,,-485,,,-485,-485,-485,-485,-485,-485,-485,-485,-485',
'-485,,-485,-485,,-485,-485,-485,,,,,,,,,,,,,,,,,,,,-485,,,-485,-485',
',-485,-485,,-485,,-485,,-485,,-485,,,,,,,,-485,,,,,-485,-485,-485,-485',
'-485,-485,17,20,25,-485,37,,,,52,62,,,,80,,88,93,5,100,101,21,27,,,',
',107,108,109,63,66,70,76,,,,,,,,,,38,,,46,51,56,64,67,71,77,81,85,89',
',8,13,,24,30,35,,,,,,,,,,,,,,,,,,,,123,,,126,,,69,75,,84,,,,,,18,,,',
',,,,129,,,,,82,86,90,4,9,14,17,20,25,33,37,,,,52,62,,,,80,,88,93,5,11',
'15,21,27,,,,,49,54,59,63,66,70,76,,,,,,,,,,38,,,46,51,56,64,67,71,77',
'81,85,89,,8,13,,24,30,35,,,,,,,,,,,,,,,,,,,,123,,,126,,,69,75,,84,,',
',,,18,,,,,,,,129,,,,,82,86,90,4,9,14,17,20,25,33,37,,,,52,62,,,,80,',
'88,93,5,11,15,21,27,,,,,49,54,59,63,66,70,76,,,96,,,,,,,38,,,46,51,56',
'64,67,71,77,81,85,89,,8,13,,24,30,35,,,,,,,,,,,,,,,,,,,,123,,,126,,',
'69,75,,84,,,,,,18,,,,,,,,60,,,,,82,86,90,4,9,14,17,20,25,33,37,,,,52',
'62,,,,80,,88,93,5,100,101,21,27,,,,,107,54,59,63,66,70,76,,,,,,,,,,38',
',,46,51,56,64,67,71,77,81,85,89,,8,13,,24,30,35,,,,,,,,,,,,,,,,,,,,123',
',,126,,,69,75,,84,,321,,,,18,,,,,,,,129,,,,,82,86,90,4,9,14,17,20,25',
'33,37,,,,52,62,,,,80,,88,93,5,100,101,21,27,,,,,107,108,109,63,66,70',
'76,,,,,,,,,,38,,,46,51,56,64,67,71,77,81,85,89,,8,13,,24,30,35,,,,,',
',,,,,,,,,,,,,,123,,,126,,,69,75,,84,,,,,,18,,,,,,,,129,,,,,82,86,90',
'4,9,14,17,20,25,33,37,,,,52,62,,,,80,,88,93,5,100,101,21,27,,,,,107',
'54,59,63,66,70,76,,,,,,,,,,38,,,46,51,56,64,67,71,77,81,85,89,,8,13',
',24,30,35,,,,,,,,,,,,,,,,,,,,123,,,126,,,69,75,,84,,321,,,,18,,,,,,',
',129,,,,,82,86,90,4,9,14,17,20,25,33,37,,,,52,62,,,,80,,88,93,5,100',
'101,21,27,,,,,107,108,109,63,66,70,76,,,,,,,,,,38,,,46,51,56,64,67,71',
'77,81,85,89,,8,13,,24,30,35,,,,,,,,,,,,,,,,,,,,123,,,126,,,69,75,,84',
',,,,,18,,,,,,,,129,,,,,82,86,90,4,9,14,17,20,25,33,37,,,,52,62,,,,80',
',88,93,5,11,15,21,27,,,,,49,54,59,63,66,70,76,,,,,,,,,,38,,,46,51,56',
'64,67,71,77,81,85,89,,8,13,,24,30,35,,,,,,,,,,,,,,,,,,,,123,,,126,,',
'69,75,,84,,,,,,18,,,,,,,,129,,,,,82,86,90,4,9,14,,,,33,162,166,171,178',
'182,187,193,196,,,214,217,218,222,226,,,155,158,160,168,173,180,183',
',,197,202,208,239,240,242,244,227,228,230,154,157,159,164,169,176,185',
'189,195,234,235,237,212,,,243,,,,,,,,170,177,,186,192,201,206,,213,216',
',,225,,,,,163,167,172,179,,,,,,,,,,,,,229,156,,161,165,174,181,184,188',
'194,198,203,,211,,,224,245,162,166,171,178,182,187,193,196,,,214,217',
'218,222,226,,,155,158,160,168,173,180,183,,,197,202,208,239,240,242',
'244,227,228,230,154,157,159,164,169,176,185,189,195,234,235,237,212',
',,243,,,,,,,,170,177,,186,192,201,206,,213,216,,,225,,,,,163,167,172',
'179,,,,,,,,,,,,,229,156,,161,165,174,181,184,188,194,198,203,,211,,',
'224,245,162,166,171,178,182,187,193,196,,,214,217,218,222,226,,,155',
'158,160,168,173,180,183,,,197,202,208,239,240,242,244,227,228,230,154',
'157,159,164,169,176,185,189,195,234,235,237,212,241,,243,,,,,,,,170',
'177,,186,192,201,206,,213,216,,,225,,,,,163,167,172,179,,,,,,,,,,,,',
'229,156,,161,165,174,181,184,188,194,198,203,,211,,,224,245,162,166',
'171,178,182,187,193,196,,,214,217,218,222,226,,,155,158,160,168,173',
'180,183,,,197,202,208,239,240,242,244,227,228,230,154,157,159,164,169',
'176,185,189,195,234,235,237,212,,,243,,,,,,,,170,177,,186,192,201,206',
',213,216,,,225,,,,,163,167,172,179,,,,,,,,,,,,,229,156,,161,165,174',
'181,184,188,194,198,203,,211,,,224,245,162,166,171,178,182,187,193,196',
',,214,217,218,222,226,,,155,158,160,168,173,180,183,,,197,202,208,239',
'240,242,244,227,228,230,154,157,159,164,169,176,185,189,195,234,235',
'237,212,,,243,,,,,,,,170,177,,186,192,201,206,,213,216,,,225,,,,,163',
'167,172,179,,,,,,,,,,,,,229,156,,161,165,174,181,184,188,194,198,203',
',211,,,224,162,166,171,178,182,187,193,196,,,214,217,218,222,226,,,155',
'158,160,168,173,180,183,,,197,202,208,239,240,242,244,227,228,230,154',
'157,159,164,169,176,185,189,195,234,235,237,212,327,328,243,329,,,,',
',,170,177,,186,192,201,206,,213,216,,,225,,,,,163,167,172,179,,,,,,',
',,,,,,229,156,,161,165,174,181,184,188,194,198,203,,211,,,224,162,166',
'171,178,182,187,193,196,,,214,217,218,222,226,,,155,158,160,168,173',
'180,183,,,197,202,208,239,240,242,244,227,228,230,154,157,159,164,169',
'176,185,189,195,234,235,237,212,327,328,243,329,,,,,,,170,177,,186,192',
'201,206,,213,216,,,225,,,,,163,167,172,179,,,,,,,,,,,,,229,156,,161',
'165,174,181,184,188,194,198,203,,211,,,224,162,166,171,178,182,187,193',
'196,,,214,217,218,222,226,,,155,158,160,168,173,180,183,,,197,202,208',
'210,215,219,223,227,228,230,154,157,159,164,169,176,185,189,195,200',
'205,209,212,67,71,221,81,,,,,,,170,177,,186,192,201,206,,213,216,,,225',
',,,,163,167,172,179,,,,,,207,,,,,,,229,156,,161,165,174,181,184,188',
'194,198,203,,211,475,476,224,,477,,,,,,,,170,177,,186,192,201,206,,213',
'216,,,225,,,,,163,167,172,179,,,,,,,,,,,,,229,156,,161,165,174,181,184',
'188,194,198,203,,211,694,523,224,,695,,,,,,,,170,177,,186,192,201,206',
',213,216,,,225,,,,,163,167,172,179,,,,,,,,,,,,,229,156,,161,165,174',
'181,184,188,194,198,203,,211,475,476,224,,477,,,,,,,,170,177,,186,192',
'201,206,,213,216,,,225,,,,,163,167,172,179,,,,,,,,,,,,,229,156,,161',
'165,174,181,184,188,194,198,203,,211,522,523,224,,525,,,,,,,,170,177',
',186,192,201,206,,213,216,,,225,,,,,163,167,172,179,,,,,,,,,,,,,229',
'156,,161,165,174,181,184,188,194,198,203,,211,557,523,224,,558,,,,,',
',,170,177,,186,192,201,206,,213,216,,,225,,,,,163,167,172,179,,,,,,',
',,,,,,229,156,,161,165,174,181,184,188,194,198,203,,211,538,523,224',
',539,,,,,,,,170,177,,186,192,201,206,,213,216,,,225,,,,,163,167,172',
'179,,,,,,,,,,,,,229,156,,161,165,174,181,184,188,194,198,203,,211,559',
'476,224,,560,,,,,,,,170,177,,186,192,201,206,,213,216,,,225,,,,,163',
'167,172,179,,,,,,,,,,,,,229,156,,161,165,174,181,184,188,194,198,203',
',211,475,476,224,,477,,,,,,,,170,177,,186,192,201,206,,213,216,,,225',
',,,,163,167,172,179,,,,,,,,,,,,,229,156,,161,165,174,181,184,188,194',
'198,203,,211,475,476,224,,477,,,,,,,,170,177,,186,192,201,206,,213,216',
',,225,,,,,163,167,172,179,,,,,,,,,,,,,229,156,,161,165,174,181,184,188',
'194,198,203,,211,880,523,224,,881,,,,,,,,170,177,,186,192,201,206,,213',
'216,,,225,,,,,163,167,172,179,,,,,,,,,,,,,229,156,,161,165,174,181,184',
'188,194,198,203,,211,559,476,224,,560,,,,,,,,170,177,,186,192,201,206',
',213,216,,,225,,,,,163,167,172,179,,,,,,,,,,,,,229,156,,161,165,174',
'181,184,188,194,198,203,,211,557,523,224,,558,,,,,,,,170,177,,186,192',
'201,206,,213,216,,,225,,,,,163,167,172,179,,,,,,,,,,,,,229,156,,161',
'165,174,181,184,188,194,198,203,,211,565,523,224,,566,,,,,,,,170,177',
',186,192,201,206,,213,216,,,225,,,,,163,167,172,179,,,,,,,,,,,,,229',
'156,,161,165,174,181,184,188,194,198,203,,211,528,476,224,,529,,,,,',
',,170,177,,186,192,201,206,,213,216,,,225,,,,,163,167,172,179,,,,,,',
',,,,,,229,156,,161,165,174,181,184,188,194,198,203,,211,542,476,224',
',543,,,,,,,,170,177,,186,192,201,206,,213,216,,,225,,,,,163,167,172',
'179,,,,,,,,,,,,,229,156,,161,165,174,181,184,188,194,198,203,,211,883',
'476,224,,884,,,,,,,,170,177,,186,192,201,206,,213,216,,,225,,,,,163',
'167,172,179,,,,,,,,,,,,,229,156,,161,165,174,181,184,188,194,198,203',
',211,568,476,224,,569,,,,,,,,170,177,,186,192,201,206,,213,216,,,225',
',,,,163,167,172,179,,,,,,,,,,,,,229,156,,161,165,174,181,184,188,194',
'198,203,,211,475,476,224,,477,,,,,,,,170,177,,186,192,201,206,,213,216',
',,225,,,,,163,167,172,179,,,,,,,,,,,,,229,156,,161,165,174,181,184,188',
'194,198,203,,211,,,224' ]
        racc_action_table = arr = Array.new(22309, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'478,602,602,400,677,336,137,478,478,478,749,99,478,478,478,703,478,103',
'115,678,610,610,884,91,374,520,478,114,624,683,836,118,335,1,335,478',
'478,836,478,478,478,478,478,739,621,483,34,399,219,880,739,399,483,361',
'34,219,560,320,520,320,703,703,703,703,374,336,336,336,137,683,624,118',
'883,610,298,478,799,64,115,115,115,836,478,621,64,64,64,478,478,64,64',
'64,99,64,313,602,560,739,103,483,678,677,794,64,64,400,91,677,677,478',
'114,642,64,64,99,64,64,64,64,64,103,749,678,478,880,531,643,749,749',
'478,478,400,400,884,361,339,670,637,519,884,884,64,64,64,64,64,64,64',
'64,64,64,64,64,64,64,517,361,64,64,64,880,95,64,627,365,64,880,880,64',
'670,64,519,64,849,64,849,64,64,64,64,64,64,64,883,64,298,64,799,625',
'883,883,298,298,799,799,339,339,339,122,64,64,522,326,64,64,313,64,64',
'522,522,522,313,313,794,522,522,568,522,543,794,794,559,531,95,365,365',
'522,98,531,531,98,650,333,542,333,365,522,522,122,522,522,522,522,522',
'95,613,455,58,538,653,215,664,517,223,58,607,569,215,517,517,223,559',
'326,326,326,522,522,522,522,522,522,522,522,522,522,522,522,522,522',
'455,568,522,522,522,319,522,319,98,98,522,539,664,606,402,664,662,522',
'568,522,543,522,522,522,522,522,522,522,605,522,522,522,538,599,322',
'542,322,568,528,588,568,569,543,694,522,565,522,479,522,522,538,522',
'522,667,479,479,479,542,569,479,479,479,72,479,402,297,297,587,860,72',
'671,402,538,479,539,860,402,569,528,586,569,528,479,479,585,479,479',
'479,479,479,583,837,539,694,881,565,695,402,837,681,694,881,565,695',
'134,694,881,565,695,113,529,134,682,72,539,402,113,190,401,860,573,567',
'479,525,190,562,694,573,565,479,525,525,525,140,479,479,525,525,556',
'525,140,200,837,32,694,881,565,695,200,553,529,865,865,529,551,134,479',
'550,525,525,113,525,525,525,525,525,566,221,401,544,479,573,210,566',
'221,401,479,479,566,210,401,104,104,32,140,541,32,525,525,525,525,525',
'525,525,525,525,525,525,525,525,525,401,692,525,525,525,209,525,142',
'145,540,525,527,209,891,142,145,566,525,401,525,891,525,525,525,525',
'525,525,525,696,525,828,525,205,705,705,403,92,526,687,205,390,507,403',
'92,525,687,525,390,525,525,504,525,525,252,252,252,252,252,142,145,150',
'252,252,502,891,707,252,150,252,252,252,252,252,252,252,828,828,828',
'828,252,252,252,252,252,252,252,403,92,252,687,709,390,710,548,252,252',
'252,252,252,252,252,252,252,252,252,252,252,252,490,252,252,150,252',
'252,252,548,548,548,548,548,548,548,548,548,548,548,833,548,548,10,713',
'548,548,833,252,619,619,252,773,773,252,252,715,252,717,252,548,486',
'548,252,548,548,548,548,548,548,548,252,548,574,574,484,252,252,252',
'252,252,252,260,10,723,252,10,548,80,80,80,833,80,438,241,252,80,80',
'241,241,725,80,482,80,80,80,80,80,80,80,36,36,35,35,80,80,80,80,80,80',
'80,728,260,80,438,260,584,584,438,438,80,570,570,80,80,80,80,80,80,80',
'80,80,80,481,80,80,480,80,80,80,756,756,756,756,756,756,756,756,756',
'756,756,733,756,756,26,26,756,756,735,80,688,688,80,324,324,80,80,737',
'80,314,314,756,738,756,80,756,756,756,756,756,756,756,80,756,472,740',
'468,80,80,80,80,80,80,743,467,465,80,747,756,557,557,557,435,557,456',
'80,80,557,557,639,451,447,557,433,557,557,557,557,557,557,557,429,424',
'423,391,557,557,557,557,557,557,557,386,435,385,360,350,435,435,489',
'348,557,774,334,557,557,557,557,557,557,557,557,557,557,778,557,557',
'779,557,557,557,489,489,489,489,489,489,489,489,489,489,489,782,489',
'489,783,787,489,489,323,557,557,318,557,557,316,557,557,796,557,301',
'557,489,557,489,557,489,489,489,489,489,489,489,557,489,802,803,300',
'557,557,557,557,557,557,558,558,558,557,558,489,299,557,558,558,489',
'807,287,558,251,558,558,558,558,558,558,558,814,815,816,250,558,558',
'558,558,558,558,558,536,536,819,536,536,536,248,246,143,558,141,138',
'558,558,558,558,558,558,558,558,558,558,133,558,558,132,558,558,558',
'431,431,431,431,431,431,431,431,431,431,431,835,431,431,131,130,431',
'431,123,558,558,121,558,558,116,558,558,109,558,845,558,431,558,431',
'558,431,431,431,431,431,431,431,558,431,846,108,106,558,558,558,558',
'558,558,854,855,857,558,858,431,431,558,290,290,290,290,290,290,859',
'105,102,290,290,87,83,864,290,74,290,290,290,290,290,290,290,866,45',
'44,40,290,290,290,290,290,290,290,439,38,290,47,47,47,47,47,290,290',
'290,290,290,290,290,290,290,290,290,290,290,290,882,290,290,19,290,290',
'290,17,14,439,889,890,9,439,439,439,439,136,136,136,136,136,3,895,,',
'290,,,290,,,290,290,,290,,290,,,,290,601,,,601,601,601,,290,,,,,290',
'290,290,290,290,290,,,,290,485,485,485,485,485,485,,,,485,485,,,,485',
',485,485,485,485,485,485,485,601,601,601,601,485,485,485,485,485,485',
'485,436,,485,421,421,421,421,421,485,485,485,485,485,485,485,485,485',
'485,485,485,485,485,,485,485,,485,485,485,,,436,,,,436,436,436,436,',
',,,,,,,,485,,,485,,,485,485,,485,,485,,,,485,701,,,701,701,701,,485',
',,,,485,485,485,485,485,485,,,,485,501,501,501,501,501,501,,,,501,501',
',,,501,,501,501,501,501,501,501,501,701,701,701,701,501,501,501,501',
'501,501,501,,,501,,,,,,501,501,501,501,501,501,501,501,501,501,501,501',
'501,501,,501,501,,501,501,501,440,,,,,,,,,,,,,,,,440,440,,501,,,501',
',,501,501,,501,,501,440,,440,501,440,440,440,440,,,440,501,440,,,,501',
'501,501,501,501,501,,,,501,764,764,764,764,764,764,,,,764,764,,,,764',
',764,764,764,764,764,764,764,,,,,764,764,764,764,764,764,764,,,764,',
',,,,764,764,764,764,764,764,764,764,764,764,764,764,764,764,,764,764',
',764,764,764,434,434,434,434,434,434,434,,,434,434,,,,,,434,434,,764',
',,764,,,764,764,,764,,764,434,,434,764,434,434,434,434,434,434,434,764',
'434,,,,764,764,764,764,764,764,,,,764,722,722,722,722,722,722,,,,722',
'722,,,,722,,722,722,722,722,722,722,722,,,,,722,722,722,722,722,722',
'722,,,722,,,,,,722,722,722,722,722,722,722,722,722,722,722,722,722,722',
',722,722,,722,722,722,430,430,430,430,430,430,430,430,430,430,430,,430',
'430,,,430,430,,722,,,722,,,722,722,,722,,722,430,,430,722,430,430,430',
'430,430,430,430,722,430,,,,722,722,722,722,722,722,,,,722,753,753,753',
'753,753,753,,,,753,753,,,,753,,753,753,753,753,753,753,753,,,,,753,753',
'753,753,753,753,753,,,753,,,,,,753,753,753,753,753,753,753,753,753,753',
'753,753,753,753,,753,753,,753,753,753,437,,,,,,,,,,,,,,,,437,437,,753',
',,753,,,753,753,,753,,753,437,,437,753,437,437,437,437,,,437,753,437',
',,,753,753,753,753,753,753,,,,753,791,791,791,791,791,791,,,,791,791',
',,,791,,791,791,791,791,791,791,791,,,,,791,791,791,791,791,791,791',
',,791,,,,,,791,791,791,791,791,791,791,791,791,791,791,791,791,791,',
'791,791,,791,791,791,428,428,428,428,428,428,428,,,428,428,,,,,,428',
'428,,791,,,791,,,791,791,,791,,791,428,,428,791,428,428,428,428,428',
'428,428,791,428,,,,791,791,791,791,791,791,,,,791,535,535,535,535,535',
'535,,,,535,535,,,,535,,535,535,535,535,535,535,535,,,,,535,535,535,535',
'535,535,535,,,535,,,,,,535,535,535,535,535,535,535,535,535,535,535,535',
'535,535,,535,535,,535,535,535,432,432,432,432,432,432,432,,,432,432',
',,,,,432,432,,535,,,535,,,535,535,,535,,535,432,,432,535,432,432,432',
'432,432,432,432,535,432,,,,535,535,535,535,535,535,,,,535,302,302,302',
'302,302,302,,,,302,302,,,,302,,302,302,302,302,302,302,302,,,,,302,302',
'302,302,302,302,302,,,302,,,,,,302,302,302,302,302,302,302,302,302,302',
'302,302,302,302,,302,302,,302,302,302,452,452,452,452,452,452,452,,',
'452,452,,,,,,452,452,,302,,,302,,,302,302,,302,,302,452,,452,302,452',
'452,452,452,452,452,452,302,452,,,,302,302,302,302,302,302,,,,302,712',
'712,712,712,712,712,,,,712,712,,,,712,,712,712,712,712,712,712,712,',
',,,712,712,712,712,712,712,712,,,712,,,,,,712,712,712,712,712,712,712',
'712,712,712,712,712,712,712,,712,712,,712,712,712,441,,,,,,,,,,,,,,',
',441,441,,712,,,712,,,712,712,,712,,712,441,,441,712,441,441,441,441',
',,441,712,441,,,,712,712,712,712,712,712,,,,712,257,257,257,257,257',
'257,,,,257,257,,,,257,,257,257,257,257,257,257,257,,,,,257,257,257,257',
'257,257,257,,,257,,,,,,257,257,257,257,257,257,257,257,257,257,257,257',
'257,257,,257,257,,257,257,257,448,448,448,448,448,448,448,,,448,448',
',,,,,448,448,,257,,,257,,,257,257,,257,,257,448,,448,257,448,448,448',
'448,448,448,448,257,448,,,,257,257,257,257,257,257,,,,257,462,462,462',
'462,462,462,,,,462,462,,,,462,,462,462,462,462,462,462,462,,,,,462,462',
'462,462,462,462,462,,,462,,,,,,462,462,462,462,462,462,462,462,462,462',
'462,462,462,462,,462,462,,462,462,462,442,442,442,442,442,442,442,,',
'442,442,,,,,,442,442,,462,,,462,,,462,462,,462,,462,442,,442,462,442',
'442,442,442,442,442,442,462,442,,,,462,462,462,462,462,462,,,,462,813',
'813,813,813,813,813,,,,813,813,,,,813,,813,813,813,813,813,813,813,',
',,,813,813,813,813,813,813,813,,,813,,,,,,813,813,813,813,813,813,813',
'813,813,813,813,813,813,813,,813,813,,813,813,813,446,446,446,446,446',
'446,446,,,446,446,,,,,,446,446,,813,,,813,,,813,813,,813,,813,446,,446',
'813,446,446,446,446,446,446,446,813,446,,,,813,813,813,813,813,813,',
',,813,820,820,820,820,820,820,,,,820,820,,,,820,,820,820,820,820,820',
'820,820,,,,,820,820,820,820,820,820,820,,,820,,,,,,820,820,820,820,820',
'820,820,820,820,820,820,820,820,820,,820,820,,820,820,820,444,444,444',
'444,444,444,444,444,,444,444,,,,,,444,444,,820,,,820,,,820,820,,820',
',820,444,,444,820,444,444,444,444,444,444,444,820,444,,,,820,820,820',
'820,820,820,,,,820,821,821,821,821,821,821,,,,821,821,,,,821,,821,821',
'821,821,821,821,821,,,,,821,821,821,821,821,821,821,,,821,,,,,,821,821',
'821,821,821,821,821,821,821,821,821,821,821,821,,821,821,,821,821,821',
'443,,,,,,,,,,,,,,,,443,443,,821,,,821,,,821,821,,821,,821,443,,443,821',
'443,443,443,443,,,443,821,443,,,,821,821,821,821,821,821,,,,821,691',
'691,691,691,691,691,,,,691,691,,,,691,,691,691,691,691,691,691,691,',
',,,691,691,691,691,691,691,691,,,691,,,,,,691,691,691,691,691,691,691',
'691,691,691,691,691,691,691,,691,691,,691,691,691,453,453,453,453,453',
'453,453,453,453,453,453,,453,453,,,453,453,,691,,,691,,,691,691,,691',
',691,453,,453,691,453,453,453,453,453,453,453,691,453,,,,691,691,691',
'691,691,691,,,,691,454,454,454,454,454,454,,,,454,454,,,,454,,454,454',
'454,454,454,454,454,,,,,454,454,454,454,454,454,454,,,454,,,,,,454,454',
'454,454,454,454,454,454,454,454,454,454,454,454,,454,454,,454,454,454',
'450,,,,,,,,,,,,,,,,450,450,,454,,,454,,,454,454,,454,,454,450,,,454',
'450,450,450,450,,,,454,,,,,454,454,454,454,454,454,,,,454,2,2,2,2,2',
'2,,,,2,2,,,,2,,2,2,2,2,2,2,2,,,,,2,2,2,2,2,2,2,,,2,,,,,,2,2,2,2,2,2',
'2,2,2,2,2,2,2,2,,2,2,,2,2,2,445,,,,,,,,,,,,,,,,445,445,,2,,,2,,,2,2',
',2,,2,445,,445,2,445,445,445,445,,,,2,,,,,2,2,2,2,2,2,,,,2,752,752,752',
'752,752,752,,,,752,752,,,,752,,752,752,752,752,752,752,752,,,,,752,752',
'752,752,752,752,752,,,752,,,,,,752,752,752,752,752,752,752,752,752,752',
'752,752,752,752,,752,752,,752,752,752,449,,,,,,,,,,,,,,,,449,449,,752',
',,752,,,752,752,,752,,752,449,,449,752,449,449,449,449,,,,752,,,,,752',
'752,752,752,752,752,,,,752,823,823,823,823,823,823,,,,823,823,,,,823',
',823,823,823,823,823,823,823,,,,,823,823,823,823,823,823,823,,,823,',
',,,,823,823,823,823,823,823,823,823,823,823,823,823,823,823,,823,823',
',823,823,823,,,,,,,,,,,,,,,,,,,,823,,,823,,,823,823,,823,,823,,,,823',
',,,,,,,823,,,,,823,823,823,823,823,823,,,,823,826,826,826,826,826,826',
',,,826,826,,,,826,,826,826,826,826,826,826,826,,,,,826,826,826,826,826',
'826,826,,,826,,,,,,826,826,826,826,826,826,826,826,826,826,826,826,826',
'826,,826,826,,826,826,826,,,,,,,,,,,,,,,,,,,,826,,,826,,,826,826,,826',
',826,,,,826,,,,,,,,826,,,,,826,826,826,826,826,826,,,,826,581,581,581',
'581,581,581,,,,581,581,,,,581,,581,581,581,581,581,581,581,,,,,581,581',
'581,581,581,581,581,,,581,,,,,,581,581,581,581,581,581,581,581,581,581',
'581,581,581,581,,581,581,,581,581,581,,,,,,,,,,,,,,,,,,,,581,,,581,',
',581,581,,581,,581,,,,581,,,,,,,,581,,,,,581,581,581,581,581,581,,,',
'581,53,53,53,53,53,53,,,,53,53,,,,53,,53,53,53,53,53,53,53,,,,,53,53',
'53,53,53,53,53,,,53,,,,,,53,53,53,53,53,53,53,53,53,53,53,53,53,53,',
'53,53,,53,53,53,,,,,,,,,,,,,,,,,,,,53,,,53,,,53,53,,53,,53,,,,53,,,',
',,,,53,,,,,53,53,53,53,53,53,,,,53,126,126,126,126,126,126,,,,126,126',
',,,126,,126,126,126,126,126,126,126,,,,,126,126,126,126,126,126,126',
',,126,,,,,,126,126,126,126,126,126,126,126,126,126,126,126,126,126,',
'126,126,,126,126,126,,,,,,,,,,,,,,,,,,,,126,,,126,,,126,126,,126,,126',
',,,126,,,,,,,,126,,,,,126,126,126,126,126,126,,,,126,838,838,838,838',
'838,838,,,,838,838,,,,838,,838,838,838,838,838,838,838,,,,,838,838,838',
'838,838,838,838,,,838,,,,,,838,838,838,838,838,838,838,838,838,838,838',
'838,838,838,,838,838,,838,838,838,,,,,,,,,,,,,,,,,,,,838,,,838,,,838',
'838,,838,,838,,,,838,,,,,,,,838,,,,,838,838,838,838,838,838,,,,838,840',
'840,840,840,840,840,,,,840,840,,,,840,,840,840,840,840,840,840,840,',
',,,840,840,840,840,840,840,840,,,840,,,,,,840,840,840,840,840,840,840',
'840,840,840,840,840,840,840,,840,840,,840,840,840,,,,,,,,,,,,,,,,,,',
',840,,,840,,,840,840,,840,,840,,,,840,,,,,,,,840,,,,,840,840,840,840',
'840,840,,,,840,592,592,592,592,592,592,,,,592,592,,,,592,,592,592,592',
'592,592,592,592,,,,,592,592,592,592,592,592,592,,,592,,,,,,592,592,592',
'592,592,592,592,592,592,592,592,592,592,592,,592,592,,592,592,592,,',
',,,,,,,,,,,,,,,,,592,,,592,,,592,592,,592,,592,,,,592,,,,,,,,592,,,',
',592,592,592,592,592,592,,,,592,144,144,144,144,144,144,,,,144,144,',
',,144,,144,144,144,144,144,144,144,,,,,144,144,144,144,144,144,144,',
',144,,,,,,144,144,144,144,144,144,144,144,144,144,144,144,144,144,,144',
'144,,144,144,144,,,,,,,,,,,,,,,,,,,,144,,,144,,,144,144,,144,,144,,',
',144,,,,,,,,144,,,,,144,144,144,144,144,144,,,,144,751,751,751,751,751',
'751,,,,751,751,,,,751,,751,751,751,751,751,751,751,,,,,751,751,751,751',
'751,751,751,,,751,,,,,,751,751,751,751,751,751,751,751,751,751,751,751',
'751,751,,751,751,,751,751,751,745,745,745,745,745,745,745,745,745,745',
'745,,745,745,,,745,745,,751,,,751,,,751,751,,751,,751,745,,745,751,745',
'745,745,745,745,745,745,751,745,,,,751,751,751,751,751,751,62,62,62',
'751,62,745,,,62,62,,,745,62,,62,62,62,62,62,62,62,,,,,62,62,62,62,62',
'62,62,,,62,,,,,,,62,,,62,62,62,62,62,62,62,62,62,62,,62,62,,62,62,62',
'500,500,500,500,500,500,500,500,500,500,500,,500,500,,,500,500,,62,',
',62,,,62,62,,62,,,500,,500,62,500,500,500,500,500,500,500,62,500,,,',
'62,62,62,62,62,62,69,69,69,62,69,500,,,69,69,,,500,69,,69,69,69,69,69',
'69,69,,,,,69,69,69,69,69,69,69,,,69,,,,,,,69,,,69,69,69,69,69,69,69',
'69,69,69,,69,69,,69,69,69,626,626,626,626,626,626,626,626,626,626,626',
',626,626,,,626,626,,69,,626,69,,,69,69,,69,,,626,,626,69,626,626,626',
'626,626,626,626,69,626,,,,69,69,69,69,69,69,660,660,660,69,660,626,',
',660,660,626,,,660,,660,660,660,660,660,660,660,,,,,660,660,660,660',
'660,660,660,,,,,,,,,,660,,,660,660,660,660,660,660,660,660,660,660,',
'660,660,,660,660,660,822,822,822,822,822,822,822,822,822,822,822,,822',
'822,,,822,822,,660,,,660,,,660,660,,660,,,822,,822,660,822,822,822,822',
'822,822,822,660,822,,,,660,660,660,660,660,660,661,661,661,660,661,822',
',,661,661,822,,,661,,661,661,661,661,661,661,661,,,,,661,661,661,661',
'661,661,661,,,,,,,,,,661,,,661,661,661,661,661,661,661,661,661,661,',
'661,661,,661,661,661,369,369,369,369,369,369,369,369,369,369,369,,369',
'369,,,369,369,,661,,,661,,,661,661,,661,,,369,,369,661,369,369,369,369',
'369,369,369,661,369,,,,661,661,661,661,661,661,75,75,75,661,75,369,',
',75,75,,,,75,,75,75,75,75,75,75,75,,,,,75,75,75,75,75,75,75,,,,,,,,',
',75,,,75,75,75,75,75,75,75,75,75,75,,75,75,,75,75,75,817,817,817,817',
'817,817,817,817,817,817,817,,817,817,,,817,817,,75,,,75,,,75,75,,75',
',75,817,,817,75,817,817,817,817,817,817,817,75,817,,,,75,75,75,75,75',
'75,77,77,77,75,77,817,,,77,77,,,,77,,77,77,77,77,77,77,77,,77,,,77,77',
'77,77,77,77,77,,,,,,,,,,77,,,77,77,77,77,77,77,77,77,77,77,,77,77,,77',
'77,77,515,515,515,515,515,515,515,515,515,515,515,,515,515,,,515,515',
',77,,,77,77,,77,77,,77,,77,515,77,515,77,515,515,515,515,515,515,515',
'77,515,77,,,77,77,77,77,77,77,60,60,60,77,60,515,,,60,60,,,,60,,60,60',
'60,60,60,60,60,,,,,60,60,60,60,60,60,60,,,,,,,,,,60,,,60,60,60,60,60',
'60,60,60,60,60,,60,60,,60,60,60,720,720,720,720,720,720,720,720,720',
'720,720,,720,720,,,720,720,,60,,,60,,,60,60,,60,,,720,,720,60,720,720',
'720,720,720,720,720,60,720,,,,60,60,60,60,60,60,496,496,496,60,496,720',
',,496,496,,,,496,,496,496,496,496,496,496,496,,,,,496,496,496,496,496',
'496,496,,,,,,,,,,496,,,496,496,496,496,496,496,496,496,496,496,,496',
'496,,496,496,496,759,759,759,759,759,759,759,759,759,759,759,,759,759',
',,759,759,,496,,,496,,,496,496,,496,,496,759,,759,496,759,759,759,759',
'759,759,759,496,759,,,,496,496,496,496,496,496,84,84,84,496,84,759,',
',84,84,,,,84,,84,84,84,84,84,84,84,,,,,84,84,84,84,84,84,84,,,,,,,,',
',84,,,84,84,84,84,84,84,84,84,84,84,,84,84,,84,84,84,425,425,425,425',
'425,425,425,425,425,425,425,,425,425,,,425,425,,84,,,84,,,84,84,,84',
',,425,,425,84,425,425,425,425,425,425,425,84,425,,,,84,84,84,84,84,84',
'862,862,862,84,862,425,,,862,862,,,,862,,862,862,862,862,862,862,862',
',,,,862,862,862,862,862,862,862,,,,,,,,,,862,,,862,862,862,862,862,862',
'862,862,862,862,,862,862,,862,862,862,611,611,611,611,611,611,611,611',
'611,611,611,,611,611,,,611,611,,862,,,862,,,862,862,,862,,862,611,,611',
'862,611,611,611,611,611,611,611,862,611,,,,862,862,862,862,862,862,892',
'892,892,862,892,611,,,892,892,,,,892,,892,892,892,892,892,892,892,,',
',,892,892,892,892,892,892,892,,,,,,,,,,892,,,892,892,892,892,892,892',
'892,892,892,892,,892,892,,892,892,892,754,754,754,754,754,754,754,754',
'754,754,754,,754,754,,,754,754,,892,,,892,,,892,892,,892,,,754,,754',
'892,754,754,754,754,754,754,754,892,754,,,,892,892,892,892,892,892,748',
'748,748,892,748,754,,,748,748,,,,748,,748,748,748,748,748,748,748,,',
',,748,748,748,748,748,748,748,,,,,,,,,,748,,,748,748,748,748,748,748',
'748,748,748,748,,748,748,,748,748,748,124,124,124,124,124,124,124,124',
'124,124,124,,124,124,,,124,124,,748,,,748,,,748,748,,748,,,124,,124',
'748,124,124,124,124,124,124,124,748,124,,,,748,748,748,748,748,748,94',
'94,94,748,94,124,,,94,94,,,,94,,94,94,94,94,94,94,94,,,,,94,94,94,94',
'94,94,94,,,,,,,,,,94,,,94,94,94,94,94,94,94,94,94,94,,94,94,,,,94,761',
'761,761,761,761,761,761,761,761,761,761,,761,761,,,761,761,,94,,,94',
',,94,94,,94,,,761,,761,,761,761,761,761,761,761,761,,761,,,,94,94,94',
'94,94,94,5,5,5,94,5,761,,,5,5,,,,5,,5,5,5,5,5,5,5,,,,,5,5,5,5,5,5,5',
',,,,,,,,,5,,,5,5,5,5,5,5,5,5,5,5,,5,5,,,,5,41,41,41,41,41,41,41,41,41',
'41,41,,41,41,,,41,41,,5,,,5,,,5,5,,5,,5,41,,41,,41,41,41,41,41,41,41',
',41,,,,5,5,5,5,5,5,96,96,96,5,96,41,,,96,96,,,,96,,96,96,96,96,96,96',
'96,,,,,96,96,96,96,96,96,96,,,96,,,,,,,96,,,96,96,96,96,96,96,96,96',
'96,96,,96,96,,96,96,96,742,742,742,742,742,742,742,742,742,742,742,',
'742,742,,,742,742,,96,,,96,,,96,96,,96,,,742,,742,96,742,742,742,742',
'742,742,742,96,742,,,,96,96,96,96,96,96,744,744,744,96,744,742,,,744',
'744,,,,744,,744,744,744,744,744,744,744,,,,,744,744,744,744,744,744',
'744,,,,,,,,,,744,,,744,744,744,744,744,744,744,744,744,744,,744,744',
',744,744,744,,,,,,,,,,,,,,,,,,,,744,,,744,,,744,744,,744,,,,,,744,,',
',,,,,744,,,,,744,744,744,744,744,744,471,471,471,744,471,,,,471,471',
',,,471,,471,471,471,471,471,471,471,,,,,471,471,471,471,471,471,471',
',,471,,,,,,,471,,,471,471,471,471,471,471,471,471,471,471,,471,471,',
'471,471,471,,,,,,,,,,,,,,,,,,,,471,,,471,,,471,471,,471,,471,,471,,471',
',,,,,,,471,,,,,471,471,471,471,471,471,641,641,641,471,641,,,,641,641',
',,,641,,641,641,641,641,641,641,641,,,,,641,641,641,641,641,641,641',
',,,,,,,,,641,,,641,641,641,641,641,641,641,641,641,641,,641,641,,641',
'641,641,,,,,,,,,,,,,,,,,,,,641,,,641,,,641,641,,641,,641,,641,,641,',
',,,,,,641,,,,,641,641,641,641,641,641,11,11,11,641,11,,,,11,11,,,,11',
',11,11,11,11,11,11,11,,,,,11,11,11,11,11,11,11,,,,,,,,,,11,,,11,11,11',
'11,11,11,11,11,11,11,,11,11,,11,11,11,,,,,,,,,,,,,,,,,,,,11,,,11,,,11',
'11,,11,,11,,11,,11,,,,,,,,11,,,,,11,11,11,11,11,11,732,732,732,11,732',
',,,732,732,,,,732,,732,732,732,732,732,732,732,,,,,732,732,732,732,732',
'732,732,,,,,,,,,,732,,,732,732,732,732,732,732,732,732,732,732,,732',
'732,,732,732,732,,,,,,,,,,,,,,,,,,,,732,,,732,,,732,732,,732,,732,,732',
',732,,,,,,,,732,,,,,732,732,732,732,732,732,665,665,665,732,665,,,,665',
'665,,,,665,,665,665,665,665,665,665,665,,,,,665,665,665,665,665,665',
'665,,,,,,,,,,665,,,665,665,665,665,665,665,665,665,665,665,,665,665',
',665,665,665,,,,,,,,,,,,,,,,,,,,665,,,665,,,665,665,,665,,,,,,665,,',
',,,,,665,,,,,665,665,665,665,665,665,59,59,59,665,59,,,,59,59,,,,59',
',59,59,59,59,59,59,59,,,,,59,59,59,59,59,59,59,,,,,,,,,,59,,,59,59,59',
'59,59,59,59,59,59,59,,59,59,,59,59,59,,,,,,,,,,,,,,,,,,,,59,,,59,59',
',59,59,,59,,59,,59,,59,,,,,,,,59,,,,,59,59,59,59,59,59,848,848,848,59',
'848,,,,848,848,,,,848,,848,848,848,848,848,848,848,,,,,848,848,848,848',
'848,848,848,,,,,,,,,,848,,,848,848,848,848,848,848,848,848,848,848,',
'848,848,,848,848,848,,,,,,,,,,,,,,,,,,,,848,,,848,,,848,848,,848,,,',
',,848,,,,,,,,848,,,,,848,848,848,848,848,848,844,844,844,848,844,,,',
'844,844,,,,844,,844,844,844,844,844,844,844,,,,,844,844,844,844,844',
'844,844,,,,,,,,,,844,,,844,844,844,844,844,844,844,844,844,844,,844',
'844,,844,844,844,,,,,,,,,,,,,,,,,,,,844,,,844,,,844,844,,844,,844,,844',
',844,,,,,,,,844,,,,,844,844,844,844,844,844,346,346,346,844,346,,,,346',
'346,,,,346,,346,346,346,346,346,346,346,,,,,346,346,346,346,346,346',
'346,,,346,,,,,,,346,,,346,346,346,346,346,346,346,346,346,346,,346,346',
',346,346,346,,,,,,,,,,,,,,,,,,,,346,,,346,,,346,346,,346,,,,,,346,,',
',,,,,346,,,,,346,346,346,346,346,346,729,729,729,346,729,,,,729,729',
',,,729,,729,729,729,729,729,729,729,,,,,729,729,729,729,729,729,729',
',,,,,,,,,729,,,729,729,729,729,729,729,729,729,729,729,,729,729,,729',
'729,729,,,,,,,,,,,,,,,,,,,,729,,,729,,,729,729,,729,,729,,729,,729,',
',,,,,,729,,,,,729,729,729,729,729,729,726,726,726,729,726,,,,726,726',
',,,726,,726,726,726,726,726,726,726,,,,,726,726,726,726,726,726,726',
',,726,,,,,,,726,,,726,726,726,726,726,726,726,726,726,726,,726,726,',
'726,726,726,,,,,,,,,,,,,,,,,,,,726,,,726,,,726,726,,726,,,,,,726,,,',
',,,,726,,,,,726,726,726,726,726,726,842,842,842,726,842,,,,842,842,',
',,842,,842,842,842,842,842,842,842,,,,,842,842,842,842,842,842,842,',
',,,,,,,,842,,,842,842,842,842,842,842,842,842,842,842,,842,842,,842',
'842,842,,,,,,,,,,,,,,,,,,,,842,,,842,,,842,842,,842,,842,,842,,842,',
',,,,,,842,,,,,842,842,842,842,842,842,117,117,117,842,117,,,,117,117',
',,,117,,117,117,117,117,117,117,117,,,,,117,117,117,117,117,117,117',
',,,,,,,,,117,,,117,117,117,117,117,117,117,117,117,117,,117,117,,117',
'117,117,,,,,,,,,,,,,,,,,,,,117,,,117,,,117,117,,117,,,,,,117,,,,,,,',
'117,,,,,117,117,117,117,117,117,427,427,427,117,427,,,,427,427,,,,427',
',427,427,427,427,427,427,427,,,,,427,427,427,427,427,427,427,,,,,,,',
',,427,,,427,427,427,427,427,427,427,427,427,427,,427,427,,427,427,427',
',,,,,,,,,,,,,,,,,,,427,,,427,,,427,427,,427,,,,,,427,,,,,,,,427,,,,',
'427,427,427,427,427,427,119,119,119,427,119,,,,119,119,,,,119,,119,119',
'119,119,119,119,119,,,,,119,119,119,119,119,119,119,,,,,,,,,,119,,,119',
'119,119,119,119,119,119,119,119,119,,119,119,,119,119,119,,,,,,,,,,',
',,,,,,,,,119,,,119,,,119,119,,119,,,,,,119,,,,,,,,119,,,,,119,119,119',
'119,119,119,608,608,608,119,608,,,,608,608,,,,608,,608,608,608,608,608',
'608,608,,,,,608,608,608,608,608,608,608,,,,,,,,,,608,,,608,608,608,608',
'608,608,608,608,608,608,,608,608,,608,608,608,,,,,,,,,,,,,,,,,,,,608',
',,608,,,608,608,,608,,608,,,,608,,,,,,,,608,,,,,608,608,608,608,608',
'608,426,426,426,608,426,,,,426,426,,,,426,,426,426,426,426,426,426,426',
',,,,426,426,426,426,426,426,426,,,426,,,,,,,426,,,426,426,426,426,426',
'426,426,426,426,426,,426,426,,426,426,426,,,,,,,,,,,,,,,,,,,,426,,,426',
',,426,426,,426,,,,,,426,,,,,,,,426,,,,,426,426,426,426,426,426,56,56',
'56,426,56,,,,56,56,,,,56,,56,56,56,56,56,56,56,,56,,,56,56,56,56,56',
'56,56,,,,,,,,,,56,,,56,56,56,56,56,56,56,56,56,56,,56,56,,56,56,56,',
',,,,,,,,,,,,,,,,,,56,,,56,56,,56,56,,56,,56,,56,,56,,,,,,,,56,,56,,',
'56,56,56,56,56,56,680,680,680,56,680,,,,680,680,,,,680,,680,680,680',
'680,680,680,680,,,,,680,680,680,680,680,680,680,,,,,,,,,,680,,,680,680',
'680,680,680,680,680,680,680,680,,680,680,,680,680,680,,,,,,,,,,,,,,',
',,,,,680,,,680,,,680,680,,680,,680,,680,,680,,,,,,,,680,,,,,680,680',
'680,680,680,680,54,54,54,680,54,,,,54,54,,,,54,,54,54,54,54,54,54,54',
',,,,54,54,54,54,54,54,54,,,,,,,,,,54,,,54,54,54,54,54,54,54,54,54,54',
',54,54,,54,54,54,,,,,,,,,,,,,,,,,,,,54,,,54,54,,54,54,,54,,54,,54,,54',
',,,,,,,54,,,,,54,54,54,54,54,54,129,129,129,54,129,,,,129,129,,,,129',
',129,129,129,129,129,129,129,,,,,129,129,129,129,129,129,129,,,,,,,',
',,129,,,129,129,129,129,129,129,129,129,129,129,,129,129,,129,129,129',
',,,,,,,,,,,,,,,,,,,129,,,129,,,129,129,,129,,,,,,129,,,,,,,,129,,,,',
'129,129,129,129,129,129,,,,129,12,12,12,12,12,,,,12,12,,,,12,,12,12',
'12,12,12,12,12,,,,,12,12,12,12,12,12,12,,,12,,,,,,12,12,12,12,12,12',
'12,12,12,12,12,12,12,12,,12,12,,12,12,12,,,,,,,,,,,,,,,,,,,,12,,,12',
',,12,12,,12,,12,,,,12,,,,,,,,12,,,,,12,12,12,12,12,12,52,52,52,12,52',
',,,52,52,,,,52,,52,52,52,52,52,52,52,,,,,52,52,52,52,52,52,52,,,52,',
',,,,,52,,,52,52,52,52,52,52,52,52,52,52,,52,52,,52,52,52,,,,,,,,,,,',
',,,,,,,,52,,,52,,,52,52,,52,,,,,,52,,,,,,,,52,,,,,52,52,52,52,52,52',
'888,888,888,52,888,,,,888,888,,,,888,,888,888,888,888,888,888,888,,',
',,888,888,888,888,888,888,888,,,,,,,,,,888,,,888,888,888,888,888,888',
'888,888,888,888,,888,888,,888,888,888,,,,,,,,,,,,,,,,,,,,888,,,888,',
',888,888,,888,,888,,888,,888,,,,,,,,888,,,,,888,888,888,888,888,888',
'758,758,758,888,758,,,,758,758,,,,758,,758,758,758,758,758,758,758,',
',,,758,758,758,758,758,758,758,,,,,,,,,,758,,,758,758,758,758,758,758',
'758,758,758,758,,758,758,,758,758,758,,,,,,,,,,,,,,,,,,,,758,,,758,',
',758,758,,758,,,,,,758,,,,,,,,758,,,,,758,758,758,758,758,758,578,578',
'578,758,578,,,,578,578,,,,578,,578,578,578,578,578,578,578,,,,,578,578',
'578,578,578,578,578,,,,,,,,,,578,,,578,578,578,578,578,578,578,578,578',
'578,,578,578,,578,578,578,,,,,,,,,,,,,,,,,,,,578,,,578,,,578,578,,578',
',578,,,,578,,,,,,,,578,,,,,578,578,578,578,578,578,135,135,135,578,135',
',,,135,135,,,,135,,135,135,135,135,135,135,135,,,,,135,135,135,135,135',
'135,135,,,,,,,,,,135,,,135,135,135,135,135,135,135,135,135,135,,135',
'135,,135,135,135,,,,,,,,,,,,,,,,,,,,135,,,135,,,135,135,,135,,,,,,135',
',,,,,,,135,,,,,135,135,135,135,135,135,420,420,420,135,420,,,,420,420',
',,,420,,420,420,420,420,420,420,420,,,,,420,420,420,420,420,420,420',
',,,,,,,,,420,,,420,420,420,420,420,420,420,420,420,420,,420,420,,420',
'420,420,,,,,,,,,,,,,,,,,,,,420,,,420,,,420,420,,420,,,,,,420,,,,,,,',
'420,,,,,420,420,420,420,420,420,419,419,419,420,419,,,,419,419,,,,419',
',419,419,419,419,419,419,419,,,,,419,419,419,419,419,419,419,,,,,,,',
',,419,,,419,419,419,419,419,419,419,419,419,419,,419,419,,419,419,419',
',,,,,,,,,,,,,,,,,,,419,,,419,,,419,419,,419,,,,,,419,,,,,,,,419,,,,',
'419,419,419,419,419,419,49,49,49,419,49,,,,49,49,,,,49,,49,49,49,49',
'49,49,49,,,,,49,49,49,49,49,49,49,,,,,,,,,,49,,,49,49,49,49,49,49,49',
'49,49,49,,49,49,,49,49,49,,,,,,,,,,,,,,,,,,,,49,,,49,,,49,49,,49,,49',
',49,,49,,,,,,,,49,,,,,49,49,49,49,49,49,411,411,411,49,411,,,,411,411',
',,,411,,411,411,411,411,411,411,411,,,,,411,411,411,411,411,411,411',
',,411,,,,,,,411,,,411,411,411,411,411,411,411,411,411,411,,411,411,',
'411,411,411,,,,,,,,,,,,,,,,,,,,411,,,411,,,411,411,,411,,,,,,411,,,',
',,,,411,,,,,411,411,411,411,411,411,612,612,612,411,612,,,,612,612,',
',,612,,612,612,612,612,612,612,612,,,,,612,612,612,612,612,612,612,',
',,,,,,,,612,,,612,612,612,612,612,612,612,612,612,612,,612,612,,612',
'612,612,,,,,,,,,,,,,,,,,,,,612,,,612,,,612,612,,612,,,,,,612,,,,,,,',
'612,,,,,612,612,612,612,612,612,15,15,15,612,15,,,,15,15,,,,15,,15,15',
'15,15,15,15,15,,,,,15,15,15,15,15,15,15,,,,,,,,,,15,,,15,15,15,15,15',
'15,15,15,15,15,,15,15,,15,15,15,,,,,,,,,,,,,,,,,,,,15,,,15,,,15,15,',
'15,,15,,15,,15,,,,,,,,15,,,,,15,15,15,15,15,15,492,492,492,15,492,,',
',492,492,,,,492,,492,492,492,492,492,492,492,,,,,492,492,492,492,492',
'492,492,,,,,,,,,,492,,,492,492,492,492,492,492,492,492,492,492,,492',
'492,,492,492,492,,,,,,,,,,,,,,,,,,,,492,,,492,,,492,492,,492,,,,,,492',
',,,,,,,492,,,,,492,492,492,492,492,492,867,867,867,492,867,,,,867,867',
',,,867,,867,867,867,867,867,867,867,,,,,867,867,867,867,867,867,867',
',,,,,,,,,867,,,867,867,867,867,867,867,867,867,867,867,,867,867,,867',
'867,867,,,,,,,,,,,,,,,,,,,,867,,,867,,,867,867,,867,,,,,,867,,,,,,,',
'867,,,,,867,867,867,867,867,867,684,684,684,867,684,,,,684,684,,,,684',
',684,684,684,684,684,684,684,,,,,684,684,684,684,684,684,684,,,,,,,',
',,684,,,684,684,684,684,684,684,684,684,684,684,,684,684,,684,684,684',
',,,,,,,,,,,,,,,,,,,684,,,684,,,684,684,,684,,,,,,684,,,,,,,,684,,,,',
'684,684,684,684,684,684,146,146,146,684,146,,,,146,146,,,,146,,146,146',
'146,146,146,146,146,,,,,146,146,146,146,146,146,146,,,,,,,,,,146,,,146',
'146,146,146,146,146,146,146,146,146,410,146,146,410,410,410,146,,,,',
',,,,,,,,,,,,,,,146,,,146,,,146,146,,146,,,410,,,,,,,410,410,410,410',
',,,,,146,146,146,146,146,146,148,148,148,146,148,,,,148,148,,,,148,',
'148,148,148,148,148,148,148,,,,,148,148,148,148,148,148,148,,,,,,,,',
',148,,,148,148,148,148,148,148,148,148,148,148,777,148,148,777,777,777',
'148,,,,,,,,,,,,,,,,,,,,148,,,148,,,148,148,,148,,,777,,,,,,,777,777',
'777,777,,,,,,148,148,148,148,148,148,868,868,868,148,868,,,,868,868',
',,,868,,868,868,868,868,868,868,868,,,,,868,868,868,868,868,868,868',
',,,,,,,,,868,,,868,868,868,868,868,868,868,868,868,868,,868,868,,868',
'868,868,,,,,,,,,,,,,,,,,,,,868,,,868,,,868,868,,868,,,,,,868,,,,,,,',
'868,,,,,868,868,868,868,868,868,152,152,152,868,152,,,,152,152,,,,152',
',152,152,152,152,152,152,152,,,,,152,152,152,152,152,152,152,,,,,,,',
',,152,,,152,152,152,152,152,152,152,152,152,152,,152,152,,,,152,,,,',
',,,,,,,,,,,,,,,152,,,152,,,152,152,,152,,,,,,,,,,,,,,,,,,,152,152,152',
'152,152,152,652,652,652,152,652,,,,652,652,,,,652,,652,652,652,652,652',
'652,652,,,,,652,652,652,652,652,652,652,,,,,,,,,,652,,,652,652,652,652',
'652,652,652,652,652,652,,652,652,,652,652,652,,,,,,,,,,,,,,,,,,,,652',
',,652,,,652,652,,652,,652,,,,652,,,,,,,,652,,,,,652,652,652,652,652',
'652,685,685,685,652,685,,,,685,685,,,,685,,685,685,685,685,685,685,685',
',,,,685,685,685,685,685,685,685,,,,,,,,,,685,,,685,685,685,685,685,685',
'685,685,685,685,,685,685,,685,685,685,,,,,,,,,,,,,,,,,,,,685,,,685,',
',685,685,,685,,,,,,685,,,,,,,,685,,,,,685,685,685,685,685,685,555,555',
'555,685,555,,,,555,555,,,,555,,555,555,555,555,555,555,555,,,,,555,555',
'555,555,555,555,555,,,,,,,,,,555,,,555,555,555,555,555,555,555,555,555',
'555,,555,555,,555,555,555,,,,,,,,,,,,,,,,,,,,555,,,555,,,555,555,,555',
',,,,,555,,,,,,,,555,,,,,555,555,555,555,555,555,686,686,686,555,686',
',,,686,686,,,,686,,686,686,686,686,686,686,686,,,,,686,686,686,686,686',
'686,686,,,,,,,,,,686,,,686,686,686,686,686,686,686,686,686,686,,686',
'686,,686,686,686,,,,,,,,,,,,,,,,,,,,686,,,686,,,686,686,,686,,,,,,686',
',,,,,,,686,,,,,686,686,686,686,686,686,552,552,552,686,552,,,,552,552',
',,,552,,552,552,552,552,552,552,552,,,,,552,552,552,552,552,552,552',
',,,,,,,,,552,,,552,552,552,552,552,552,552,552,552,552,,552,552,,552',
'552,552,,,,,,,,,,,,,,,,,,,,552,,,552,,,552,552,,552,,,,,,552,,,,,,,',
'552,,,,,552,552,552,552,552,552,16,16,16,552,16,,,,16,16,,,,16,,16,16',
'16,16,16,16,16,,,,,16,16,16,16,16,16,16,,,,,,,,,,16,,,16,16,16,16,16',
'16,16,16,16,16,,16,16,,,,16,,,,,,,,,,,,,,,,,,,,16,,,16,,,16,16,,16,',
'16,,,,,,,,,,,,,,,,,16,16,16,16,16,16,690,690,690,16,690,,,,690,690,',
',,690,,690,690,690,690,690,690,690,,,,,690,690,690,690,690,690,690,',
',690,,,,,,,690,,,690,690,690,690,690,690,690,690,690,690,,690,690,,690',
'690,690,,,,,,,,,,,,,,,,,,,,690,,,690,,,690,690,,690,,,,,,690,,,,,,,',
'690,,,,,690,690,690,690,690,690,396,396,396,690,396,,,,396,396,,,,396',
',396,396,396,396,396,396,396,,,,,396,396,396,396,396,396,396,,,396,',
',,,,,396,,,396,396,396,396,396,396,396,396,396,396,,396,396,,396,396',
'396,,,,,,,,,,,,,,,,,,,,396,,,396,,,396,396,,396,,,,,,396,,,,,,,,396',
',,,,396,396,396,396,396,396,231,231,231,396,231,,,,231,231,,,,231,,231',
'231,231,231,231,231,231,,,,,231,231,231,231,231,231,231,,,231,,,,,,',
'231,,,231,231,231,231,231,231,231,231,231,231,,231,231,,231,231,231',
',,,,,,,,,,,,,,,,,,,231,,,231,,,231,231,,231,,,,,,231,,,,,,,,231,,,,',
'231,231,231,231,231,231,232,232,232,231,232,,,,232,232,,,,232,,232,232',
'232,232,232,232,232,,,,,232,232,232,232,232,232,232,,,232,,,,,,,232',
',,232,232,232,232,232,232,232,232,232,232,,232,232,,232,232,232,,,,',
',,,,,,,,,,,,,,,232,,,232,,,232,232,,232,,,,,,232,,,,,,,,232,,,,,232',
'232,232,232,232,232,393,393,393,232,393,,,,393,393,,,,393,,393,393,393',
'393,393,393,393,,,,,393,393,393,393,393,393,393,,,,,,,,,,393,,,393,393',
'393,393,393,393,393,393,393,393,,393,393,,393,393,393,,,,,,,,,,,,,,',
',,,,,393,,,393,,,393,393,,393,,393,,,,393,,,,,,,,393,,,,,393,393,393',
'393,393,393,616,616,616,393,616,,,,616,616,,,,616,,616,616,616,616,616',
'616,616,,,,,616,616,616,616,616,616,616,,,,,,,,,,616,,,616,616,616,616',
'616,616,616,616,616,616,,616,616,,,,616,,,,,,,,,,,,,,,,,,,,616,,,616',
',,616,616,,616,,616,,,,,,,,,,,616,,,,,,616,616,616,616,616,616,648,648',
'648,616,648,,,,648,648,,,,648,,648,648,648,648,648,648,648,,,,,648,648',
'648,648,648,648,648,,,,,,,,,,648,,,648,648,648,648,648,648,648,648,648',
'648,,648,648,,648,648,648,,,,,,,,,,,,,,,,,,,,648,,,648,,,648,648,,648',
',,,,,648,,,,,,,,648,,,,,648,648,648,648,648,648,499,499,499,648,499',
',,,499,499,,,,499,,499,499,499,499,499,499,499,,,,,499,499,499,499,499',
'499,499,,,,,,,,,,499,,,499,499,499,499,499,499,499,499,499,499,,499',
'499,,499,499,499,,,,,,,,,,,,,,,,,,,,499,,,499,,,499,499,,499,,,,,,499',
',,,,,,,499,,,,,499,499,499,499,499,499,18,18,18,499,18,,,,18,18,,,,18',
',18,18,18,18,18,18,18,,,,,18,18,18,18,18,18,18,,,,,,,,,,18,,,18,18,18',
'18,18,18,18,18,18,18,,18,18,,18,18,18,,,,,,,,,,,,,,,,,,,,18,,,18,,,18',
'18,,18,,,,,,18,,,,,,,,18,,,,,18,18,18,18,18,18,645,645,645,18,645,,',
',645,645,,,,645,,645,645,645,645,645,645,645,,,,,645,645,645,645,645',
'645,645,,,,,,,,,,645,,,645,645,645,645,645,645,645,645,645,645,,645',
'645,,645,645,645,,,,,,,,,,,,,,,,,,,,645,,,645,,,645,645,,645,,645,,',
',645,,,,,,,,645,,,,,645,645,645,645,645,645,628,628,628,645,628,,,,628',
'628,,,,628,,628,628,628,628,628,628,628,,,,,628,628,628,628,628,628',
'628,,,,,,,,,,628,,,628,628,628,628,628,628,628,628,628,628,,628,628',
',628,628,628,,,,,,,,,,,,,,,,,,,,628,,,628,,,628,628,,628,,,,,,628,,',
',,,,,628,,,,,628,628,628,628,628,628,259,259,259,628,259,,,,259,259',
',,,259,,259,259,259,259,259,259,259,,,,,259,259,259,259,259,259,259',
',,,,,,,,,259,,,259,259,259,259,259,259,259,259,259,259,,259,259,,259',
'259,259,,,,,,,,,,,,,,,,,,,,259,,,259,259,,259,259,,259,,,,,,259,,,,',
',,,259,,,,,259,259,259,259,259,259,261,261,261,259,261,,,,261,261,,',
',261,,261,261,261,261,261,261,261,,,,,261,261,261,261,261,261,261,,',
',,,,,,,261,,,261,261,261,261,261,261,261,261,261,261,,261,261,,261,261',
'261,,,,,,,,,,,,,,,,,,,,261,,,261,,,261,261,,261,,,,,,261,,,,,,,,261',
',,,,261,261,261,261,261,261,262,262,262,261,262,,,,262,262,,,,262,,262',
'262,262,262,262,262,262,,,,,262,262,262,262,262,262,262,,,,,,,,,,262',
',,262,262,262,262,262,262,262,262,262,262,,262,262,,262,262,262,,,,',
',,,,,,,,,,,,,,,262,,,262,,,262,262,,262,,,,,,262,,,,,,,,262,,,,,262',
'262,262,262,262,262,263,263,263,262,263,,,,263,263,,,,263,,263,263,263',
'263,263,263,263,,,,,263,263,263,263,263,263,263,,,,,,,,,,263,,,263,263',
'263,263,263,263,263,263,263,263,,263,263,,263,263,263,,,,,,,,,,,,,,',
',,,,,263,,,263,,,263,263,,263,,,,,,263,,,,,,,,263,,,,,263,263,263,263',
'263,263,264,264,264,263,264,,,,264,264,,,,264,,264,264,264,264,264,264',
'264,,,,,264,264,264,264,264,264,264,,,,,,,,,,264,,,264,264,264,264,264',
'264,264,264,264,264,,264,264,,264,264,264,,,,,,,,,,,,,,,,,,,,264,,,264',
',,264,264,,264,,,,,,264,,,,,,,,264,,,,,264,264,264,264,264,264,265,265',
'265,264,265,,,,265,265,,,,265,,265,265,265,265,265,265,265,,,,,265,265',
'265,265,265,265,265,,,,,,,,,,265,,,265,265,265,265,265,265,265,265,265',
'265,,265,265,,265,265,265,,,,,,,,,,,,,,,,,,,,265,,,265,,,265,265,,265',
',,,,,265,,,,,,,,265,,,,,265,265,265,265,265,265,266,266,266,265,266',
',,,266,266,,,,266,,266,266,266,266,266,266,266,,,,,266,266,266,266,266',
'266,266,,,,,,,,,,266,,,266,266,266,266,266,266,266,266,266,266,,266',
'266,,266,266,266,,,,,,,,,,,,,,,,,,,,266,,,266,,,266,266,,266,,,,,,266',
',,,,,,,266,,,,,266,266,266,266,266,266,267,267,267,266,267,,,,267,267',
',,,267,,267,267,267,267,267,267,267,,,,,267,267,267,267,267,267,267',
',,,,,,,,,267,,,267,267,267,267,267,267,267,267,267,267,,267,267,,267',
'267,267,,,,,,,,,,,,,,,,,,,,267,,,267,,,267,267,,267,,,,,,267,,,,,,,',
'267,,,,,267,267,267,267,267,267,268,268,268,267,268,,,,268,268,,,,268',
',268,268,268,268,268,268,268,,,,,268,268,268,268,268,268,268,,,,,,,',
',,268,,,268,268,268,268,268,268,268,268,268,268,,268,268,,268,268,268',
',,,,,,,,,,,,,,,,,,,268,,,268,,,268,268,,268,,,,,,268,,,,,,,,268,,,,',
'268,268,268,268,268,268,269,269,269,268,269,,,,269,269,,,,269,,269,269',
'269,269,269,269,269,,,,,269,269,269,269,269,269,269,,,,,,,,,,269,,,269',
'269,269,269,269,269,269,269,269,269,,269,269,,269,269,269,,,,,,,,,,',
',,,,,,,,,269,,,269,,,269,269,,269,,,,,,269,,,,,,,,269,,,,,269,269,269',
'269,269,269,270,270,270,269,270,,,,270,270,,,,270,,270,270,270,270,270',
'270,270,,,,,270,270,270,270,270,270,270,,,,,,,,,,270,,,270,270,270,270',
'270,270,270,270,270,270,,270,270,,270,270,270,,,,,,,,,,,,,,,,,,,,270',
',,270,,,270,270,,270,,,,,,270,,,,,,,,270,,,,,270,270,270,270,270,270',
'271,271,271,270,271,,,,271,271,,,,271,,271,271,271,271,271,271,271,',
',,,271,271,271,271,271,271,271,,,,,,,,,,271,,,271,271,271,271,271,271',
'271,271,271,271,,271,271,,271,271,271,,,,,,,,,,,,,,,,,,,,271,,,271,',
',271,271,,271,,,,,,271,,,,,,,,271,,,,,271,271,271,271,271,271,272,272',
'272,271,272,,,,272,272,,,,272,,272,272,272,272,272,272,272,,,,,272,272',
'272,272,272,272,272,,,,,,,,,,272,,,272,272,272,272,272,272,272,272,272',
'272,,272,272,,272,272,272,,,,,,,,,,,,,,,,,,,,272,,,272,,,272,272,,272',
',,,,,272,,,,,,,,272,,,,,272,272,272,272,272,272,273,273,273,272,273',
',,,273,273,,,,273,,273,273,273,273,273,273,273,,,,,273,273,273,273,273',
'273,273,,,,,,,,,,273,,,273,273,273,273,273,273,273,273,273,273,,273',
'273,,273,273,273,,,,,,,,,,,,,,,,,,,,273,,,273,,,273,273,,273,,,,,,273',
',,,,,,,273,,,,,273,273,273,273,273,273,274,274,274,273,274,,,,274,274',
',,,274,,274,274,274,274,274,274,274,,,,,274,274,274,274,274,274,274',
',,,,,,,,,274,,,274,274,274,274,274,274,274,274,274,274,,274,274,,274',
'274,274,,,,,,,,,,,,,,,,,,,,274,,,274,,,274,274,,274,,,,,,274,,,,,,,',
'274,,,,,274,274,274,274,274,274,275,275,275,274,275,,,,275,275,,,,275',
',275,275,275,275,275,275,275,,,,,275,275,275,275,275,275,275,,,,,,,',
',,275,,,275,275,275,275,275,275,275,275,275,275,,275,275,,275,275,275',
',,,,,,,,,,,,,,,,,,,275,,,275,,,275,275,,275,,,,,,275,,,,,,,,275,,,,',
'275,275,275,275,275,275,276,276,276,275,276,,,,276,276,,,,276,,276,276',
'276,276,276,276,276,,,,,276,276,276,276,276,276,276,,,,,,,,,,276,,,276',
'276,276,276,276,276,276,276,276,276,,276,276,,276,276,276,,,,,,,,,,',
',,,,,,,,,276,,,276,,,276,276,,276,,,,,,276,,,,,,,,276,,,,,276,276,276',
'276,276,276,277,277,277,276,277,,,,277,277,,,,277,,277,277,277,277,277',
'277,277,,,,,277,277,277,277,277,277,277,,,,,,,,,,277,,,277,277,277,277',
'277,277,277,277,277,277,,277,277,,277,277,277,,,,,,,,,,,,,,,,,,,,277',
',,277,,,277,277,,277,,,,,,277,,,,,,,,277,,,,,277,277,277,277,277,277',
'278,278,278,277,278,,,,278,278,,,,278,,278,278,278,278,278,278,278,',
',,,278,278,278,278,278,278,278,,,,,,,,,,278,,,278,278,278,278,278,278',
'278,278,278,278,,278,278,,278,278,278,,,,,,,,,,,,,,,,,,,,278,,,278,',
',278,278,,278,,,,,,278,,,,,,,,278,,,,,278,278,278,278,278,278,279,279',
'279,278,279,,,,279,279,,,,279,,279,279,279,279,279,279,279,,,,,279,279',
'279,279,279,279,279,,,,,,,,,,279,,,279,279,279,279,279,279,279,279,279',
'279,,279,279,,279,279,279,,,,,,,,,,,,,,,,,,,,279,,,279,,,279,279,,279',
',,,,,279,,,,,,,,279,,,,,279,279,279,279,279,279,280,280,280,279,280',
',,,280,280,,,,280,,280,280,280,280,280,280,280,,,,,280,280,280,280,280',
'280,280,,,,,,,,,,280,,,280,280,280,280,280,280,280,280,280,280,,280',
'280,,280,280,280,,,,,,,,,,,,,,,,,,,,280,,,280,,,280,280,,280,,,,,,280',
',,,,,,,280,,,,,280,280,280,280,280,280,281,281,281,280,281,,,,281,281',
',,,281,,281,281,281,281,281,281,281,,,,,281,281,281,281,281,281,281',
',,,,,,,,,281,,,281,281,281,281,281,281,281,281,281,281,,281,281,,281',
'281,281,,,,,,,,,,,,,,,,,,,,281,,,281,,,281,281,,281,,,,,,281,,,,,,,',
'281,,,,,281,281,281,281,281,281,282,282,282,281,282,,,,282,282,,,,282',
',282,282,282,282,282,282,282,,,,,282,282,282,282,282,282,282,,,,,,,',
',,282,,,282,282,282,282,282,282,282,282,282,282,,282,282,,282,282,282',
',,,,,,,,,,,,,,,,,,,282,,,282,,,282,282,,282,,,,,,282,,,,,,,,282,,,,',
'282,282,282,282,282,282,283,283,283,282,283,,,,283,283,,,,283,,283,283',
'283,283,283,283,283,,,,,283,283,283,283,283,283,283,,,,,,,,,,283,,,283',
'283,283,283,283,283,283,283,283,283,,283,283,,283,283,283,,,,,,,,,,',
',,,,,,,,,283,,,283,,,283,283,,283,,,,,,283,,,,,,,,283,,,,,283,283,283',
'283,283,283,284,284,284,283,284,,,,284,284,,,,284,,284,284,284,284,284',
'284,284,,,,,284,284,284,284,284,284,284,,,,,,,,,,284,,,284,284,284,284',
'284,284,284,284,284,284,,284,284,,284,284,284,,,,,,,,,,,,,,,,,,,,284',
',,284,,,284,284,,284,,,,,,284,,,,,,,,284,,,,,284,284,284,284,284,284',
'285,285,285,284,285,,,,285,285,,,,285,,285,285,285,285,285,285,285,',
',,,285,285,285,285,285,285,285,,,,,,,,,,285,,,285,285,285,285,285,285',
'285,285,285,285,,285,285,,285,285,285,,,,,,,,,,,,,,,,,,,,285,,,285,',
',285,285,,285,,,,,,285,,,,,,,,285,,,,,285,285,285,285,285,285,286,286',
'286,285,286,,,,286,286,,,,286,,286,286,286,286,286,286,286,,,,,286,286',
'286,286,286,286,286,,,,,,,,,,286,,,286,286,286,286,286,286,286,286,286',
'286,,286,286,,286,286,286,,,,,,,,,,,,,,,,,,,,286,,,286,,,286,286,,286',
',,,,,286,,,,,,,,286,,,,,286,286,286,286,286,286,811,811,811,286,811',
',,,811,811,,,,811,,811,811,811,811,811,811,811,,,,,811,811,811,811,811',
'811,811,,,,,,,,,,811,,,811,811,811,811,811,811,811,811,811,811,,811',
'811,,811,811,811,,,,,,,,,,,,,,,,,,,,811,,,811,,,811,811,,811,,811,,',
',811,,,,,,,,811,,,,,811,811,811,811,811,811,382,382,382,811,382,,,,382',
'382,,,,382,,382,382,382,382,382,382,382,,,,,382,382,382,382,382,382',
'382,,,,,,,,,,382,,,382,382,382,382,382,382,382,382,382,382,,382,382',
',382,382,382,,,,,,,,,,,,,,,,,,,,382,,,382,,,382,382,,382,,382,,,,382',
',,,,,,,382,,,,,382,382,382,382,382,382,291,291,291,382,291,,,,291,291',
',,,291,,291,291,291,291,291,291,291,,,,,291,291,291,291,291,291,291',
',,291,,,,,,,291,,,291,291,291,291,291,291,291,291,291,291,,291,291,',
'291,291,291,,,,,,,,,,,,,,,,,,,,291,,,291,,,291,291,,291,,,,,,291,,,',
',,,,291,,,,,291,291,291,291,291,291,292,292,292,291,292,,,,292,292,',
',,292,,292,292,292,292,292,292,292,,,,,292,292,292,292,292,292,292,',
',292,,,,,,,292,,,292,292,292,292,292,292,292,292,292,292,,292,292,,292',
'292,292,,,,,,,,,,,,,,,,,,,,292,,,292,,,292,292,,292,,,,,,292,,,,,,,',
'292,,,,,292,292,292,292,292,292,293,293,293,292,293,,,,293,293,,,,293',
',293,293,293,293,293,293,293,,,,,293,293,293,293,293,293,293,,,293,',
',,,,,293,,,293,293,293,293,293,293,293,293,293,293,,293,293,,293,293',
'293,,,,,,,,,,,,,,,,,,,,293,,,293,,,293,293,,293,,,,,,293,,,,,,,,293',
',,,,293,293,293,293,293,293,294,294,294,293,294,,,,294,294,,,,294,,294',
'294,294,294,294,294,294,,,,,294,294,294,294,294,294,294,,,294,,,,,,',
'294,,,294,294,294,294,294,294,294,294,294,294,,294,294,,294,294,294',
',,,,,,,,,,,,,,,,,,,294,,,294,,,294,294,,294,,,,,,294,,,,,,,,294,,,,',
'294,294,294,294,294,294,,,,294,295,295,295,295,295,,,,295,295,,,,295',
',295,295,295,295,295,295,295,,,,,295,295,295,295,295,295,295,,,295,',
',,,,295,295,295,295,295,295,295,295,295,295,295,295,295,295,,295,295',
',295,295,295,,,,,,,,,,,,,,,,,,,,295,,,295,,,295,295,,295,,295,,,,295',
',,,,,,,295,,,,,295,295,295,295,295,295,381,381,381,295,381,,,,381,381',
',,,381,,381,381,381,381,381,381,381,,,,,381,381,381,381,381,381,381',
',,,,,,,,,381,,,381,381,381,381,381,381,381,381,381,381,,381,381,,381',
'381,381,,,,,,,,,,,,,,,,,,,,381,,,381,,,381,381,,381,,381,,381,,381,',
',,,,,,381,,,,,381,381,381,381,381,381,805,805,805,381,805,,,,805,805',
',,,805,,805,805,805,805,805,805,805,,,,,805,805,805,805,805,805,805',
',,,,,,,,,805,,,805,805,805,805,805,805,805,805,805,805,,805,805,,805',
'805,805,,,,,,,,,,,,,,,,,,,,805,,,805,,,805,805,,805,,,,,,805,,,,,,,',
'805,,,,,805,805,805,805,805,805,804,804,804,805,804,,,,804,804,,,,804',
',804,804,804,804,804,804,804,,,,,804,804,804,804,804,804,804,,,,,,,',
',,804,,,804,804,804,804,804,804,804,804,804,804,,804,804,,804,804,804',
',,,,,,,,,,,,,,,,,,,804,,,804,,,804,804,,804,,,,,,804,,,,,,,,804,,,,',
'804,804,804,804,804,804,30,30,30,804,30,,,,30,30,,,,30,,30,30,30,30',
'30,30,30,,,,,30,30,30,30,30,30,30,,,,,,,,,,30,,,30,30,30,30,30,30,30',
'30,30,30,,30,30,,30,30,30,,,,,,,,,,,,,,,,,,,,30,,,30,,,30,30,,30,,,',
',,30,,,,,,,,30,,,,,30,30,30,30,30,30,304,304,304,30,304,,,,304,304,',
',,304,,304,304,304,304,304,304,304,,,,,304,304,304,304,304,304,304,',
',,,,,,,,304,,,304,304,304,304,304,304,304,304,304,304,,304,304,,304',
'304,304,,,,,,,,,,,,,,,,,,,,304,,,304,,,304,304,,304,,304,,304,,304,',
',,,,,,304,,,,,304,304,304,304,304,304,305,305,305,304,305,,,,305,305',
',,,305,,305,305,305,305,305,305,305,,,,,305,305,305,305,305,305,305',
',,,,,,,,,305,,,305,305,305,305,305,305,305,305,305,305,,305,305,,305',
'305,305,,,,,,,,,,,,,,,,,,,,305,,,305,,305,305,305,,305,,305,,305,,305',
',,,,,,,305,,,,,305,305,305,305,305,305,379,379,379,305,379,,,,379,379',
',,,379,,379,379,379,379,379,379,379,,,,,379,379,379,379,379,379,379',
',,,,,,,,,379,,,379,379,379,379,379,379,379,379,379,379,,379,379,,379',
'379,379,,,,,,,,,,,,,,,,,,,,379,,,379,,,379,379,,379,,,,,,379,,,,,,,',
'379,,,,,379,379,379,379,379,379,378,378,378,379,378,,,,378,378,,,,378',
',378,378,378,378,378,378,378,,,,,378,378,378,378,378,378,378,,,,,,,',
',,378,,,378,378,378,378,378,378,378,378,378,378,,378,378,,378,378,378',
',,,,,,,,,,,,,,,,,,,378,,,378,,,378,378,,378,,378,,378,,378,,,,,,,,378',
',,,,378,378,378,378,378,378,310,310,310,378,310,,,,310,310,,,,310,,310',
'310,310,310,310,310,310,,,,,310,310,310,310,310,310,310,,,,,,,,,,310',
',,310,310,310,310,310,310,310,310,310,310,,310,310,,310,310,310,,,,',
',,,,,,,,,,,,,,,310,,,310,,,310,310,,310,,310,,310,,310,,,,,,,,310,,',
',,310,310,310,310,310,310,537,537,537,310,537,,,,537,537,,,,537,,537',
'537,537,537,537,537,537,,,,,537,537,537,537,537,537,537,,,537,,,,,,',
'537,,,537,537,537,537,537,537,537,537,537,537,,537,537,,537,537,537',
',,,,,,,,,,,,,,,,,,,537,,,537,,,537,537,,537,,,,,,537,,,,,,,,537,,,,',
'537,537,537,537,537,537,315,315,315,537,315,,,,315,315,,,,315,,315,315',
'315,315,315,315,315,,,,,315,315,315,315,315,315,315,,,,,,,,,,315,,,315',
'315,315,315,315,315,315,315,315,315,,315,315,,315,315,315,,,,,,,,,,',
',,,,,,,,,315,,,315,,,315,315,,315,,315,,,,315,,,,,,,,315,,,,,315,315',
'315,315,315,315,793,793,793,315,793,,,,793,793,,,,793,,793,793,793,793',
'793,793,793,,,,,793,793,793,793,793,793,793,,,,,,,,,,793,,,793,793,793',
'793,793,793,793,793,793,793,,793,793,,,,793,,,,,,,,,,,,,,,,,,,,793,',
',793,,,793,793,,793,,,,,,,,,,,,,,,,,,,793,793,793,793,793,793,375,375',
'375,793,375,,,,375,375,,,,375,,375,375,375,375,375,375,375,,,,,375,375',
'375,375,375,375,375,,,,,,,,,,375,,,375,375,375,375,375,375,375,375,375',
'375,,375,375,,375,375,375,,,,,,,,,,,,,,,,,,,,375,,,375,,,375,375,,375',
',,,,,375,,,,,,,,375,,,,,375,375,375,375,375,375,704,704,704,375,704',
',,,704,704,,,,704,,704,704,704,704,704,704,704,,,,,704,704,704,704,704',
'704,704,,,,,,,,,,704,,,704,704,704,704,704,704,704,704,704,704,,704',
'704,,704,704,704,,,,,,,,,,,,,,,,,,,,704,,,704,,,704,704,,704,,,,,,704',
',,,,,,,704,,,,,704,704,704,704,704,704,321,321,321,704,321,,,,321,321',
',,,321,,321,321,321,321,321,321,321,,,,,321,321,321,321,321,321,321',
',,,,,,,,,321,,,321,321,321,321,321,321,321,321,321,321,,321,321,,321',
'321,321,,,,,,,,,,,,,,,,,,,,321,,,321,,,321,321,,321,,,,,,321,,,,,,,',
'321,,,,,321,321,321,321,321,321,530,530,530,321,530,,,,530,530,,,,530',
',530,530,530,530,530,530,530,,,,,530,530,530,530,530,530,530,,,,,,,',
',,530,,,530,530,530,530,530,530,530,530,530,530,,530,530,,530,530,530',
',,,,,,,,,,,,,,,,,,,530,,,530,530,,530,530,,530,,530,,530,,530,,,,,,',
',530,,,,,530,530,530,530,530,530,644,644,644,530,644,,,,644,644,,,,644',
',644,644,644,644,644,644,644,,,,,644,644,644,644,644,644,644,,,,,,,',
',,644,,,644,644,644,644,644,644,644,644,644,644,,644,644,,644,644,644',
',,,,,,,,,,,,,,,,,,,644,,,644,,,644,644,,644,,,,,,644,,,,,,,,644,,,,',
'644,644,644,644,644,644,373,373,373,644,373,,,,373,373,,,,373,,373,373',
'373,373,373,373,373,,,,,373,373,373,373,373,373,373,,,,,,,,,,373,,,373',
'373,373,373,373,373,373,373,373,373,,373,373,,373,373,373,,,,,,,,,,',
',,,,,,,,,373,,,373,,,373,373,,373,,,,,,373,,,,,,,,373,,,,,373,373,373',
'373,373,373,371,371,371,373,371,,,,371,371,,,,371,,371,371,371,371,371',
'371,371,,,,,371,371,371,371,371,371,371,,,,,,,,,,371,,,371,371,371,371',
'371,371,371,371,371,371,,371,371,,371,371,371,,,,,,,,,,,,,,,,,,,,371',
',,371,,,371,371,,371,,,,,,371,,,,,,,,371,,,,,371,371,371,371,371,371',
'331,331,331,371,331,,,,331,331,,,,331,,331,331,331,331,331,331,331,',
',,,331,331,331,331,331,331,331,,,,,,,,,,331,,,331,331,331,331,331,331',
'331,331,331,331,,331,331,,331,331,331,,,,,,,,,,,,,,,,,,,,331,,,331,',
',331,331,,331,,331,,,,331,,,,,,,,331,,,,,331,331,331,331,331,331,523',
'523,523,331,523,,,,523,523,,,,523,,523,523,523,523,523,523,523,,,,,523',
'523,523,523,523,523,523,,,,,,,,,,523,,,523,523,523,523,523,523,523,523',
'523,523,,523,523,,523,523,523,,,,,,,,,,,,,,,,,,,,523,,,523,523,,523',
'523,,523,,523,,523,,523,,,,,,,,523,,,,,523,523,523,523,523,523,24,24',
'24,523,24,,,,24,24,,,,24,,24,24,24,24,24,24,24,,,,,24,24,24,24,24,24',
'24,,,,,,,,,,24,,,24,24,24,24,24,24,24,24,24,24,,24,24,,24,24,24,,,,',
',,,,,,,,,,,,,,,24,,,24,,,24,24,,24,,,,,,24,,,,,,,,24,,,,,24,24,24,24',
'24,24,521,521,521,24,521,,,,521,521,,,,521,,521,521,521,521,521,521',
'521,,,,,521,521,521,521,521,521,521,,,,,,,,,,521,,,521,521,521,521,521',
'521,521,521,521,521,,521,521,,521,521,521,,,,,,,,,,,,,,,,,,,,521,,,521',
'521,,521,521,,521,,521,,521,,521,,,,,,,,521,,,,,521,521,521,521,521',
'521,510,510,510,521,510,,,,510,510,,,,510,,510,510,510,510,510,510,510',
',,,,510,510,510,510,510,510,510,,,,,,,,,,510,,,510,510,510,510,510,510',
'510,510,510,510,,510,510,,510,510,510,,,,,,,,,,,,,,,,,,,,510,,,510,',
',510,510,,510,,,,,,510,,,,,,,,510,,,,,510,510,510,510,510,510,337,337',
'337,510,337,,,,337,337,,,,337,,337,337,337,337,337,337,337,,,,,337,337',
'337,337,337,337,337,,,,,,,,,,337,,,337,337,337,337,337,337,337,337,337',
'337,,337,337,,337,337,337,,,,,,,,,,,,,,,,,,,,337,,,337,,,337,337,,337',
',,,,,337,,,,,,,,337,,,,,337,337,337,337,337,337,338,338,338,337,338',
',,,338,338,,,,338,,338,338,338,338,338,338,338,,,,,338,338,338,338,338',
'338,338,,,338,,,,,,,338,,,338,338,338,338,338,338,338,338,338,338,,338',
'338,,338,338,338,,,,,,,,,,,,,,,,,,,,338,,,338,,,338,338,,338,,,,,,338',
',,,,,,,338,,,,,338,338,338,338,338,338,363,363,363,338,363,,,,363,363',
',,,363,,363,363,363,363,363,363,363,,,,,363,363,363,363,363,363,363',
',,,,,,,,,363,,,363,363,363,363,363,363,363,363,363,363,,363,363,,363',
'363,363,,,,,,,,,,,,,,,,,,,,363,,,363,,,363,363,,363,,363,,,,363,,,,',
',,,363,,,,,363,363,363,363,363,363,768,768,768,363,768,,,,768,768,,',
',768,,768,768,768,768,768,768,768,,,,,768,768,768,768,768,768,768,,',
',,,,,,,768,,,768,768,768,768,768,768,768,768,768,768,,768,768,,768,768',
'768,,,,,,,,,,,,,,,,,,,,768,,,768,,,768,768,,768,,,,,,768,,,,,,,,768',
',,,,768,768,768,768,768,768,344,344,344,768,344,,,,344,344,,,,344,,344',
'344,344,344,344,344,344,,,,,344,344,344,344,344,344,344,,,,,,,,,,344',
',,344,344,344,344,344,344,344,344,344,344,,344,344,,344,344,344,,,,',
',,,,,,,,,,,,,,,344,,,344,,,344,344,,344,,344,,,,344,,,,,,,,344,,,,,344',
'344,344,344,344,344,771,771,771,344,771,,,,771,771,,,,771,,771,771,771',
'771,771,771,771,,,,,771,771,771,771,771,771,771,,,,,,,,,,771,,,771,771',
'771,771,771,771,771,771,771,771,,771,771,,771,771,771,,,,,,,,,,,,,,',
',,,,,771,,,771,,,771,771,,771,,,,,,771,,,,,,,,771,,,,,771,771,771,771',
'771,771,666,666,666,771,666,,,,666,666,,,,666,,666,666,666,666,666,666',
'666,,,,,666,666,666,666,666,666,666,,,,,,,,,,666,,,666,666,666,666,666',
'666,666,666,666,666,,666,666,,666,666,666,,,,,,,,,,,,,,,,,,,,666,,,666',
',,666,666,,666,,,,,,666,,,,,,,,666,,,,,666,666,666,666,666,666,,,,666',
'604,604,604,604,604,604,604,604,,,604,604,604,604,604,,,604,604,604',
'604,604,604,604,,,604,604,604,604,604,604,604,604,604,604,604,604,604',
'604,604,604,604,604,604,604,604,604,604,,,604,,,,,,,,604,604,,604,604',
'604,604,,604,604,,,604,,,,,604,604,604,604,,,,,,,,,,,,,604,604,,604',
'604,604,604,604,604,604,604,604,,604,,,604,604,31,31,31,31,31,31,31',
'31,,,31,31,31,31,31,,,31,31,31,31,31,31,31,,,31,31,31,31,31,31,31,31',
'31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,,,31,,,,,,,,31,31,,31,31',
'31,31,,31,31,,,31,,,,,31,31,31,31,,,,,,,,,,,,,31,31,,31,31,31,31,31',
'31,31,31,31,,31,,,31,31,29,29,29,29,29,29,29,29,,,29,29,29,29,29,,,29',
'29,29,29,29,29,29,,,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29',
'29,29,29,29,29,29,29,29,,29,,,,,,,,29,29,,29,29,29,29,,29,29,,,29,,',
',,29,29,29,29,,,,,,,,,,,,,29,29,,29,29,29,29,29,29,29,29,29,,29,,,29',
'29,414,414,414,414,414,414,414,414,,,414,414,414,414,414,,,414,414,414',
'414,414,414,414,,,414,414,414,414,414,414,414,414,414,414,414,414,414',
'414,414,414,414,414,414,414,414,414,414,,,414,,,,,,,,414,414,,414,414',
'414,414,,414,414,,,414,,,,,414,414,414,414,,,,,,,,,,,,,414,414,,414',
'414,414,414,414,414,414,414,414,,414,,,414,414,582,582,582,582,582,582',
'582,582,,,582,582,582,582,582,,,582,582,582,582,582,582,582,,,582,582',
'582,582,582,582,582,582,582,582,582,582,582,582,582,582,582,582,582',
'582,582,582,582,,,582,,,,,,,,582,582,,582,582,582,582,,582,582,,,582',
',,,,582,582,582,582,,,,,,,,,,,,,582,582,,582,582,582,582,582,582,582',
'582,582,,582,,,582,82,82,82,82,82,82,82,82,,,82,82,82,82,82,,,82,82',
'82,82,82,82,82,,,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82',
'82,82,82,82,82,82,82,82,82,82,,,,,,,82,82,,82,82,82,82,,82,82,,,82,',
',,,82,82,82,82,,,,,,,,,,,,,82,82,,82,82,82,82,82,82,82,82,82,,82,,,82',
'245,245,245,245,245,245,245,245,,,245,245,245,245,245,,,245,245,245',
'245,245,245,245,,,245,245,245,245,245,245,245,245,245,245,245,245,245',
'245,245,245,245,245,245,245,245,245,245,245,245,245,245,,,,,,,245,245',
',245,245,245,245,,245,245,,,245,,,,,245,245,245,245,,,,,,,,,,,,,245',
'245,,245,245,245,245,245,245,245,245,245,,245,,,245,25,25,25,25,25,25',
'25,25,,,25,25,25,25,25,,,25,25,25,25,25,25,25,,,25,25,25,25,25,25,25',
'25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,,,,,,,25',
'25,,25,25,25,25,,25,25,,,25,,,,,25,25,25,25,,,,,,25,,,,,,,25,25,,25',
'25,25,25,25,25,25,25,25,,25,580,580,25,,580,,,,,,,,580,580,,580,580',
'580,580,,580,580,,,580,,,,,580,580,580,580,,,,,,,,,,,,,580,580,,580',
'580,580,580,580,580,580,580,580,,580,579,579,580,,579,,,,,,,,579,579',
',579,579,579,579,,579,579,,,579,,,,,579,579,579,579,,,,,,,,,,,,,579',
'579,,579,579,579,579,579,579,579,579,579,,579,306,306,579,,306,,,,,',
',,306,306,,306,306,306,306,,306,306,,,306,,,,,306,306,306,306,,,,,,',
',,,,,,306,306,,306,306,306,306,306,306,306,306,306,,306,343,343,306',
',343,,,,,,,,343,343,,343,343,343,343,,343,343,,,343,,,,,343,343,343',
'343,,,,,,,,,,,,,343,343,,343,343,343,343,343,343,343,343,343,,343,383',
'383,343,,383,,,,,,,,383,383,,383,383,383,383,,383,383,,,383,,,,,383',
'383,383,383,,,,,,,,,,,,,383,383,,383,383,383,383,383,383,383,383,383',
',383,362,362,383,,362,,,,,,,,362,362,,362,362,362,362,,362,362,,,362',
',,,,362,362,362,362,,,,,,,,,,,,,362,362,,362,362,362,362,362,362,362',
'362,362,,362,384,384,362,,384,,,,,,,,384,384,,384,384,384,384,,384,384',
',,384,,,,,384,384,384,384,,,,,,,,,,,,,384,384,,384,384,384,384,384,384',
'384,384,384,,384,307,307,384,,307,,,,,,,,307,307,,307,307,307,307,,307',
'307,,,307,,,,,307,307,307,307,,,,,,,,,,,,,307,307,,307,307,307,307,307',
'307,307,307,307,,307,638,638,307,,638,,,,,,,,638,638,,638,638,638,638',
',638,638,,,638,,,,,638,638,638,638,,,,,,,,,,,,,638,638,,638,638,638',
'638,638,638,638,638,638,,638,861,861,638,,861,,,,,,,,861,861,,861,861',
'861,861,,861,861,,,861,,,,,861,861,861,861,,,,,,,,,,,,,861,861,,861',
'861,861,861,861,861,861,861,861,,861,405,405,861,,405,,,,,,,,405,405',
',405,405,405,405,,405,405,,,405,,,,,405,405,405,405,,,,,,,,,,,,,405',
'405,,405,405,405,405,405,405,405,405,405,,405,404,404,405,,404,,,,,',
',,404,404,,404,404,404,404,,404,404,,,404,,,,,404,404,404,404,,,,,,',
',,,,,,404,404,,404,404,404,404,404,404,404,404,404,,404,392,392,404',
',392,,,,,,,,392,392,,392,392,392,392,,392,392,,,392,,,,,392,392,392',
'392,,,,,,,,,,,,,392,392,,392,392,392,392,392,392,392,392,392,,392,345',
'345,392,,345,,,,,,,,345,345,,345,345,345,345,,345,345,,,345,,,,,345',
'345,345,345,,,,,,,,,,,,,345,345,,345,345,345,345,345,345,345,345,345',
',345,364,364,345,,364,,,,,,,,364,364,,364,364,364,364,,364,364,,,364',
',,,,364,364,364,364,,,,,,,,,,,,,364,364,,364,364,364,364,364,364,364',
'364,364,,364,863,863,364,,863,,,,,,,,863,863,,863,863,863,863,,863,863',
',,863,,,,,863,863,863,863,,,,,,,,,,,,,863,863,,863,863,863,863,863,863',
'863,863,863,,863,394,394,863,,394,,,,,,,,394,394,,394,394,394,394,,394',
'394,,,394,,,,,394,394,394,394,,,,,,,,,,,,,394,394,,394,394,394,394,394',
'394,394,394,394,,394,640,640,394,,640,,,,,,,,640,640,,640,640,640,640',
',640,640,,,640,,,,,640,640,640,640,,,,,,,,,,,,,640,640,,640,640,640',
'640,640,640,640,640,640,,640,,,640' ]
        racc_action_check = arr = Array.new(22309, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
   nil,    33,  3052,  1091,   nil,  5982,   nil,   nil,   nil,   953,
   525,  6557,  8746,   nil,   949, 10011, 11506,   996, 12541,   945,
   nil,   nil,   nil,   nil, 19215, 21136,   695,   nil,   nil, 20589,
 17145, 20479,   338,   nil,   -66,   620,   547,   nil,   919,   nil,
   986,  5982,   nil,   nil,  1011,   929,   nil,  1012,   nil,  9666,
   nil,   nil,  8861,  3652,  8512,   nil,  8282,   nil,   172,  6902,
  5177,   nil,  4487,   nil,    77,   nil,   nil,   nil,   nil,  4602,
   nil,   nil,   266,   nil,   904,  4947,   nil,  5062,   nil,   nil,
   652,   nil, 20918,   901,  5407,   nil,   nil,   940,   nil,   nil,
   nil,    -2,   441,   nil,  5867,   136,  6097,   nil,   170,   -13,
   nil,   nil,   997,    -7,   402,   891,   945,   nil,   910,   892,
   nil,   nil,   nil,   313,     2,   -39,   857,  7707,   -53,  7937,
   nil,   888,   114,   917,  5752,   nil,  3772,   nil,   nil,  8627,
   843,   839,   864,   818,   308,  9321,  1048,   -51,   815,   nil,
   337,   806,   412,   878,  4252,   413, 10471,   nil, 10586,   nil,
   465,   nil, 10816,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   321,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   345,   nil,   nil,   nil,   nil,   437,   nil,   nil,   nil,   410,
   376,   nil,   nil,   nil,   nil,   175,   nil,   nil,   nil,   -27,
   nil,   371,   nil,   178,   nil,   nil,   nil,   nil,   nil,   nil,
   nil, 11851, 11966,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   609,   nil,   nil,   nil, 21027,   866,   nil,   802,   nil,
   851,   840,   531,   nil,   nil,   nil,   nil,  2212,   nil, 12886,
   564, 13001, 13116, 13231, 13346, 13461, 13576, 13691, 13806, 13921,
 14036, 14151, 14266, 14381, 14496, 14611, 14726, 14841, 14956, 15071,
 15186, 15301, 15416, 15531, 15646, 15761, 15876,   794,   nil,   nil,
  1012, 16221, 16336, 16451, 16566, 16685,   nil,   309,    62,   808,
   795,   778,  1972,   nil, 17260, 17375, 21313, 21608,   nil,   nil,
 17720,   nil,   nil,    82,   710, 17950,   770,   nil,   729,   157,
   -70, 18410,   299,   725,   610,   nil,   145,   nil,   nil,   nil,
   nil, 18985,   nil,   105,   710,   -95,   -52, 19560, 19675,    78,
   nil,   nil,   nil, 21372, 20020, 21962,  7247,   nil,   723,   nil,
   725,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   724,    29, 21490, 19790, 22021,   107,   nil,   nil,   nil,  4832,
   nil, 18870,   nil, 18755,   -60, 18180,   nil,   nil, 17605, 17490,
   nil, 16800, 16106, 21431, 21549,   683,   680,   nil,   nil,   nil,
   445,   712, 21903, 12081, 22139,   nil, 11736,   nil,   nil,    -2,
     2,   372,   268,   440, 21844, 21785,   nil,   nil,   nil,   nil,
 10479,  9781,   nil,   nil, 20699,   nil,   nil,   nil,   nil,  9551,
  9436,  1132,   nil,   792,   789,  5407,  8167,  7822,  1732,   733,
  1492,   888,  1852,   725,  1372,   714,  1103,  1612,   595,   983,
  1252,  2092,  2332,  2692,  2572,  3052,  2452,   723,  2212,  3172,
  2932,   722,  1972,  2812,  2932,   174,   671,   nil,   nil,   nil,
   nil,   nil,  2332,   nil,   nil,   759,   nil,   643,   674,   nil,
   nil,  6327,   672,   nil,   nil,   nil,   nil,   nil,     0,   326,
   624,   682,   539,   -30,   514,  1132,   498,   nil,   nil,   773,
   461,   nil, 10126,   nil,   nil,   nil,  5292,   nil,   nil, 12426,
  4487,  1252,   534,   nil,   514,   nil,   nil,   394,   nil,   nil,
 19445,   nil,   nil,   nil,   nil,  5062,   nil,   129,   nil,    66,
   -47, 19330,   201, 19100,   nil,   402,   430,   400,   233,   305,
 18525,    99,   nil,   nil,   nil,  1852,   872, 17835,   224,   266,
   402,   373,   209,   194,   361,   nil,   nil,   nil,   531,   nil,
   351,   306, 11391,   343,   nil, 11161,   326,   773,   888,   137,
   -28,   nil,   308,   nil,   nil,   299,   370,   309,   192,   232,
   662,   nil,   nil,   324,   510,   nil,   nil,   nil,  9206, 21254,
 21195,  3532, 20809,   320,   563,   236,   231,   222,   191,   nil,
   nil,   nil,  4132,   nil,   nil,   nil,   nil,   nil,   nil,   263,
   nil,  1062,   -34,   nil, 20369,   243,   228,   241,  8052,   nil,
   -15,  5522,  9896,   136,   nil,   nil, 12196,   nil,   nil,   602,
   nil,   -44,   nil,   nil,   -57,   100,  4602,    36, 12771,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    49, 21667,   697,
 22198,  6442,    97,    38, 18640, 12656,   nil,   nil, 12311,   nil,
   222,   nil, 10931,   240,   nil,   nil,   nil,   nil,   nil,   nil,
  4717,  4832,   202,   nil,   167,  6787, 20250,   239,   nil,   nil,
    64,   240,   nil,   nil,   nil,   nil,   nil,   -22,    -5,   nil,
  8397,   251,   264,   -55, 10356, 11046, 11276,   443,   607,   nil,
 11621,  2812,   390,   nil,   297,   300,   499,   nil,   nil,   nil,
   nil,  1182,   nil,   -34, 18295,   417,   nil,   536,   nil,   441,
   484,   nil,  2092,   602,   nil,   537,   nil,   497,   nil,   nil,
  5177,   nil,  1492,   545,   nil,   657,  7477,   nil,   599,  7362,
   nil,   nil,  6672,   600,   nil,   647,   nil,   656,   721,   -32,
   752,   nil,  6097,   642,  6212,  4372,   nil,   646,  5752,    -2,
   nil,  4372,  3172,  1612,  5637,   nil,   652,   nil,  9091,  5292,
   nil,  5867,   nil,   nil,  1372,   nil,   nil,   nil, 19905,   nil,
   nil, 20135,   nil,   489,   809,   nil,   nil, 10594,   703,   706,
   nil,   nil,   724,   724,   nil,   nil,   nil,   764,   nil,   nil,
   nil,  1732,   nil, 18065,    90,   nil,   855,   nil,   nil,    64,
   nil,   nil,   754,   755, 17030, 16915,   nil,   813,   nil,   nil,
   nil, 15991,   nil,  2452,   903,   904,   805,  4947,   nil,   916,
  2572,  2692,  4717,  3292,   nil,   nil,  3412,   nil,   461,   nil,
   nil,   nil,   nil,   531,   nil,   910,   -45,   295,  3892,   nil,
  4012,   nil,  7592,   nil,  7132,   854,   869,   nil,  7017,   159,
   nil,   nil,   nil,   nil,   896,   997,   nil,   998,  1000,   892,
   272, 21726,  5522, 22080,  1019,   417,   909, 10241, 10701,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    37,   298,   978,    60,    10,   nil,   nil,   nil,  8976,   952,
   953,   418,  5637,   nil,   nil,   965,   nil ]

racc_action_default = [
    -1,  -504,  -502,  -504,  -401,  -504,   -61,    -2,  -418,  -391,
  -273,  -322,  -504,  -419,  -397,  -323,   -65,  -307,  -504,  -504,
  -314,  -324,  -379,   -71,  -504,  -504,   -34,  -325,  -381,  -504,
  -504,  -504,  -433,  -386,  -382,  -504,  -491,  -275,  -493,  -383,
  -504,   -40,   -20,    -5,   -42,  -504,  -432,    -6,   -43,  -285,
  -266,  -431,  -504,  -502,  -288,  -267,  -422,  -380,   -47,  -356,
  -504,  -268,  -504,  -428,  -481,  -269,  -427,  -424,  -270,  -504,
  -429,  -423,  -216,  -271,  -504,  -502,  -430,  -425,  -272,   -35,
  -491,  -426,  -401,  -504,  -502,  -435,  -399,  -504,  -295,  -436,
  -401,  -291,  -504,  -298,   -70,  -251,  -504,   897,  -504,  -273,
  -322,  -323,  -504,  -433,  -504,  -493,  -504,  -285,  -288,  -356,
  -326,  -338,  -339,  -504,  -350,  -504,  -504,  -504,  -273,  -504,
  -238,  -261,  -433,  -504,  -217,  -230,  -502,   -45,  -476,  -504,
  -504,  -503,  -504,  -503,  -504,  -504,    -8,  -504,  -504,   -46,
   -82,   -66,   -75,  -504,  -502,  -504,   -68,  -310,  -504,  -209,
  -504,   -73,  -504,  -193,  -168,  -150,  -121,  -169,  -139,  -170,
  -153,  -108,  -141,  -129,  -171,  -126,  -152,  -130,  -157,  -172,
  -127,  -142,  -117,  -159,  -124,  -433,  -136,  -128,  -165,  -118,
  -151,  -123,  -138,  -144,  -119,  -143,  -125,  -158,  -120,  -134,
  -504,  -317,  -109,  -148,  -115,  -135,  -147,  -160,  -113,   -99,
  -132,  -110,  -167,  -106,  -100,  -133,  -111,  -471,  -162,   -96,
  -161,  -107,   -98,  -114,  -163,  -154,  -116,  -146,  -145,  -164,
  -470,   -97,  -140,  -149,  -131,  -112,  -166,  -137,  -156,  -122,
  -155,  -504,  -504,  -101,  -132,  -133,  -102,   -96,    -9,  -161,
  -154,  -504,  -164,   -97,  -149,  -504,  -194,  -103,   -14,  -384,
  -420,  -421,  -492,  -500,  -499,    -4,  -498,  -502,  -494,  -504,
  -281,  -504,  -504,  -504,  -504,  -504,  -504,  -504,  -504,  -504,
  -504,  -504,  -504,  -504,  -504,  -504,  -504,  -504,  -504,  -504,
  -504,  -504,  -504,  -504,  -504,  -504,  -504,  -504,  -344,  -347,
  -502,  -504,  -504,  -504,  -504,  -504,   -44,   -41,  -504,   -61,
  -504,  -504,  -502,   -60,  -504,  -504,  -504,  -504,   -59,  -355,
  -502,  -208,   -39,  -504,  -277,  -504,  -504,  -218,  -493,  -495,
  -495,  -504,  -504,  -492,  -491,  -413,  -504,  -415,  -414,  -416,
  -412,  -504,  -473,  -495,  -504,  -495,  -504,  -504,  -504,  -504,
  -360,  -357,  -292,  -504,  -502,  -504,  -504,   -69,   -53,  -290,
  -504,   -38,  -403,  -388,  -402,  -406,  -404,  -304,  -420,  -421,
  -504,  -281,  -504,  -502,  -504,  -504,  -393,  -390,  -389,  -182,
   -30,  -504,  -258,  -504,  -281,  -504,  -260,  -231,  -504,  -504,
  -233,  -504,  -502,  -504,  -504,  -503,  -504,  -396,  -395,   -74,
   -81,  -504,  -504,  -502,  -504,   -67,  -504,  -273,   -94,  -504,
  -504,   -91,   -92,  -504,  -504,  -504,  -315,  -490,  -489,  -319,
  -451,  -504,   -36,   -37,  -504,   -13,   -12,   -11,  -104,  -504,
  -504,    -7,  -501,  -371,  -504,  -214,  -504,  -504,  -203,  -189,
  -184,  -504,  -204,  -188,  -205,  -185,  -210,  -200,  -186,  -211,
  -202,  -201,  -212,  -199,  -213,  -195,  -206,  -187,  -207,  -196,
  -197,  -190,  -198,  -183,  -502,  -502,  -504,   -15,   -16,   -17,
   -18,   -19,  -502,  -329,  -328,  -327,  -279,   -62,  -504,  -252,
  -253,  -254,  -504,  -287,  -485,  -482,  -484,  -483,  -251,  -251,
  -504,  -230,  -493,  -493,  -503,  -502,  -493,   -31,  -261,  -173,
  -504,   -23,  -504,  -283,  -219,  -220,  -497,  -496,  -222,  -497,
  -493,  -502,  -504,  -363,  -504,  -417,   -33,   -32,   -24,  -475,
  -497,  -284,  -474,  -400,  -385,  -175,   -25,  -504,  -387,  -502,
  -502,  -488,  -482,  -487,  -354,  -483,  -251,  -504,  -482,  -483,
  -502,  -504,   -54,   -50,  -351,  -502,  -504,  -504,  -486,  -280,
  -504,  -504,  -482,  -483,  -502,  -394,  -392,  -478,  -173,  -259,
  -262,  -503,  -504,  -504,  -477,  -504,  -504,  -486,  -280,  -482,
  -483,  -237,  -504,  -398,   -72,   -78,   -80,  -504,  -482,  -483,
  -311,   -93,   -91,   -92,  -504,  -438,  -308,  -437,  -502,  -504,
  -504,  -502,  -504,  -504,  -504,  -469,  -469,  -455,  -469,  -462,
  -461,  -450,  -502,  -466,  -456,  -453,  -465,  -459,  -452,  -464,
  -454,  -451,  -493,   -10,  -504,  -191,  -192,  -502,  -502,  -276,
  -504,  -181,  -504,  -504,  -345,  -342,  -504,  -340,   -22,  -502,
  -330,   -62,  -250,  -256,  -504,  -504,   -40,  -503,  -504,  -286,
   -49,  -229,  -349,  -228,   -48,  -348,  -224,  -504,  -504,  -504,
  -504,  -504,  -502,  -504,  -504,  -504,  -265,  -262,  -504,  -223,
  -504,  -302,  -504,  -504,  -332,  -296,  -333,  -331,  -361,  -358,
  -504,  -504,   -57,  -353,  -282,  -504,  -504,   -55,  -352,  -299,
  -502,  -504,  -408,  -409,  -405,  -411,  -410,  -504,  -282,  -235,
  -504,  -503,  -503,  -282,  -504,  -504,  -504,   -76,  -504,  -440,
  -504,  -502,  -504,   -95,   -91,   -92,  -504,  -320,  -467,  -442,
  -446,  -504,  -448,  -504,  -504,  -504,  -449,  -504,  -463,  -493,
  -504,  -105,  -502,  -502,  -336,  -502,  -373,  -372,  -374,  -289,
  -215,   -21,  -502,  -504,  -341,  -504,  -504,  -334,  -504,  -504,
  -255,  -243,  -504,  -503,  -225,  -502,  -226,  -502,  -504,  -493,
  -504,  -278,  -174,  -263,  -504,  -493,  -303,  -365,  -504,  -504,
  -301,  -502,  -502,  -502,  -179,   -29,  -180,   -58,  -504,  -177,
   -27,  -178,   -28,   -56,  -502,   -51,  -407,  -305,  -504,  -232,
  -234,  -504,  -312,  -504,  -504,  -282,  -316,  -451,  -469,  -469,
  -468,  -457,  -504,  -469,  -460,  -458,  -318,  -504,  -472,  -337,
    -3,  -502,  -378,  -504,  -504,  -376,  -504,  -343,  -293,  -504,
  -257,  -240,  -503,  -503,  -504,  -504,  -249,  -504,  -294,  -264,
  -221,  -504,  -367,  -502,  -504,  -504,  -504,  -176,   -26,  -504,
  -502,  -502,  -503,  -502,  -439,  -309,  -502,  -444,  -504,  -445,
  -447,  -441,  -377,   -83,  -375,  -504,  -504,   -90,  -502,  -346,
  -502,  -239,  -504,  -245,  -504,  -503,  -503,  -227,  -504,  -502,
  -297,  -362,  -359,  -300,  -504,  -504,  -236,  -504,  -504,  -469,
   -89,  -504,  -502,  -504,  -371,  -502,  -503,  -504,  -504,  -241,
  -244,  -366,  -369,  -368,  -364,   -52,  -306,  -313,  -321,  -443,
  -486,   -88,  -504,  -482,  -483,  -370,  -335,  -246,  -504,  -503,
  -503,   -84,  -504,  -242,  -247,  -503,  -248 ]

clist = [
'124,110,112,102,124,502,191,149,483,316,259,199,110,153,125,199,424',
'199,125,246,236,238,236,247,120,462,607,592,120,554,591,487,301,571',
'725,532,299,133,124,136,485,133,635,655,309,713,303,506,779,311,783',
'308,125,255,253,784,366,669,777,347,98,400,120,325,124,406,220,614,199',
'334,342,625,469,124,623,133,604,360,318,312,740,141,576,478,479,820',
'670,348,495,498,110,190,409,668,309,257,486,322,253,131,338,751,509',
'131,512,346,369,668,124,764,335,395,537,821,148,691,396,688,311,823',
'526,152,530,391,124,581,410,299,582,127,728,658,659,139,455,298,370',
'131,326,722,520,544,110,753,110,313,339,554,110,519,752,749,874,652',
'715,794,249,336,287,7,526,530,115,324,365,700,702,296,706,414,137,544',
'333,674,536,859,535,690,709,778,784,248,544,252,790,781,2,653,411,1',
',,,,,,,,,,,,,767,,,,,,,300,,,693,,,,,,,,591,,,,,325,,,,,199,,,,,,,,',
',,,,,,,,425,,428,429,430,431,432,433,434,435,436,437,438,439,440,441',
'442,443,444,445,446,447,448,449,450,451,452,453,380,513,527,421,886',
'468,765,300,,299,,873,,,494,,,124,124,,,541,,124,635,300,,,489,,545',
'125,125,,500,,,481,,,556,120,120,,124,,461,120,716,,515,567,554,521',
'133,133,,124,491,534,133,,,739,696,504,253,,,,,318,521,757,508,707,124',
',763,,516,544,827,829,369,,124,830,548,,318,124,515,521,124,124,,,457',
'458,459,460,521,,554,,124,,,318,,,,,521,,131,131,826,,318,591,484,,199',
',,490,551,236,603,,605,606,,,,,,735,611,737,577,490,,517,470,472,,,',
',482,531,,,,,,,95,,,879,,,,,,95,95,456,,95,774,,,,637,639,,,643,300',
'626,,,,,,,885,,,630,634,649,,,,813,,,,,124,,95,622,124,95,95,124,,,',
'554,,95,,95,627,,124,,,,95,,,,,,95,,663,692,,95,,,,662,,,838,667,,,663',
'840,,561,,95,,872,,,657,554,,,,,124,,,124,,,,87,657,,95,,,,,,,87,,95',
',,697,,521,,124,199,,,,,,710,,,,95,,,318,857,,,858,,,,,199,,689,,,236',
'711,124,,87,,720,699,,,,,,,,,613,110,112,723,,,124,,619,677,,,,,,,,',
',124,,,742,124,,,745,,,544,124,642,,738,,,,,754,756,,,,759,761,,,650',
',,,,,,95,95,551,,124,,,87,754,759,761,,,,755,,787,,,760,762,95,,,,87',
'95,671,124,679,657,490,,,,,,,,,,772,,,,,807,,,,,,810,124,,,124,,,95',
'95,95,95,95,95,,,,124,,,95,124,95,95,747,,801,,95,,,817,,95,,,,,,803',
',822,,,817,,,,,95,,,,,731,95,95,773,,,,818,95,,95,,,,,,,,,110,,824,',
'124,124,,882,95,87,,124,,,87,,,,,,799,,,,,,,95,802,,,,,,,769,770,,95',
',,95,124,,124,,,87,124,,,92,87,,113,,95,,521,87,134,92,124,,134,145',
',124,124,,,95,,,,,318,,,866,789,,,,,,,806,124,,796,,124,,,,,,134,95',
',134,92,,,,,95,,134,,134,,,,,95,,134,814,815,816,,,134,,,,,134,95,,819',
',,,,,,,,,,145,,134,95,,,,,,,,,,841,843,,832,,,,,,,134,,,,,,,,74,92,856',
'111,,,95,849,95,,74,,297,,854,855,,,,92,,145,297,403,,869,870,403,,314',
',,864,,865,,,87,,,297,,,,,87,887,,,95,,74,95,,,,351,,,,,,,95,,,,,87',
'893,894,,,,,896,,,,,,,,,87,,,,,,32,,,103,,,,,,,32,,,,142,,134,134,,',
',,95,175,,,,,87,,,,,,74,,,92,,,,95,92,,,,95,95,,,,32,74,,,,,,,,,,,,',
',,,,,,95,95,,87,92,134,134,134,134,92,,,,,87,,92,,134,134,,142,95,,134',
',,,,134,412,413,95,,,,95,,,,,,,,,134,,,,,,134,134,32,,,,,134,,134,95',
'95,95,,,,,95,,,32,,142,95,175,317,134,,175,,,,,,332,,,,74,297,297,297',
'297,74,,134,,,,,95,,,,,,134,10,,134,99,,87,,,,,10,,,,140,95,,134,,74',
',,95,95,74,95,87,,95,297,,74,134,,,,87,297,,,95,,95,,,,,,,,,10,,,,,',
',,,92,,,,95,87,87,87,92,,,32,,,,,32,134,87,,,,,,,,,570,,,,92,140,,,',
',,,,,,602,,,87,,92,,32,,,,,32,,,610,,,,32,,,10,,,87,,,,,,,87,87,,87',
',,87,92,10,134,140,,397,,,,397,,87,,87,,,,,,,,314,,,,,,,,,,,,,,,,,,',
',,74,134,,,92,,,,74,,,,,,,92,,,,,480,,,,,,,,,,,74,,,,,,,,113,,,,,,297',
',74,,,,,,,317,,,,,,372,,,,134,,,10,,,,,10,317,,,385,,,,,74,,134,,,,',
'134,134,32,,317,,,,,,32,,,,,317,,10,,,,,10,,,134,92,,,10,,,,32,,,,,',
'74,,,,,,,,92,,32,74,,,,,,,92,,,,134,,,,,,,,,,,,,111,,,617,,,,,,32,,',
'92,92,92,,,,,134,,,,,,92,633,633,,,,,,,,,297,,,,,,,,,,,,,,,,92,,836',
'32,,,,,,,,,,,32,617,617,,,,297,,92,74,,,633,,,92,92,,92,,,92,,,103,',
'633,,488,,74,,,92,,92,,,,,74,10,,,507,,,,,10,,,,,,,,134,,,317,,,,,,',
',,74,74,74,10,,,,,,,,,,74,,,,547,,10,714,718,550,,,553,,,,,32,,714,',
',,,,,,74,,834,,,,,,,,,32,,10,675,714,,,,,,32,74,,,,,,,74,74,,74,,,74',
',,,,,,,617,,,,74,,74,32,32,32,,,,,,,10,,,,32,,,,,,,10,,,,,624,,,,,,',
',,,,792,,795,,32,,833,,99,,646,,,,647,,,553,,,,,633,,633,,32,,647,,',
',,32,32,,32,,,32,,,,,,,,,,,,32,,32,,,,,,,,,,,,,,,,,681,,,682,,,,,,,',
',,10,,,,,,,,,,,,,,,,,,,,,10,,,,,,,,,,10,,,,,,,,,,,,717,,,,,,,,,,714',
',,,,,,10,10,10,733,,,317,,,714,,,,10,,,550,,,,743,,,,,,,488,,,,,,,,',
',,,,10,,837,,,,,,,,,,,,,553,,,,,,,10,,,,,,,10,10,,10,,,10,,,,785,,,',
',,,,10,,10,,,,,,,,,,,,,,,,,,553,,,,,,,,,,,,809,,,,812,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,845,846,,,,,,647,,,,,,,,,,',
',,,,,,,,,,,,,,,,,,,,550,,553,,,,871,,,,,,,,,,,,,,,,,,,889,890,,,,,,',
',,,,,,,,,,,,,553,,,,895' ]
        racc_goto_table = arr = Array.new(2249, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'28,54,18,82,28,81,48,28,32,21,53,49,54,28,29,49,3,49,29,28,51,13,51',
'13,61,78,5,85,61,146,140,23,41,46,79,35,40,57,28,11,78,57,59,80,58,6',
'34,23,138,28,138,34,29,9,84,142,128,80,105,44,125,47,61,48,28,47,74',
'36,49,75,76,65,63,28,62,57,52,53,29,17,6,43,83,33,33,38,37,34,56,56',
'54,86,87,59,58,88,89,9,84,55,90,91,56,55,56,92,28,59,28,93,57,44,94',
'95,96,97,98,99,28,100,33,101,33,41,28,102,103,40,104,31,66,36,36,31',
'107,15,17,55,125,108,111,33,54,112,54,15,125,146,54,113,114,115,116',
'117,118,119,123,124,27,2,33,33,126,15,127,139,139,31,139,26,129,33,55',
'130,131,138,132,134,135,137,142,14,33,12,7,141,4,81,145,1,,,,,,,,,,',
',,,80,,,,,,,2,,,46,,,,,,,,140,,,,,48,,,,,49,,,,,,,,,,,,,,,,,28,,28,28',
'28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28',
'28,60,128,21,11,79,41,36,2,,40,,6,,,53,,,28,28,,,21,,28,59,2,,,28,,128',
'29,29,,28,,,29,,,21,61,61,,28,,11,61,23,,28,21,146,49,57,57,,28,17,58',
'57,,,32,3,9,84,,,,,29,49,35,17,3,28,,35,,17,33,139,139,28,,28,139,28',
',29,28,28,49,28,28,,,15,15,15,15,49,,146,,28,,,29,,,,,49,,55,55,85,',
'29,140,55,,49,,,55,57,51,13,,28,28,,,,,,33,28,33,84,55,,15,31,31,,,',
',31,15,,,,,,,39,,,139,,,,,,39,39,2,,39,3,,,,53,53,,,53,2,28,,,,,,,5',
',,34,34,53,,,,78,,,,,28,,39,61,28,39,39,28,,,,146,,39,,39,57,,28,,,',
'39,,,,,,39,,58,21,,39,,,,34,,,78,34,,,58,78,,60,,39,,81,,,84,146,,,',
',28,,,28,,,,19,84,,39,,,,,,,19,,39,,,48,,49,,28,49,,,,,,53,,,,39,,,29',
'3,,,3,,,,,49,,84,,,51,13,28,,19,,28,84,,,,,,,,,2,54,18,82,,,28,,2,15',
',,,,,,,,,28,,,28,28,,,28,,,33,28,2,,29,,,,,28,28,,,,28,28,,,2,,,,,,',
'39,39,57,,28,,,19,28,28,28,,,,17,,53,,,17,17,39,,,,19,39,2,28,60,84',
'55,,,,,,,,,,84,,,,,53,,,,,,53,28,,,28,,,39,39,39,39,39,39,,,,28,,,39',
'28,39,39,55,,61,,39,,,28,,39,,,,,,57,,28,,,28,,,,,39,,,,,60,39,39,15',
',,,17,39,,39,,,,,,,,,54,,84,,28,28,,21,39,19,,28,,,19,,,,,,15,,,,,,',
'39,55,,,,,,,60,60,,39,,,39,28,,28,,,19,28,,,20,19,,20,,39,,49,19,20',
'20,28,,20,20,,28,28,,,39,,,,,29,,,57,2,,,,,,,60,28,,2,,28,,,,,,20,39',
',20,20,,,,,39,,20,,20,,,,,39,,20,2,2,2,,,20,,,,,20,39,,2,,,,,,,,,,,20',
',20,39,,,,,,,,,,60,60,,2,,,,,,,20,,,,,,,,16,20,60,16,,,39,2,39,,16,',
'25,,2,2,,,,20,,20,25,20,,60,60,20,,25,,,2,,2,,,19,,,25,,,,,19,60,,,39',
',16,39,,,,25,,,,,,,39,,,,,19,60,60,,,,,60,,,,,,,,,19,,,,,,45,,,45,,',
',,,,45,,,,45,,20,20,,,,,39,45,,,,,19,,,,,,16,,,20,,,,39,20,,,,39,39',
',,,45,16,,,,,,,,,,,,,,,,,,,39,39,,19,20,20,20,20,20,20,,,,,19,,20,,20',
'20,,45,39,,20,,,,,20,25,25,39,,,,39,,,,,,,,,20,,,,,,20,20,45,,,,,20',
',20,39,39,39,,,,,39,,,45,,45,39,45,10,20,,45,,,,,,10,,,,16,25,25,25',
'25,16,,20,,,,,39,,,,,,20,22,,20,22,,19,,,,,22,,,,22,39,,20,,16,,,39',
'39,16,39,19,,39,25,,16,20,,,,19,25,,,39,,39,,,,,,,,,22,,,,,,,,,20,,',
',39,19,19,19,20,,,45,,,,,45,20,19,,,,,,,,,25,,,,20,22,,,,,,,,,,25,,',
'19,,20,,45,,,,,45,,,25,,,,45,,,22,,,19,,,,,,,19,19,,19,,,19,20,22,20',
'22,,22,,,,22,,19,,19,,,,,,,,25,,,,,,,,,,,,,,,,,,,,,16,20,,,20,,,,16',
',,,,,,20,,,,,10,,,,,,,,,,,16,,,,,,,,20,,,,,,25,,16,,,,,,,10,,,,,,24',
',,,20,,,22,,,,,22,10,,,24,,,,,16,,20,,,,,20,20,45,,10,,,,,,45,,,,,10',
',22,,,,,22,,,20,20,,,22,,,,45,,,,,,16,,,,,,,,20,,45,16,,,,,,,20,,,,20',
',,,,,,,,,,,,16,,,10,,,,,,45,,,20,20,20,,,,,20,,,,,,20,10,10,,,,,,,,',
'25,,,,,,,,,,,,,,,,20,,20,45,,,,,,,,,,,45,10,10,,,,25,,20,16,,,10,,,20',
'20,,20,,,20,,,45,,10,,24,,16,,,20,,20,,,,,16,22,,,24,,,,,22,,,,,,,,20',
',,10,,,,,,,,,16,16,16,22,,,,,,,,,,16,,,,24,,22,10,10,24,,,24,,,,,45',
',10,,,,,,,,16,,16,,,,,,,,,45,,22,22,10,,,,,,45,16,,,,,,,16,16,,16,,',
'16,,,,,,,,10,,,,16,,16,45,45,45,,,,,,,22,,,,45,,,,,,,22,,,,,24,,,,,',
',,,,,10,,10,,45,,45,,22,,24,,,,24,,,24,,,,,10,,10,,45,,24,,,,,45,45',
',45,,,45,,,,,,,,,,,,45,,45,,,,,,,,,,,,,,,,,24,,,24,,,,,,,,,,22,,,,,',
',,,,,,,,,,,,,,,22,,,,,,,,,,22,,,,,,,,,,,,24,,,,,,,,,,10,,,,,,,22,22',
'22,24,,,10,,,10,,,,22,,,24,,,,24,,,,,,,24,,,,,,,,,,,,,22,,22,,,,,,,',
',,,,,24,,,,,,,22,,,,,,,22,22,,22,,,22,,,,24,,,,,,,,22,,22,,,,,,,,,,',
',,,,,,,24,,,,,,,,,,,,24,,,,24,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,',
',,,,,,,,,,,,,,,,,24,24,,,,,,24,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,24,,24',
',,,24,,,,,,,,,,,,,,,,,,,24,24,,,,,,,,,,,,,,,,,,,,24,,,,24' ]
        racc_goto_check = arr = Array.new(2249, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_goto_pointer = [
   nil,   189,   157,  -241,   186,  -397,  -562,  -529,   nil,    17,
  1125,    27,   147,    -8,   150,    83,   961,    19,    -3,   546,
   838,   -66,  1230,  -284,  1356,   923,   -69,   116,   -11,     3,
   nil,   118,  -302,  -223,    -8,  -313,  -388,  -447,  -680,   434,
   -17,   -21,   nil,    65,   -35,  1051,  -366,   -87,   -19,   -14,
   nil,    -9,  -342,   -28,    -4,    88,  -231,    26,   -15,  -437,
   143,    13,  -397,  -232,   nil,  -400,  -493,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    41,   -15,   -21,   nil,  -273,  -585,
  -474,  -317,    -2,  -318,    18,  -383,    66,   -98,    58,  -218,
    12,  -554,    12,  -560,  -245,  -654,    97,  -461,   -31,  -453,
  -653,   101,  -281,   -65,  -281,  -639,   nil,  -154,  -475,   nil,
   nil,  -201,  -516,  -191,  -508,  -501,  -697,  -350,  -454,  -560,
   nil,   nil,   nil,   122,    71,    56,   153,    49,   -59,   156,
  -363,  -182,  -179,   nil,  -398,  -423,   nil,  -522,  -653,  -420,
  -380,  -516,  -648,   nil,   nil,   -19,  -352 ]

racc_goto_default = [
   nil,   nil,   423,   nil,   nil,   nil,   727,   nil,    36,   nil,
    43,    47,   323,   nil,   nil,   nil,   130,    79,    83,   132,
   150,   nil,   118,   nil,   121,    26,   nil,   nil,    41,    44,
    48,   nil,    58,   540,   nil,   nil,   nil,   nil,   nil,   114,
     6,   nil,    16,    19,    23,   122,   398,   nil,   233,   474,
   204,    57,   nil,   nil,    72,   319,   nil,   320,   631,   632,
   377,   549,   nil,   nil,   304,   nil,   nil,   376,    50,    55,
    61,    65,    68,    73,    78,   nil,   349,    91,   nil,   nil,
   nil,   nil,   nil,   nil,   465,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   289,   nil,   nil,   524,
   350,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    22,    28,    34,    39,   nil,   nil,   nil,   nil,   354,   nil,
   nil,   nil,   nil,   330,   nil,   584,   585,   586,   588,   nil,
   780,   594,   597,   599,   583,   nil,   128 ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 135, :_reduce_1,
  2, 132, :_reduce_2,
  4, 134, :_reduce_3,
  2, 133, :_reduce_4,
  1, 139, :_reduce_none,
  1, 139, :_reduce_none,
  3, 139, :_reduce_7,
  2, 139, :_reduce_8,
  0, 157, :_reduce_9,
  4, 142, :_reduce_10,
  3, 142, :_reduce_11,
  3, 142, :_reduce_12,
  3, 142, :_reduce_13,
  2, 142, :_reduce_14,
  3, 142, :_reduce_15,
  3, 142, :_reduce_16,
  3, 142, :_reduce_17,
  3, 142, :_reduce_18,
  3, 142, :_reduce_19,
  0, 158, :_reduce_20,
  5, 142, :_reduce_21,
  4, 142, :_reduce_22,
  3, 142, :_reduce_23,
  3, 142, :_reduce_24,
  3, 142, :_reduce_25,
  6, 142, :_reduce_26,
  5, 142, :_reduce_27,
  5, 142, :_reduce_28,
  5, 142, :_reduce_29,
  3, 142, :_reduce_30,
  3, 142, :_reduce_31,
  3, 142, :_reduce_32,
  3, 142, :_reduce_33,
  1, 142, :_reduce_none,
  1, 156, :_reduce_none,
  3, 156, :_reduce_36,
  3, 156, :_reduce_37,
  2, 156, :_reduce_38,
  2, 156, :_reduce_39,
  1, 156, :_reduce_none,
  1, 146, :_reduce_41,
  1, 148, :_reduce_none,
  1, 148, :_reduce_none,
  2, 148, :_reduce_44,
  2, 148, :_reduce_45,
  2, 148, :_reduce_46,
  1, 161, :_reduce_none,
  4, 161, :_reduce_48,
  4, 161, :_reduce_49,
  0, 168, :_reduce_50,
  0, 169, :_reduce_51,
  6, 166, :_reduce_52,
  2, 160, :_reduce_53,
  3, 160, :_reduce_54,
  4, 160, :_reduce_55,
  5, 160, :_reduce_56,
  4, 160, :_reduce_57,
  5, 160, :_reduce_58,
  2, 160, :_reduce_59,
  2, 160, :_reduce_60,
  1, 149, :_reduce_none,
  3, 149, :_reduce_62,
  1, 172, :_reduce_none,
  3, 172, :_reduce_64,
  1, 171, :_reduce_65,
  2, 171, :_reduce_66,
  3, 171, :_reduce_67,
  2, 171, :_reduce_68,
  2, 171, :_reduce_69,
  1, 171, :_reduce_70,
  1, 174, :_reduce_none,
  3, 174, :_reduce_72,
  2, 173, :_reduce_73,
  3, 173, :_reduce_74,
  1, 175, :_reduce_75,
  4, 175, :_reduce_76,
  3, 175, :_reduce_77,
  3, 175, :_reduce_78,
  3, 175, :_reduce_79,
  3, 175, :_reduce_80,
  2, 175, :_reduce_81,
  1, 175, :_reduce_82,
  1, 147, :_reduce_83,
  4, 147, :_reduce_84,
  3, 147, :_reduce_85,
  3, 147, :_reduce_86,
  3, 147, :_reduce_87,
  3, 147, :_reduce_88,
  2, 147, :_reduce_89,
  1, 147, :_reduce_90,
  1, 177, :_reduce_91,
  1, 177, :_reduce_none,
  2, 178, :_reduce_93,
  1, 178, :_reduce_94,
  3, 178, :_reduce_95,
  1, 179, :_reduce_none,
  1, 179, :_reduce_none,
  1, 179, :_reduce_none,
  1, 179, :_reduce_99,
  1, 179, :_reduce_100,
  1, 144, :_reduce_101,
  1, 144, :_reduce_102,
  1, 145, :_reduce_103,
  0, 183, :_reduce_104,
  4, 145, :_reduce_105,
  1, 180, :_reduce_none,
  1, 180, :_reduce_none,
  1, 180, :_reduce_none,
  1, 180, :_reduce_none,
  1, 180, :_reduce_none,
  1, 180, :_reduce_none,
  1, 180, :_reduce_none,
  1, 180, :_reduce_none,
  1, 180, :_reduce_none,
  1, 180, :_reduce_none,
  1, 180, :_reduce_none,
  1, 180, :_reduce_none,
  1, 180, :_reduce_none,
  1, 180, :_reduce_none,
  1, 180, :_reduce_none,
  1, 180, :_reduce_none,
  1, 180, :_reduce_none,
  1, 180, :_reduce_none,
  1, 180, :_reduce_none,
  1, 180, :_reduce_none,
  1, 180, :_reduce_none,
  1, 180, :_reduce_none,
  1, 180, :_reduce_none,
  1, 180, :_reduce_none,
  1, 180, :_reduce_none,
  1, 180, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  3, 159, :_reduce_173,
  5, 159, :_reduce_174,
  3, 159, :_reduce_175,
  6, 159, :_reduce_176,
  5, 159, :_reduce_177,
  5, 159, :_reduce_178,
  5, 159, :_reduce_179,
  5, 159, :_reduce_180,
  4, 159, :_reduce_181,
  3, 159, :_reduce_182,
  3, 159, :_reduce_183,
  3, 159, :_reduce_184,
  3, 159, :_reduce_185,
  3, 159, :_reduce_186,
  3, 159, :_reduce_187,
  3, 159, :_reduce_188,
  3, 159, :_reduce_189,
  3, 159, :_reduce_190,
  4, 159, :_reduce_191,
  4, 159, :_reduce_192,
  2, 159, :_reduce_193,
  2, 159, :_reduce_194,
  3, 159, :_reduce_195,
  3, 159, :_reduce_196,
  3, 159, :_reduce_197,
  3, 159, :_reduce_198,
  3, 159, :_reduce_199,
  3, 159, :_reduce_200,
  3, 159, :_reduce_201,
  3, 159, :_reduce_202,
  3, 159, :_reduce_203,
  3, 159, :_reduce_204,
  3, 159, :_reduce_205,
  3, 159, :_reduce_206,
  3, 159, :_reduce_207,
  2, 159, :_reduce_208,
  2, 159, :_reduce_209,
  3, 159, :_reduce_210,
  3, 159, :_reduce_211,
  3, 159, :_reduce_212,
  3, 159, :_reduce_213,
  3, 159, :_reduce_214,
  5, 159, :_reduce_215,
  1, 159, :_reduce_none,
  1, 155, :_reduce_217,
  1, 152, :_reduce_none,
  2, 152, :_reduce_219,
  2, 152, :_reduce_220,
  5, 152, :_reduce_221,
  2, 152, :_reduce_222,
  3, 152, :_reduce_223,
  3, 189, :_reduce_224,
  4, 189, :_reduce_225,
  4, 189, :_reduce_226,
  6, 189, :_reduce_227,
  1, 190, :_reduce_none,
  1, 190, :_reduce_none,
  1, 162, :_reduce_230,
  2, 162, :_reduce_231,
  5, 162, :_reduce_232,
  2, 162, :_reduce_233,
  5, 162, :_reduce_234,
  4, 162, :_reduce_235,
  7, 162, :_reduce_236,
  3, 162, :_reduce_237,
  1, 162, :_reduce_none,
  4, 193, :_reduce_239,
  3, 193, :_reduce_240,
  5, 193, :_reduce_241,
  7, 193, :_reduce_242,
  2, 193, :_reduce_243,
  5, 193, :_reduce_244,
  4, 193, :_reduce_245,
  6, 193, :_reduce_246,
  7, 193, :_reduce_247,
  9, 193, :_reduce_248,
  3, 193, :_reduce_249,
  1, 193, :_reduce_none,
  0, 195, :_reduce_251,
  2, 165, :_reduce_252,
  1, 194, :_reduce_none,
  0, 196, :_reduce_254,
  3, 194, :_reduce_255,
  0, 197, :_reduce_256,
  4, 194, :_reduce_257,
  2, 192, :_reduce_258,
  2, 191, :_reduce_259,
  1, 191, :_reduce_none,
  1, 186, :_reduce_261,
  3, 186, :_reduce_262,
  3, 154, :_reduce_263,
  4, 154, :_reduce_264,
  2, 154, :_reduce_265,
  1, 185, :_reduce_none,
  1, 185, :_reduce_none,
  1, 185, :_reduce_none,
  1, 185, :_reduce_none,
  1, 185, :_reduce_none,
  1, 185, :_reduce_none,
  1, 185, :_reduce_none,
  1, 185, :_reduce_none,
  1, 185, :_reduce_274,
  0, 219, :_reduce_275,
  4, 185, :_reduce_276,
  0, 220, :_reduce_277,
  5, 185, :_reduce_278,
  3, 185, :_reduce_279,
  3, 185, :_reduce_280,
  2, 185, :_reduce_281,
  4, 185, :_reduce_282,
  3, 185, :_reduce_283,
  3, 185, :_reduce_284,
  1, 185, :_reduce_285,
  4, 185, :_reduce_286,
  3, 185, :_reduce_287,
  1, 185, :_reduce_288,
  5, 185, :_reduce_289,
  2, 185, :_reduce_290,
  1, 185, :_reduce_none,
  2, 185, :_reduce_292,
  6, 185, :_reduce_293,
  6, 185, :_reduce_294,
  0, 221, :_reduce_295,
  0, 222, :_reduce_296,
  7, 185, :_reduce_297,
  0, 223, :_reduce_298,
  0, 224, :_reduce_299,
  7, 185, :_reduce_300,
  5, 185, :_reduce_301,
  4, 185, :_reduce_302,
  5, 185, :_reduce_303,
  0, 225, :_reduce_304,
  0, 226, :_reduce_305,
  9, 185, :_reduce_306,
  0, 227, :_reduce_307,
  0, 228, :_reduce_308,
  7, 185, :_reduce_309,
  0, 229, :_reduce_310,
  0, 230, :_reduce_311,
  0, 231, :_reduce_312,
  9, 185, :_reduce_313,
  0, 232, :_reduce_314,
  0, 233, :_reduce_315,
  6, 185, :_reduce_316,
  0, 234, :_reduce_317,
  6, 185, :_reduce_318,
  0, 235, :_reduce_319,
  0, 236, :_reduce_320,
  9, 185, :_reduce_321,
  1, 185, :_reduce_322,
  1, 185, :_reduce_323,
  1, 185, :_reduce_324,
  1, 185, :_reduce_325,
  1, 151, :_reduce_326,
  1, 209, :_reduce_none,
  1, 209, :_reduce_none,
  1, 209, :_reduce_none,
  2, 209, :_reduce_none,
  1, 211, :_reduce_none,
  1, 211, :_reduce_none,
  1, 211, :_reduce_none,
  1, 210, :_reduce_none,
  5, 210, :_reduce_335,
  1, 137, :_reduce_none,
  2, 137, :_reduce_337,
  1, 213, :_reduce_none,
  1, 213, :_reduce_339,
  1, 167, :_reduce_none,
  2, 167, :_reduce_341,
  1, 167, :_reduce_342,
  3, 167, :_reduce_343,
  0, 238, :_reduce_344,
  0, 239, :_reduce_345,
  6, 237, :_reduce_346,
  2, 163, :_reduce_347,
  4, 163, :_reduce_348,
  4, 163, :_reduce_349,
  0, 241, :_reduce_350,
  3, 208, :_reduce_351,
  4, 208, :_reduce_352,
  4, 208, :_reduce_353,
  3, 208, :_reduce_354,
  2, 208, :_reduce_355,
  1, 208, :_reduce_356,
  0, 242, :_reduce_357,
  0, 243, :_reduce_358,
  6, 207, :_reduce_359,
  0, 244, :_reduce_360,
  0, 245, :_reduce_361,
  6, 207, :_reduce_362,
  0, 248, :_reduce_363,
  6, 212, :_reduce_364,
  1, 246, :_reduce_none,
  4, 246, :_reduce_366,
  2, 246, :_reduce_367,
  1, 247, :_reduce_none,
  1, 247, :_reduce_none,
  6, 136, :_reduce_370,
  0, 136, :_reduce_371,
  1, 249, :_reduce_372,
  1, 249, :_reduce_none,
  1, 249, :_reduce_none,
  2, 250, :_reduce_375,
  1, 250, :_reduce_none,
  2, 138, :_reduce_377,
  1, 138, :_reduce_none,
  1, 199, :_reduce_379,
  1, 199, :_reduce_380,
  1, 199, :_reduce_none,
  1, 200, :_reduce_382,
  1, 253, :_reduce_none,
  2, 253, :_reduce_384,
  3, 254, :_reduce_385,
  1, 254, :_reduce_386,
  3, 201, :_reduce_387,
  3, 202, :_reduce_388,
  3, 203, :_reduce_389,
  3, 203, :_reduce_390,
  0, 257, :_reduce_391,
  3, 257, :_reduce_392,
  1, 258, :_reduce_none,
  2, 258, :_reduce_394,
  3, 204, :_reduce_395,
  3, 204, :_reduce_396,
  0, 260, :_reduce_397,
  3, 260, :_reduce_398,
  0, 255, :_reduce_399,
  2, 255, :_reduce_400,
  0, 256, :_reduce_401,
  2, 256, :_reduce_402,
  1, 259, :_reduce_403,
  0, 262, :_reduce_404,
  3, 259, :_reduce_405,
  0, 263, :_reduce_406,
  4, 259, :_reduce_407,
  1, 261, :_reduce_408,
  1, 261, :_reduce_409,
  1, 261, :_reduce_410,
  1, 261, :_reduce_none,
  2, 182, :_reduce_412,
  1, 264, :_reduce_none,
  1, 264, :_reduce_none,
  1, 264, :_reduce_none,
  1, 264, :_reduce_none,
  3, 252, :_reduce_417,
  1, 251, :_reduce_none,
  1, 251, :_reduce_none,
  2, 251, :_reduce_420,
  2, 251, :_reduce_421,
  1, 176, :_reduce_none,
  1, 176, :_reduce_none,
  1, 176, :_reduce_none,
  1, 176, :_reduce_none,
  1, 176, :_reduce_none,
  1, 176, :_reduce_427,
  1, 176, :_reduce_428,
  1, 176, :_reduce_429,
  1, 176, :_reduce_430,
  1, 176, :_reduce_431,
  1, 176, :_reduce_432,
  1, 205, :_reduce_433,
  1, 150, :_reduce_434,
  1, 153, :_reduce_435,
  1, 153, :_reduce_436,
  1, 214, :_reduce_437,
  0, 265, :_reduce_438,
  4, 214, :_reduce_439,
  2, 214, :_reduce_440,
  4, 216, :_reduce_441,
  2, 216, :_reduce_442,
  6, 266, :_reduce_443,
  4, 266, :_reduce_444,
  4, 266, :_reduce_445,
  2, 266, :_reduce_446,
  4, 266, :_reduce_447,
  2, 266, :_reduce_448,
  2, 266, :_reduce_449,
  1, 266, :_reduce_450,
  0, 266, :_reduce_451,
  1, 272, :_reduce_452,
  1, 272, :_reduce_453,
  1, 272, :_reduce_454,
  1, 272, :_reduce_455,
  1, 267, :_reduce_456,
  3, 267, :_reduce_457,
  3, 273, :_reduce_458,
  1, 268, :_reduce_459,
  3, 268, :_reduce_460,
  1, 274, :_reduce_none,
  1, 274, :_reduce_none,
  2, 269, :_reduce_463,
  1, 269, :_reduce_464,
  1, 275, :_reduce_none,
  1, 275, :_reduce_none,
  2, 271, :_reduce_467,
  2, 270, :_reduce_468,
  0, 270, :_reduce_469,
  1, 217, :_reduce_none,
  0, 276, :_reduce_471,
  5, 217, :_reduce_472,
  1, 206, :_reduce_473,
  2, 206, :_reduce_474,
  2, 206, :_reduce_475,
  1, 188, :_reduce_none,
  3, 188, :_reduce_477,
  3, 277, :_reduce_478,
  1, 170, :_reduce_none,
  1, 170, :_reduce_none,
  1, 170, :_reduce_none,
  1, 164, :_reduce_none,
  1, 164, :_reduce_none,
  1, 164, :_reduce_none,
  1, 164, :_reduce_none,
  1, 240, :_reduce_none,
  1, 240, :_reduce_none,
  1, 240, :_reduce_none,
  1, 218, :_reduce_none,
  1, 218, :_reduce_none,
  0, 140, :_reduce_none,
  1, 140, :_reduce_none,
  0, 184, :_reduce_none,
  1, 184, :_reduce_none,
  0, 187, :_reduce_none,
  1, 187, :_reduce_none,
  1, 187, :_reduce_none,
  1, 215, :_reduce_498,
  1, 215, :_reduce_none,
  1, 143, :_reduce_none,
  2, 143, :_reduce_501,
  0, 141, :_reduce_502,
  0, 198, :_reduce_503 ]

racc_reduce_n = 504

racc_shift_n = 897

racc_token_table = {
  false => 0,
  :error => 1,
  :kCLASS => 2,
  :kMODULE => 3,
  :kDEF => 4,
  :kUNDEF => 5,
  :kBEGIN => 6,
  :kRESCUE => 7,
  :kENSURE => 8,
  :kEND => 9,
  :kIF => 10,
  :kUNLESS => 11,
  :kTHEN => 12,
  :kELSIF => 13,
  :kELSE => 14,
  :kCASE => 15,
  :kWHEN => 16,
  :kWHILE => 17,
  :kUNTIL => 18,
  :kFOR => 19,
  :kBREAK => 20,
  :kNEXT => 21,
  :kREDO => 22,
  :kRETRY => 23,
  :kIN => 24,
  :kDO => 25,
  :kDO_COND => 26,
  :kDO_BLOCK => 27,
  :kRETURN => 28,
  :kYIELD => 29,
  :kSUPER => 30,
  :kSELF => 31,
  :kNIL => 32,
  :kTRUE => 33,
  :kFALSE => 34,
  :kAND => 35,
  :kOR => 36,
  :kNOT => 37,
  :kIF_MOD => 38,
  :kUNLESS_MOD => 39,
  :kWHILE_MOD => 40,
  :kUNTIL_MOD => 41,
  :kRESCUE_MOD => 42,
  :kALIAS => 43,
  :kDEFINED => 44,
  :klBEGIN => 45,
  :klEND => 46,
  :k__LINE__ => 47,
  :k__FILE__ => 48,
  :tIDENTIFIER => 49,
  :tFID => 50,
  :tGVAR => 51,
  :tIVAR => 52,
  :tCONSTANT => 53,
  :tCVAR => 54,
  :tNTH_REF => 55,
  :tBACK_REF => 56,
  :tSTRING_CONTENT => 57,
  :tINTEGER => 58,
  :tFLOAT => 59,
  :tREGEXP_END => 60,
  :tUPLUS => 61,
  :tUMINUS => 62,
  :tUMINUS_NUM => 63,
  :tPOW => 64,
  :tCMP => 65,
  :tEQ => 66,
  :tEQQ => 67,
  :tNEQ => 68,
  :tGEQ => 69,
  :tLEQ => 70,
  :tANDOP => 71,
  :tOROP => 72,
  :tMATCH => 73,
  :tNMATCH => 74,
  :tDOT => 75,
  :tDOT2 => 76,
  :tDOT3 => 77,
  :tAREF => 78,
  :tASET => 79,
  :tLSHFT => 80,
  :tRSHFT => 81,
  :tCOLON2 => 82,
  :tCOLON3 => 83,
  :tOP_ASGN => 84,
  :tASSOC => 85,
  :tLPAREN => 86,
  :tLPAREN2 => 87,
  :tRPAREN => 88,
  :tLPAREN_ARG => 89,
  :tLBRACK => 90,
  :tRBRACK => 91,
  :tLBRACE => 92,
  :tLBRACE_ARG => 93,
  :tSTAR => 94,
  :tSTAR2 => 95,
  :tAMPER => 96,
  :tAMPER2 => 97,
  :tTILDE => 98,
  :tPERCENT => 99,
  :tDIVIDE => 100,
  :tPLUS => 101,
  :tMINUS => 102,
  :tLT => 103,
  :tGT => 104,
  :tPIPE => 105,
  :tBANG => 106,
  :tCARET => 107,
  :tLCURLY => 108,
  :tRCURLY => 109,
  :tBACK_REF2 => 110,
  :tSYMBEG => 111,
  :tSTRING_BEG => 112,
  :tXSTRING_BEG => 113,
  :tREGEXP_BEG => 114,
  :tWORDS_BEG => 115,
  :tAWORDS_BEG => 116,
  :tSTRING_DBEG => 117,
  :tSTRING_DVAR => 118,
  :tSTRING_END => 119,
  :tSTRING => 120,
  :tLAST_TOKEN => 121,
  "?" => 122,
  ":" => 123,
  "=" => 124,
  :tLOWEST => 125,
  "[" => 126,
  "," => 127,
  " " => 128,
  "\n" => 129,
  ";" => 130 }

racc_nt_base = 131

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kCLASS",
  "kMODULE",
  "kDEF",
  "kUNDEF",
  "kBEGIN",
  "kRESCUE",
  "kENSURE",
  "kEND",
  "kIF",
  "kUNLESS",
  "kTHEN",
  "kELSIF",
  "kELSE",
  "kCASE",
  "kWHEN",
  "kWHILE",
  "kUNTIL",
  "kFOR",
  "kBREAK",
  "kNEXT",
  "kREDO",
  "kRETRY",
  "kIN",
  "kDO",
  "kDO_COND",
  "kDO_BLOCK",
  "kRETURN",
  "kYIELD",
  "kSUPER",
  "kSELF",
  "kNIL",
  "kTRUE",
  "kFALSE",
  "kAND",
  "kOR",
  "kNOT",
  "kIF_MOD",
  "kUNLESS_MOD",
  "kWHILE_MOD",
  "kUNTIL_MOD",
  "kRESCUE_MOD",
  "kALIAS",
  "kDEFINED",
  "klBEGIN",
  "klEND",
  "k__LINE__",
  "k__FILE__",
  "tIDENTIFIER",
  "tFID",
  "tGVAR",
  "tIVAR",
  "tCONSTANT",
  "tCVAR",
  "tNTH_REF",
  "tBACK_REF",
  "tSTRING_CONTENT",
  "tINTEGER",
  "tFLOAT",
  "tREGEXP_END",
  "tUPLUS",
  "tUMINUS",
  "tUMINUS_NUM",
  "tPOW",
  "tCMP",
  "tEQ",
  "tEQQ",
  "tNEQ",
  "tGEQ",
  "tLEQ",
  "tANDOP",
  "tOROP",
  "tMATCH",
  "tNMATCH",
  "tDOT",
  "tDOT2",
  "tDOT3",
  "tAREF",
  "tASET",
  "tLSHFT",
  "tRSHFT",
  "tCOLON2",
  "tCOLON3",
  "tOP_ASGN",
  "tASSOC",
  "tLPAREN",
  "tLPAREN2",
  "tRPAREN",
  "tLPAREN_ARG",
  "tLBRACK",
  "tRBRACK",
  "tLBRACE",
  "tLBRACE_ARG",
  "tSTAR",
  "tSTAR2",
  "tAMPER",
  "tAMPER2",
  "tTILDE",
  "tPERCENT",
  "tDIVIDE",
  "tPLUS",
  "tMINUS",
  "tLT",
  "tGT",
  "tPIPE",
  "tBANG",
  "tCARET",
  "tLCURLY",
  "tRCURLY",
  "tBACK_REF2",
  "tSYMBEG",
  "tSTRING_BEG",
  "tXSTRING_BEG",
  "tREGEXP_BEG",
  "tWORDS_BEG",
  "tAWORDS_BEG",
  "tSTRING_DBEG",
  "tSTRING_DVAR",
  "tSTRING_END",
  "tSTRING",
  "tLAST_TOKEN",
  "\"?\"",
  "\":\"",
  "\"=\"",
  "tLOWEST",
  "\"[\"",
  "\",\"",
  "\" \"",
  "\"\\n\"",
  "\";\"",
  "$start",
  "program",
  "compstmt",
  "bodystmt",
  "@1",
  "opt_rescue",
  "opt_else",
  "opt_ensure",
  "stmts",
  "opt_terms",
  "none",
  "stmt",
  "terms",
  "fitem",
  "undef_list",
  "expr_value",
  "lhs",
  "command_call",
  "mlhs",
  "var_lhs",
  "primary_value",
  "aref_args",
  "backref",
  "mrhs",
  "arg_value",
  "expr",
  "@2",
  "@3",
  "arg",
  "command",
  "block_command",
  "call_args",
  "block_call",
  "operation2",
  "command_args",
  "cmd_brace_block",
  "opt_block_var",
  "@4",
  "@5",
  "operation",
  "mlhs_basic",
  "mlhs_entry",
  "mlhs_head",
  "mlhs_item",
  "mlhs_node",
  "variable",
  "cname",
  "cpath",
  "fname",
  "op",
  "reswords",
  "symbol",
  "@6",
  "opt_nl",
  "primary",
  "args",
  "trailer",
  "assocs",
  "paren_args",
  "opt_paren_args",
  "opt_block_arg",
  "block_arg",
  "call_args2",
  "open_args",
  "@7",
  "@8",
  "@9",
  "none_block_pass",
  "literal",
  "strings",
  "xstring",
  "regexp",
  "words",
  "awords",
  "var_ref",
  "assoc_list",
  "brace_block",
  "method_call",
  "then",
  "if_tail",
  "do",
  "case_body",
  "block_var",
  "superclass",
  "term",
  "f_arglist",
  "singleton",
  "dot_or_colon",
  "@10",
  "@11",
  "@12",
  "@13",
  "@14",
  "@15",
  "@16",
  "@17",
  "@18",
  "@19",
  "@20",
  "@21",
  "@22",
  "@23",
  "@24",
  "@25",
  "@26",
  "@27",
  "do_block",
  "@28",
  "@29",
  "operation3",
  "@30",
  "@31",
  "@32",
  "@33",
  "@34",
  "when_args",
  "cases",
  "@35",
  "exc_list",
  "exc_var",
  "numeric",
  "dsym",
  "string",
  "string1",
  "string_contents",
  "xstring_contents",
  "word_list",
  "word",
  "string_content",
  "qword_list",
  "string_dvar",
  "@36",
  "@37",
  "sym",
  "@38",
  "f_args",
  "f_arg",
  "f_optarg",
  "f_rest_arg",
  "opt_f_block_arg",
  "f_block_arg",
  "f_norm_arg",
  "f_opt",
  "restarg_mark",
  "blkarg_mark",
  "@39",
  "assoc" ]

Racc_debug_parser = true

##### State transition tables end #####

# reduce 0 omitted

def _reduce_1(val, _values, result)
                  self.lexer.lex_state = :expr_beg
                
    result
end

def _reduce_2(val, _values, result)
                  result = val[1]
                
    result
end

def _reduce_3(val, _values, result)
                  result = val[0]

                  if val[1] then
                    result = s(:rescue)
                    result << val[0] if val[0]

                    resbody = val[1]

                    while resbody do
                      result << resbody
                      resbody = resbody.resbody(true)
                    end

                    result << val[2] if val[2]

                    result.line = (val[0] || val[1]).line
                  elsif not val[2].nil? then
                    warning("else without rescue is useless")
                    result = block_append(result, val[2])
                  end

                  result = s(:ensure, result, val[3]).compact if val[3]
                  # result.minimize_line if result
                
    result
end

def _reduce_4(val, _values, result)
                 result = void_stmts(val[0])
                 result = remove_begin(result) if result
               
    result
end

# reduce 5 omitted

# reduce 6 omitted

def _reduce_7(val, _values, result)
                 result = self.block_append(val[0], val[2])
               
    result
end

def _reduce_8(val, _values, result)
                 result = val[1];
               
    result
end

def _reduce_9(val, _values, result)
                  lexer.lex_state = :expr_fname
                  result = self.lexer.lineno
                
    result
end

def _reduce_10(val, _values, result)
                  result = s(:alias, val[1], val[3]).line(val[2])
                
    result
end

def _reduce_11(val, _values, result)
                  result = s(:valias, val[1].to_sym, val[2].to_sym)
                 
    result
end

def _reduce_12(val, _values, result)
                 result = s(:valias, val[1].to_sym, :"$#{val[2]}")
               
    result
end

def _reduce_13(val, _values, result)
                  yyerror("can't make alias for the number variables");
                 
    result
end

def _reduce_14(val, _values, result)
                  result = val[1]
                 
    result
end

def _reduce_15(val, _values, result)
                 val[2] = cond val[2]
                 if val[2][0] == :not then
                   result = s(:if, val[2].last, nil, val[0])
                 else
                   result = s(:if, val[2], val[0], nil)
                 end
               
    result
end

def _reduce_16(val, _values, result)
                 val[2] = cond val[2]
                 if val[2][0] == :not then
                   result = s(:if, val[2].last, val[0], nil)
                 else
                   result = s(:if, val[2], nil, val[0])
                 end
               
    result
end

def _reduce_17(val, _values, result)
                 block, expr, pre = val[0], val[2], true
                 line = block.line

                 block, pre = block.last, false if block[0] == :begin

                 expr = cond expr
                 if expr.first == :not then
                   result = s(:until, expr.last, block, pre)
                 else
                   result = s(:while, expr, block, pre)
                 end

                 result.line = line
               
    result
end

def _reduce_18(val, _values, result)
 # REFACTOR
                 block, expr, pre = val[0], val[2], true
                 line = block.line

                 block, pre = block.last, false if block[0] == :begin

                 expr = cond expr
                 if expr[0] == :not then
                   result = s(:while, expr.last, block, pre)
                 else
                   result = s(:until, expr, block, pre)
                 end
                 result.line = line
               
    result
end

def _reduce_19(val, _values, result)
                  result = s(:rescue, val[0], s(:resbody, s(:array), val[2]))
                  result.minimize_line
                 
    result
end

def _reduce_20(val, _values, result)
                 if (self.in_def || self.in_single > 0) then
                   # yyerror("BEGIN in method"); HACK
                 end
                 self.env.extend;
               
    result
end

def _reduce_21(val, _values, result)
                 result = new_iter s(:preexe), nil, val[3] # TODO: add test?
                 result = nil # TODO: since it isn't supposed to go in the AST
               
    result
end

def _reduce_22(val, _values, result)
                 if (self.in_def || self.in_single > 0) then
                   # yyerror("END in method; use at_exit"); HACK
                 end
                 result = new_iter s(:postexe), nil, val[2]
               
    result
end

def _reduce_23(val, _values, result)
                  result = self.node_assign(val[0], val[2])
                 
    result
end

def _reduce_24(val, _values, result)
                  val[2] = value_expr(val[2])
                  result = val[0] << if val[0][1] then
                                       s(:to_ary, val[2])
                                     else
                                       val[0].delete_at 1 # remove the nil
                                       s(:array, val[2])
                                     end
                 
    result
end

def _reduce_25(val, _values, result)
                  name = val[0].last
                  asgn_op = val[1].to_sym
                  val[2] = value_expr(val[2])

                  case asgn_op
                  when :"||" then
                    val[0][2] = (val[2]);
                    result = s(:op_asgn_or,  self.gettable(name), val[0])
                  when :"&&" then
                    val[0][2] = (val[2]);
                    result = s(:op_asgn_and, self.gettable(name), val[0])
                  else
                    result = val[0]
                    result << new_call(self.gettable(name), asgn_op,
                                s(:arglist, val[2]))
                  end
                  # result.line = val[0].line
                 
    result
end

def _reduce_26(val, _values, result)
                  result = s(:op_asgn1, val[0], val[2], val[4].to_sym, val[5]);
                 
    result
end

def _reduce_27(val, _values, result)
                  result = s(:op_asgn, val[0], val[4], val[2], val[3]);
                 
    result
end

def _reduce_28(val, _values, result)
                  result = s(:op_asgn, val[0], val[4], val[2], val[3]);
                 
    result
end

def _reduce_29(val, _values, result)
                  result = s(:op_asgn, val[0], val[4], val[2], val[3]);
                 
    result
end

def _reduce_30(val, _values, result)
                  self.backref_assign_error(val[0]);
                 
    result
end

def _reduce_31(val, _values, result)
                  result = self.node_assign(val[0], s(:svalue, val[2]))
                 
    result
end

def _reduce_32(val, _values, result)
                 result = val[0] << if val[0][1] then
                                      s(:to_ary, val[2])
                                    else
                                      val[0].delete_at 1 if val[0][1].nil?
                                      s(:array, val[2])
                                    end
               
    result
end

def _reduce_33(val, _values, result)
                 val[0].delete_at 1 if val[0][1].nil?
                 result = val[0] << val[2]
               
    result
end

# reduce 34 omitted

# reduce 35 omitted

def _reduce_36(val, _values, result)
                  result = logop(:and, val[0], val[2])
                 
    result
end

def _reduce_37(val, _values, result)
                  result = logop(:or, val[0], val[2])
                 
    result
end

def _reduce_38(val, _values, result)
                  result = s(:not, val[1])
                 
    result
end

def _reduce_39(val, _values, result)
                  result = s(:not, val[1])
                 
    result
end

# reduce 40 omitted

def _reduce_41(val, _values, result)
                  result = value_expr(val[0])
                
    result
end

# reduce 42 omitted

# reduce 43 omitted

def _reduce_44(val, _values, result)
                 result = s(:return, ret_args(val[1]))
               
    result
end

def _reduce_45(val, _values, result)
                 result = s(:break, ret_args(val[1]))
               
    result
end

def _reduce_46(val, _values, result)
                 result = s(:next, ret_args(val[1]))
               
    result
end

# reduce 47 omitted

def _reduce_48(val, _values, result)
                  result = new_call val[0], val[2], val[3]
                
    result
end

def _reduce_49(val, _values, result)
                  result = new_call val[0], val[2], val[3]
                
    result
end

def _reduce_50(val, _values, result)
                    self.env.extend :dynamic
                    result = self.lexer.lineno
                  
    result
end

def _reduce_51(val, _values, result)
 result = self.env.dynamic.keys 
    result
end

def _reduce_52(val, _values, result)
                    result = new_iter nil, val[2], val[4]
                    result.line = val[1]
                    self.env.unextend
                  
    result
end

def _reduce_53(val, _values, result)
                 result = new_call nil, val[0].to_sym, val[1]
               
    result
end

def _reduce_54(val, _values, result)
                 result = new_call nil, val[0].to_sym, val[1]
                 if val[2] then
                   if result[0] == :block_pass then
                      raise "both block arg and actual block given"
                   end
                   result, operation = val[2], result
                   result.insert 1, operation
                 end
               
    result
end

def _reduce_55(val, _values, result)
                 result = new_call val[0], val[2].to_sym, val[3]
               
    result
end

def _reduce_56(val, _values, result)
                 result = new_call val[0], val[2].to_sym, val[3]
               
    result
end

def _reduce_57(val, _values, result)
                 result = new_call val[0], val[2].to_sym, val[3]
               
    result
end

def _reduce_58(val, _values, result)
                 result = new_call val[0], val[2].to_sym, val[3]
                 if val[4] then
                   if result[0] == :block_pass then # REFACTOR
                     raise "both block arg and actual block given"
                   end
                   val[2] << result
                   result = val[2]
                 end
               
    result
end

def _reduce_59(val, _values, result)
                 result = new_super val[1]
               
    result
end

def _reduce_60(val, _values, result)
                 result = new_yield val[1]
               
    result
end

# reduce 61 omitted

def _reduce_62(val, _values, result)
                  result = val[1];
                 
    result
end

# reduce 63 omitted

def _reduce_64(val, _values, result)
                  result = s(:masgn, s(:array, val[1]));
                
    result
end

def _reduce_65(val, _values, result)
                  result = s(:masgn, val[0]);
                
    result
end

def _reduce_66(val, _values, result)
                  result = s(:masgn, val[0] << val[1].compact);
                
    result
end

def _reduce_67(val, _values, result)
                  result = s(:masgn, val[0], val[2]);
                
    result
end

def _reduce_68(val, _values, result)
                  result = s(:masgn, val[0], s(:splat))
                
    result
end

def _reduce_69(val, _values, result)
                  result = s(:masgn, nil, val[1]);
                
    result
end

def _reduce_70(val, _values, result)
                  result = s(:masgn, nil, s(:splat))
                
    result
end

# reduce 71 omitted

def _reduce_72(val, _values, result)
                  result = val[1];
                
    result
end

def _reduce_73(val, _values, result)
                  result = s(:array, val[0])
                
    result
end

def _reduce_74(val, _values, result)
                  result = val[0] << val[1].compact
                
    result
end

def _reduce_75(val, _values, result)
                 result = self.assignable(val[0])
               
    result
end

def _reduce_76(val, _values, result)
                 result = self.aryset(val[0], val[2]);
               
    result
end

def _reduce_77(val, _values, result)
                 result = s(:attrasgn, val[0], :"#{val[2]}=", s(:arglist));
               
    result
end

def _reduce_78(val, _values, result)
                 result = s(:attrasgn, val[0], :"#{val[2]}=", s(:arglist));
               
    result
end

def _reduce_79(val, _values, result)
                 result = s(:attrasgn, val[0], :"#{val[2]}=", s(:arglist));
               
    result
end

def _reduce_80(val, _values, result)
                 if (self.in_def || self.in_single > 0) then
                   yyerror("dynamic constant assignment");
                 end

                 result = s(:const, s(:colon2, val[0], val[2].to_sym), nil)
               
    result
end

def _reduce_81(val, _values, result)
                 if (self.in_def || self.in_single > 0) then
                   yyerror("dynamic constant assignment");
                 end

                 result = s(:const, nil, s(:colon3, val[1].to_sym))
               
    result
end

def _reduce_82(val, _values, result)
                  self.backref_assign_error(val[0]);
                 
    result
end

def _reduce_83(val, _values, result)
                 result = self.assignable(val[0])
               
    result
end

def _reduce_84(val, _values, result)
                 result = self.aryset(val[0], val[2]);
               
    result
end

def _reduce_85(val, _values, result)
                 result = s(:attrasgn, val[0], :"#{val[2]}=")
               
    result
end

def _reduce_86(val, _values, result)
                 result = s(:attrasgn, val[0], :"#{val[2]}=")
               
    result
end

def _reduce_87(val, _values, result)
                 result = s(:attrasgn, val[0], :"#{val[2]}=")
               
    result
end

def _reduce_88(val, _values, result)
                 if (self.in_def || self.in_single > 0) then
                   yyerror("dynamic constant assignment")
                 end

                 result = s(:const,
                            s(:colon2, val[0], val[2].to_sym))
                 
    result
end

def _reduce_89(val, _values, result)
                  if (self.in_def || self.in_single > 0) then
                    yyerror("dynamic constant assignment");
                  end

                  result = s(:const, s(:colon3, val[1].to_sym))
                  
    result
end

def _reduce_90(val, _values, result)
                   self.backref_assign_error(val[0]);
                 
    result
end

def _reduce_91(val, _values, result)
                  yyerror("class/module name must be CONSTANT");
                 
    result
end

# reduce 92 omitted

def _reduce_93(val, _values, result)
                  result = s(:colon3, val[1].to_sym)
                 
    result
end

def _reduce_94(val, _values, result)
                  result = val[0].to_sym
                 
    result
end

def _reduce_95(val, _values, result)
                  result = s(:colon2, val[0], val[2].to_sym);
                 
    result
end

# reduce 96 omitted

# reduce 97 omitted

# reduce 98 omitted

def _reduce_99(val, _values, result)
                  lexer.lex_state = :expr_end
                  result = val[0];
                
    result
end

def _reduce_100(val, _values, result)
                  lexer.lex_state = :expr_end
                  result = val[0];
                
    result
end

def _reduce_101(val, _values, result)
 result = s(:lit, val[0].to_sym) 
    result
end

def _reduce_102(val, _values, result)
 result = s(:lit, val[0]) 
    result
end

def _reduce_103(val, _values, result)
                  result = s(:undef, val[0])
                 
    result
end

def _reduce_104(val, _values, result)
                  lexer.lex_state = :expr_fname
                
    result
end

def _reduce_105(val, _values, result)
                  result = self.block_append(val[0], s(:undef, val[3]))
                
    result
end

# reduce 106 omitted

# reduce 107 omitted

# reduce 108 omitted

# reduce 109 omitted

# reduce 110 omitted

# reduce 111 omitted

# reduce 112 omitted

# reduce 113 omitted

# reduce 114 omitted

# reduce 115 omitted

# reduce 116 omitted

# reduce 117 omitted

# reduce 118 omitted

# reduce 119 omitted

# reduce 120 omitted

# reduce 121 omitted

# reduce 122 omitted

# reduce 123 omitted

# reduce 124 omitted

# reduce 125 omitted

# reduce 126 omitted

# reduce 127 omitted

# reduce 128 omitted

# reduce 129 omitted

# reduce 130 omitted

# reduce 131 omitted

# reduce 132 omitted

# reduce 133 omitted

# reduce 134 omitted

# reduce 135 omitted

# reduce 136 omitted

# reduce 137 omitted

# reduce 138 omitted

# reduce 139 omitted

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

# reduce 146 omitted

# reduce 147 omitted

# reduce 148 omitted

# reduce 149 omitted

# reduce 150 omitted

# reduce 151 omitted

# reduce 152 omitted

# reduce 153 omitted

# reduce 154 omitted

# reduce 155 omitted

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

# reduce 159 omitted

# reduce 160 omitted

# reduce 161 omitted

# reduce 162 omitted

# reduce 163 omitted

# reduce 164 omitted

# reduce 165 omitted

# reduce 166 omitted

# reduce 167 omitted

# reduce 168 omitted

# reduce 169 omitted

# reduce 170 omitted

# reduce 171 omitted

# reduce 172 omitted

def _reduce_173(val, _values, result)
                 result = self.node_assign(val[0], val[2])
               
    result
end

def _reduce_174(val, _values, result)
                 result = self.node_assign(val[0],
                            s(:rescue, val[2], s(:resbody, s(:array), val[4])))
                 # result.line = val[0].line
               
    result
end

def _reduce_175(val, _values, result)
                 lhs, asgn_op, arg = val[0], val[1].to_sym, val[2]
                 name = lhs.value

                 arg = remove_begin(arg)

                 result = case asgn_op # REFACTOR
                          when :"||" then
                            lhs << arg
                            s(:op_asgn_or, self.gettable(name), lhs)
                          when :"&&" then
                            lhs << arg
                            s(:op_asgn_and, self.gettable(name), lhs)
                          else
                            # TODO: why [2] ?
                            lhs[2] = new_call(self.gettable(name), asgn_op,
                                              s(:arglist, arg))
                            lhs
                          end
                 result.line = lhs.line
               
    result
end

def _reduce_176(val, _values, result)
                  result = s(:op_asgn1, val[0], val[2], val[4].to_sym, val[5]);
                  val[2][0] = :arglist
                 
    result
end

def _reduce_177(val, _values, result)
                  result = s(:op_asgn2, val[0], :"#{val[2]}=", val[3].to_sym, val[4]);
                 
    result
end

def _reduce_178(val, _values, result)
                  result = s(:op_asgn2, val[0], :"#{val[2]}=", val[3].to_sym, val[4])
                 
    result
end

def _reduce_179(val, _values, result)
                  result = s(:op_asgn, val[0], val[4], val[2], val[3]);
                 
    result
end

def _reduce_180(val, _values, result)
                 yyerror("constant re-assignment");
                 
    result
end

def _reduce_181(val, _values, result)
                 yyerror("constant re-assignment");
                 
    result
end

def _reduce_182(val, _values, result)
                  self.backref_assign_error(val[0]);
                 
    result
end

def _reduce_183(val, _values, result)
                 v1, v2 = val[0], val[2]
                 if v1.node_type == :lit and v2.node_type == :lit and Fixnum === v1.last and Fixnum === v2.last then
                   result = s(:lit, (v1.last)..(v2.last))
                 else
                   result = s(:dot2, v1, v2)
                 end
               
    result
end

def _reduce_184(val, _values, result)
                 v1, v2 = val[0], val[2]
                 if v1.node_type == :lit and v2.node_type == :lit and Fixnum === v1.last and Fixnum === v2.last then
                   result = s(:lit, (v1.last)...(v2.last))
                 else
                   result = s(:dot3, v1, v2)
                 end
               
    result
end

def _reduce_185(val, _values, result)
                  result = new_call val[0], :+, s(:arglist, val[2])
                 
    result
end

def _reduce_186(val, _values, result)
                  result = new_call val[0], :-, s(:arglist, val[2])
                 
    result
end

def _reduce_187(val, _values, result)
                  result = new_call val[0], :*, s(:arglist, val[2])
                 
    result
end

def _reduce_188(val, _values, result)
                  result = new_call val[0], :"/", s(:arglist, val[2])
                 
    result
end

def _reduce_189(val, _values, result)
                  result = new_call val[0], :%, s(:arglist, val[2])
                 
    result
end

def _reduce_190(val, _values, result)
                 result = new_call val[0], :**, s(:arglist, val[2])
                 
    result
end

def _reduce_191(val, _values, result)
                  result = new_call(new_call(s(:lit, val[1]), :"**", s(:arglist, val[3])), :"-@", s(:arglist))
                 
    result
end

def _reduce_192(val, _values, result)
                  result = new_call(new_call(s(:lit, val[1]), :"**", s(:arglist, val[3])), :"-@", s(:arglist));
                 
    result
end

def _reduce_193(val, _values, result)
                  if val[1][0] == :lit then
                    result = val[1]
                  else
                    result = new_call val[1], :"+@", s(:arglist)
                  end
                 
    result
end

def _reduce_194(val, _values, result)
                  result = new_call val[1], :"-@", s(:arglist)
                 
    result
end

def _reduce_195(val, _values, result)
                  result = new_call val[0], :"|", s(:arglist, val[2])
                 
    result
end

def _reduce_196(val, _values, result)
                  result = new_call val[0], :"^", s(:arglist, val[2])
                 
    result
end

def _reduce_197(val, _values, result)
                  result = new_call val[0], :"&", s(:arglist, val[2])
                 
    result
end

def _reduce_198(val, _values, result)
                  result = new_call val[0], :"<=>", s(:arglist, val[2])
                 
    result
end

def _reduce_199(val, _values, result)
                  result = new_call val[0], :">", s(:arglist, val[2])
                 
    result
end

def _reduce_200(val, _values, result)
                  result = new_call val[0], :">=", s(:arglist, val[2])
                 
    result
end

def _reduce_201(val, _values, result)
                  result = new_call val[0], :"<", s(:arglist, val[2])
                 
    result
end

def _reduce_202(val, _values, result)
                  result = new_call val[0], :"<=", s(:arglist, val[2])
                 
    result
end

def _reduce_203(val, _values, result)
                  result = new_call val[0], :"==", s(:arglist, val[2])
                 
    result
end

def _reduce_204(val, _values, result)
                  result = new_call val[0], :"===", s(:arglist, val[2])
                 
    result
end

def _reduce_205(val, _values, result)
                  val[0] = value_expr val[0] # TODO: port call_op and clean these
                  val[2] = value_expr val[2]
                  result = s(:not, new_call(val[0], :"==", s(:arglist, val[2])))
                 
    result
end

def _reduce_206(val, _values, result)
                  result = self.get_match_node(val[0], val[2])
                 
    result
end

def _reduce_207(val, _values, result)
                  result = s(:not, self.get_match_node(val[0], val[2]))
                 
    result
end

def _reduce_208(val, _values, result)
                  result = s(:not, val[1])
                 
    result
end

def _reduce_209(val, _values, result)
                  val[2] = value_expr val[2]
                  result = new_call val[1], :"~", s(:arglist)
                 
    result
end

def _reduce_210(val, _values, result)
                  val[0] = value_expr val[0]
                  val[2] = value_expr val[2]
                  result = new_call val[0], :"\<\<", s(:arglist, val[2])
                 
    result
end

def _reduce_211(val, _values, result)
                  val[0] = value_expr val[0]
                  val[2] = value_expr val[2]
                  result = new_call val[0], :">>", s(:arglist, val[2])
                 
    result
end

def _reduce_212(val, _values, result)
                  result = logop(:and, val[0], val[2])
                 
    result
end

def _reduce_213(val, _values, result)
                  result = logop(:or, val[0], val[2])
                 
    result
end

def _reduce_214(val, _values, result)
                  result = s(:defined, val[2]);
                 
    result
end

def _reduce_215(val, _values, result)
                 result = s(:if, val[0], val[2], val[4]);
               
    result
end

# reduce 216 omitted

def _reduce_217(val, _values, result)
                  result = value_expr(val[0])
                 
    result
end

# reduce 218 omitted

def _reduce_219(val, _values, result)
                 warning("parenthesize argument(s) for future version");
                 result = s(:array, val[0]);
               
    result
end

def _reduce_220(val, _values, result)
                 result = val[0];
               
    result
end

def _reduce_221(val, _values, result)
                 result = self.arg_concat(val[0], val[3])
               
    result
end

def _reduce_222(val, _values, result)
                 result = s(:array, s(:hash, *val[0].values))
               
    result
end

def _reduce_223(val, _values, result)
                 result = s(:splat, val[1])
                 result.paren = true
               
    result
end

def _reduce_224(val, _values, result)
                  result = val[1]
                 
    result
end

def _reduce_225(val, _values, result)
                  result = val[1];
                 
    result
end

def _reduce_226(val, _values, result)
                  warning("parenthesize argument(s) for future version");
                  result = s(:array, val[1]);
                 
    result
end

def _reduce_227(val, _values, result)
                  warning("parenthesize argument(s) for future version");
                  result = val[1].add(val[3]);
                 
    result
end

# reduce 228 omitted

# reduce 229 omitted

def _reduce_230(val, _values, result)
                  warning("parenthesize argument(s) for future version");
                  result = s(:array, val[0])
                 
    result
end

def _reduce_231(val, _values, result)
                 result = self.arg_blk_pass(val[0], val[1]);
               
    result
end

def _reduce_232(val, _values, result)
                 result = self.arg_concat(val[0], val[3]);
                 result = self.arg_blk_pass(result, val[4]);
               
    result
end

def _reduce_233(val, _values, result)
                 result = s(:array, s(:hash, *val[0].values))
                 result = self.arg_blk_pass(result, val[1]);
               
    result
end

def _reduce_234(val, _values, result)
                 result = self.arg_concat(s(:array, s(:hash, *val[0].values)), val[3])
                 result = self.arg_blk_pass(result, val[4]);
               
    result
end

def _reduce_235(val, _values, result)
                 result = val[0] << s(:hash, *val[2].values)
                 result = self.arg_blk_pass(result, val[3]);
               
    result
end

def _reduce_236(val, _values, result)
                 val[0] << s(:hash, *val[2].values)
                 result = self.arg_concat(val[0], val[5])
                 result = self.arg_blk_pass(result, val[6]);
               
    result
end

def _reduce_237(val, _values, result)
                  result = self.arg_blk_pass(s(:splat, val[1]), val[2])
                 
    result
end

# reduce 238 omitted

def _reduce_239(val, _values, result)
                  args = self.list_prepend(val[0], val[2])
                  result = self.arg_blk_pass(args, val[3])
                 
    result
end

def _reduce_240(val, _values, result)
                  result = self.arg_blk_pass(val[0], val[2]);
                 
    result
end

def _reduce_241(val, _values, result)
                  result = self.arg_concat(s(:array, val[0]), val[3]);
                  result = self.arg_blk_pass(result, val[4]);
                 
    result
end

def _reduce_242(val, _values, result)
                  result = self.arg_concat(s(:array, val[0], s(:hash, *val[2].values)), val[5])
                  result = self.arg_blk_pass(result, val[6]);
                 
    result
end

def _reduce_243(val, _values, result)
                  result = s(:array, s(:hash, *val[0].values));
                  result = self.arg_blk_pass(result, val[1]);
                 
    result
end

def _reduce_244(val, _values, result)
                  result = s(:array, s(:hash, *val[0].values), val[3])
                  result = self.arg_blk_pass(result, val[4])
                 
    result
end

def _reduce_245(val, _values, result)
                  result = s(:array, val[0], s(:hash, *val[2].values))
                  result = self.arg_blk_pass(result, val[3])
                 
    result
end

def _reduce_246(val, _values, result)
                  result = s(:array, val[0]).add_all(val[2]).add(s(:hash, *val[4].values));
                  result = self.arg_blk_pass(result, val[5]);
                 
    result
end

def _reduce_247(val, _values, result)
                  result = self.arg_concat(s(:array, val[0]).add(s(:hash, *val[2].values)), val[5]);
                  result = self.arg_blk_pass(result, val[6]);
                 
    result
end

def _reduce_248(val, _values, result)
                  result = self.arg_concat(s(:array, val[0]).add_all(val[2]).add(s(:hash, *val[4].values)), val[7]);
                  result = self.arg_blk_pass(result, val[8]);
                 
    result
end

def _reduce_249(val, _values, result)
                  result = self.arg_blk_pass(s(:splat, val[1]), val[2]);
                 
    result
end

# reduce 250 omitted

def _reduce_251(val, _values, result)
                  result = lexer.cmdarg.stack.dup
                  lexer.cmdarg.push true
                
    result
end

def _reduce_252(val, _values, result)
                  lexer.cmdarg.stack.replace val[0]
                  result = val[1]
                
    result
end

# reduce 253 omitted

def _reduce_254(val, _values, result)
                 lexer.lex_state = :expr_endarg
               
    result
end

def _reduce_255(val, _values, result)
                  warning("don't put space before argument parentheses");
                  result = nil;
                 
    result
end

def _reduce_256(val, _values, result)
                 lexer.lex_state = :expr_endarg
               
    result
end

def _reduce_257(val, _values, result)
                  warning("don't put space before argument parentheses");
                  result = val[1];
                 
    result
end

def _reduce_258(val, _values, result)
                  result = s(:block_pass, val[1]);
                 
    result
end

def _reduce_259(val, _values, result)
                  result = val[1];
                 
    result
end

# reduce 260 omitted

def _reduce_261(val, _values, result)
                 result = s(:array, val[0])
               
    result
end

def _reduce_262(val, _values, result)
                 result = self.list_append(val[0], val[2])
               
    result
end

def _reduce_263(val, _values, result)
                 result = val[0] << val[2]
               
    result
end

def _reduce_264(val, _values, result)
                 result = self.arg_concat(val[0], val[3])
               
    result
end

def _reduce_265(val, _values, result)
                 result = s(:splat, val[1])
               
    result
end

# reduce 266 omitted

# reduce 267 omitted

# reduce 268 omitted

# reduce 269 omitted

# reduce 270 omitted

# reduce 271 omitted

# reduce 272 omitted

# reduce 273 omitted

def _reduce_274(val, _values, result)
                 result = new_call nil, val[0].to_sym
               
    result
end

def _reduce_275(val, _values, result)
                 result = self.lexer.lineno
               
    result
end

def _reduce_276(val, _values, result)
                 unless val[2] then
                   result = s(:nil)
                 else
                   result = s(:begin, val[2])
                 end

                 result.line = val[1]
               
    result
end

def _reduce_277(val, _values, result)
                  lexer.lex_state = :expr_endarg
               
    result
end

def _reduce_278(val, _values, result)
                  warning("(...) interpreted as grouped expression");
                  result = val[1];
                 
    result
end

def _reduce_279(val, _values, result)
                 result = val[1] || s(:nil)
                 result.paren = true
                 
    result
end

def _reduce_280(val, _values, result)
                 result = s(:colon2, val[0], val[2].to_sym)
               
    result
end

def _reduce_281(val, _values, result)
                 result = s(:colon3, val[1].to_sym)
               
    result
end

def _reduce_282(val, _values, result)
                 val[2] ||= s(:arglist)
                 val[2][0] = :arglist if val[2][0] == :array # REFACTOR
                 if val[0].node_type == :self then
                   result = new_call nil, :"[]", val[2]
                 else
                   result = new_call val[0], :"[]", val[2]
                 end
               
    result
end

def _reduce_283(val, _values, result)
                  result = val[1] || s(:array)
                 
    result
end

def _reduce_284(val, _values, result)
                 result = s(:hash, *val[1].values)
               
    result
end

def _reduce_285(val, _values, result)
                 result = s(:return)
               
    result
end

def _reduce_286(val, _values, result)
                 result = new_yield val[2]
               
    result
end

def _reduce_287(val, _values, result)
                 result = new_yield
               
    result
end

def _reduce_288(val, _values, result)
                 result = new_yield
               
    result
end

def _reduce_289(val, _values, result)
                 result = s(:defined, val[3]);
               
    result
end

def _reduce_290(val, _values, result)
                 oper = val[0]
                 iter = val[1]
                 call = new_call(nil, oper.to_sym)
                 iter.insert 1, call
                 result = iter
                 call.line ||= iter.line
               
    result
end

# reduce 291 omitted

def _reduce_292(val, _values, result)
                 call = val[0]
                 iter = val[1]
                 iter.insert 1, call
                 result = iter
               
    result
end

def _reduce_293(val, _values, result)
                 val[1] = cond val[1]
                 if val[1][0] == :not then
                   result = s(:if, val[1].last, val[4], val[3])
                 else
                   result = s(:if, val[1], val[3], val[4])
                 end
                 # result.minimize_line
               
    result
end

def _reduce_294(val, _values, result)
                 val[1] = cond val[1]
                 if val[1][0] == :not then
                   result = s(:if, val[1].last, val[3], val[4])
                 else
                   result = s(:if, val[1], val[4], val[3])
                 end
                 # result.minimize_line
               
    result
end

def _reduce_295(val, _values, result)
                 lexer.cond.push true
               
    result
end

def _reduce_296(val, _values, result)
                 lexer.cond.pop
               
    result
end

def _reduce_297(val, _values, result)
                 block = val[5]
                 cond = self.cond val[2]
                 if cond[0] == :not then
                   result = s(:until, cond.last, block, true)
                 else
                   result = s(:while, cond, block, true)
                 end
                 # result.minimize_line
               
    result
end

def _reduce_298(val, _values, result)
                 lexer.cond.push true
               
    result
end

def _reduce_299(val, _values, result)
                 lexer.cond.pop
               
    result
end

def _reduce_300(val, _values, result)
                 block = val[5]
                 val[2] = cond val[2]
                 if val[2][0] == :not then
                   result = s(:while, val[2].last, block, true) # .line(val[0].line)
                 else
                   result = s(:until, val[2], block, true) # .line(val[0].line)
                 end
                 # result.minimize_line
               
    result
end

def _reduce_301(val, _values, result)
                  expr, body = val[1], val[3]
                  result = s(:case, expr);

                  while body and body.node_type == :when
                    result << body
                    body = body.delete_at 3
                  end

                  els = body

                  if els and els != s(:block) then
                    result << els
                  else
                    result << nil
                  end
                  # result.minimize_line
                 
    result
end

def _reduce_302(val, _values, result)
                  line, body = val[1], val[2]
                  result = s(:case, nil) # REFACTOR

                  while body and body.first == :when
                    result << body
                    body = body.delete_at 3
                  end

                  els = body

                  if els and els != s(:block) then
                    result << els
                  else
                    result << nil
                  end
                  result.minimize_line
               
    result
end

def _reduce_303(val, _values, result)
 # TODO: need a test
                 result = s(:case, nil, val[3])
                 # result.minimize_line
               
    result
end

def _reduce_304(val, _values, result)
                 lexer.cond.push true
               
    result
end

def _reduce_305(val, _values, result)
                 lexer.cond.pop;
               
    result
end

def _reduce_306(val, _values, result)
                 result = s(:for, val[4], val[1]) # .line(val[0].line)
                 result << val[7] if val[7]
               
    result
end

def _reduce_307(val, _values, result)
                 result = self.lexer.lineno
               
    result
end

def _reduce_308(val, _values, result)
                 self.comments.push self.lexer.comments
                 if (self.in_def || self.in_single > 0) then
                   yyerror("class definition in method body");
                 end
                 self.env.extend
               
    result
end

def _reduce_309(val, _values, result)
                 line, path, superclass, body = val[1], val[2], val[3], val[5]
                 scope = s(:scope, body).compact
                 result = s(:class, path, superclass, scope)
                 result.line = line
                 result.comments = self.comments.pop
                 self.env.unextend
               
    result
end

def _reduce_310(val, _values, result)
                 result = self.lexer.lineno
               
    result
end

def _reduce_311(val, _values, result)
                 result = self.in_def
                 self.in_def = false
               
    result
end

def _reduce_312(val, _values, result)
                 result = self.in_single
                 self.in_single = 0
                 self.env.extend
               
    result
end

def _reduce_313(val, _values, result)
                 recv, in_def, in_single, body = val[3], val[4], val[6], val[7]
                 scope = s(:scope, body).compact
                 result = s(:sclass, recv, scope)
                 result.line = val[2]
                 self.env.unextend
                 self.in_def = in_def
                 self.in_single = in_single
               
    result
end

def _reduce_314(val, _values, result)
                 result = self.lexer.lineno
               
    result
end

def _reduce_315(val, _values, result)
                 self.comments.push self.lexer.comments
                 yyerror("module definition in method body") if
                   self.in_def or self.in_single > 0

                 self.env.extend;
               
    result
end

def _reduce_316(val, _values, result)
                 line, path, body = val[1], val[2], val[4]
                 body = s(:scope, body).compact
                 result = s(:module, path, body)
                 result.line = line
                 result.comments = self.comments.pop
                 self.env.unextend;
               
    result
end

def _reduce_317(val, _values, result)
                 self.comments.push self.lexer.comments
                 self.in_def = true
                 self.env.extend
                 result = self.lexer.lineno
               
    result
end

def _reduce_318(val, _values, result)
 # TODO: refactor
                 line, name, args, body = val[2], val[1], val[3], val[4]
                 body ||= s(:nil)

                 body ||= s(:block)
                 body = s(:block, body) unless body.first == :block

                 result = s(:defn, name.to_sym, args, s(:scope, body))
                 result.line = line
                 result.comments = self.comments.pop

                 self.env.unextend
                 self.in_def = false
               
    result
end

def _reduce_319(val, _values, result)
                 self.comments.push self.lexer.comments
                 lexer.lex_state = :expr_fname
               
    result
end

def _reduce_320(val, _values, result)
                 self.in_single += 1
                 self.env.extend;
                 lexer.lex_state = :expr_end # force for args
               
    result
end

def _reduce_321(val, _values, result)
                 recv, name, args, body = val[1], val[4], val[6], val[7]
                 # recv, name, args, body = val[2], val[5], val[7], val[8]

                 body ||= s(:block)
                 body = s(:block, body) unless body.first == :block

                 result = s(:defs, recv, name.to_sym, args, s(:scope, body))
                 # result.line = val[1]
                 result.comments = self.comments.pop

                 self.env.unextend;
                 self.in_single -= 1
               
    result
end

def _reduce_322(val, _values, result)
                result = s(:break)
               
    result
end

def _reduce_323(val, _values, result)
                result = s(:next)
               
    result
end

def _reduce_324(val, _values, result)
                result = s(:redo)
               
    result
end

def _reduce_325(val, _values, result)
                result = s(:retry)
               
    result
end

def _reduce_326(val, _values, result)
                  result = value_expr(val[0])
                
    result
end

# reduce 327 omitted

# reduce 328 omitted

# reduce 329 omitted

# reduce 330 omitted

# reduce 331 omitted

# reduce 332 omitted

# reduce 333 omitted

# reduce 334 omitted

def _reduce_335(val, _values, result)
                  result = s(:if, val[1], val[3], val[4]);
              
    result
end

# reduce 336 omitted

def _reduce_337(val, _values, result)
                  result = val[1];
              
    result
end

# reduce 338 omitted

def _reduce_339(val, _values, result)
 val[0].delete_at 1 if val[0][1].nil? 
    result
end

# reduce 340 omitted

def _reduce_341(val, _values, result)
                  result = 0
              
    result
end

def _reduce_342(val, _values, result)
                  result = 0
                
    result
end

def _reduce_343(val, _values, result)
                  result = val[1];
              
    result
end

def _reduce_344(val, _values, result)
                  self.env.extend :dynamic
                
    result
end

def _reduce_345(val, _values, result)
 result = self.env.dynamic.keys 
    result
end

def _reduce_346(val, _values, result)
                  vars   = val[2]
                  body   = val[4]
                  result = new_iter nil, vars, body

                  self.env.unextend
                
    result
end

def _reduce_347(val, _values, result)
                raise SyntaxError, "Both block arg and actual block given." if
                  val[0] && val[0][0] == :blockpass

                result = val[1]
                result.insert 1, val[0]
              
    result
end

def _reduce_348(val, _values, result)
                  result = new_call val[0], val[2]
                  result << val[3] || s(:arglist)
              
    result
end

def _reduce_349(val, _values, result)
                  result = new_call val[0], val[2]
                  result << val[3] || s(:arglist)
              
    result
end

def _reduce_350(val, _values, result)
                  result = self.lexer.lineno
                
    result
end

def _reduce_351(val, _values, result)
                  result = new_call nil, val[0].to_sym, val[2]
                  result.line = val[1]
                
    result
end

def _reduce_352(val, _values, result)
                  result = new_call val[0], val[2].to_sym, val[3]
                
    result
end

def _reduce_353(val, _values, result)
                  result = new_call val[0], val[2].to_sym, val[3]
                
    result
end

def _reduce_354(val, _values, result)
                  result = new_call val[0], val[2].to_sym
                  result.minimize_line
                
    result
end

def _reduce_355(val, _values, result)
                  result = new_super val[1]
                  result.minimize_line
                
    result
end

def _reduce_356(val, _values, result)
                  result = s(:zsuper)
                
    result
end

def _reduce_357(val, _values, result)
                  self.env.extend :dynamic
                  result = self.lexer.lineno
                
    result
end

def _reduce_358(val, _values, result)
 result = self.env.dynamic.keys 
    result
end

def _reduce_359(val, _values, result)
 # REFACTOR
                  args   = val[2]
                  body   = val[4]
                  result = new_iter nil, args, body
                  self.env.unextend
                  result.line = val[1]
                
    result
end

def _reduce_360(val, _values, result)
                  self.env.extend :dynamic
                  result = self.lexer.lineno
                
    result
end

def _reduce_361(val, _values, result)
 result = self.env.dynamic.keys 
    result
end

def _reduce_362(val, _values, result)
                  args = val[2]
                  body = val[4]
                  result = new_iter nil, args, body
                  self.env.unextend
                  result.line = val[1]
                
    result
end

def _reduce_363(val, _values, result)
                 result = self.lexer.lineno
               
    result
end

def _reduce_364(val, _values, result)
                  result = s(:when, val[2], val[4])
                  result.line = val[1]
                  result << val[5] if val[5]
                
    result
end

# reduce 365 omitted

def _reduce_366(val, _values, result)
                  result = self.list_append(val[0], s(:when, val[3], nil))
                
    result
end

def _reduce_367(val, _values, result)
                  result = s(:array, s(:when, val[1], nil));
                
    result
end

# reduce 368 omitted

# reduce 369 omitted

def _reduce_370(val, _values, result)
                  klasses, var, body, rest = val[1], val[2], val[4], val[5]

                  klasses ||= s(:array)
                  klasses << node_assign(var, s(:gvar, :"$!")) if var

                  result = s(:resbody, klasses, body)
                  result << rest if rest # UGH, rewritten above
                 
    result
end

def _reduce_371(val, _values, result)
result = nil;
    result
end

def _reduce_372(val, _values, result)
                  result = s(:array, val[0]);
                 
    result
end

# reduce 373 omitted

# reduce 374 omitted

def _reduce_375(val, _values, result)
                  result = val[1];
                 
    result
end

# reduce 376 omitted

def _reduce_377(val, _values, result)
                  if (val[1] != nil) then
                      result = val[1];
                  else
                      result = s(:nil)
                  end
                 
    result
end

# reduce 378 omitted

def _reduce_379(val, _values, result)
 result = s(:lit, val[0]) 
    result
end

def _reduce_380(val, _values, result)
 result = s(:lit, val[0]) 
    result
end

# reduce 381 omitted

def _reduce_382(val, _values, result)
                  val[0] = s(:dstr, val[0].value) if val[0][0] == :evstr
                  result = val[0];
                
    result
end

# reduce 383 omitted

def _reduce_384(val, _values, result)
                  result = self.literal_concat(val[0], val[1]);
                
    result
end

def _reduce_385(val, _values, result)
                  result = val[1]
                 
    result
end

def _reduce_386(val, _values, result)
 result = s(:str, val[0]) 
    result
end

def _reduce_387(val, _values, result)
                  node = val[1]

                  unless node then
                    node = s(:xstr, '')
                  else
                    case node[0]
                    when :str
                      node[0] = :xstr
                    when :dstr
                      node[0] = :dxstr
                    else
                      node = s(:dxstr, '', node)
                    end
                  end

                  result = node
                
    result
end

def _reduce_388(val, _values, result)
                  node = val[1] || s(:str, '')
                  options = val[2]

                  o, k = 0, nil
                  options.split(//).each do |c| # FIX: this has a better home
                    v = {
                         'x' => Regexp::EXTENDED,
                         'i' => Regexp::IGNORECASE,
                         'm' => Regexp::MULTILINE,
                         'o' => Regexp::ONCE,
                         'n' => Regexp::ENC_NONE,
                         'e' => Regexp::ENC_EUC,
                         's' => Regexp::ENC_SJIS,
                         'u' => Regexp::ENC_UTF8,
                         }[c]
                    raise "unknown regexp option: #{c}" unless v
                    o += v
                    k = c if c =~ /[esu]/
                  end

                  case node[0]
                  when :str then
                    node[0] = :lit
                    node[1] = if k then
                                Regexp.new(node[1], o, k)
                              else
                                Regexp.new(node[1], o)
                              end
                  when :dstr then
                    if options =~ /o/ then
                      node[0] = :dregx_once
                    else
                      node[0] = :dregx
                    end
                    node << o if o and o != 0
                  else
                    node = s(:dregx, '', node);
                    node[0] = :dregx_once if options =~ /o/
                    node << o if o and o != 0
                  end

                  result = node
                 
    result
end

def _reduce_389(val, _values, result)
                   result = s(:array);
                 
    result
end

def _reduce_390(val, _values, result)
                 result = val[1];
                 
    result
end

def _reduce_391(val, _values, result)
                   result = s(:array)
                 
    result
end

def _reduce_392(val, _values, result)
                   word = val[1][0] == :evstr ? s(:dstr, '', val[1]) : val[1]
                   result = val[0] << word
                 
    result
end

# reduce 393 omitted

def _reduce_394(val, _values, result)
                   result = self.literal_concat(val[0], val[1]);
                 
    result
end

def _reduce_395(val, _values, result)
                   result = s(:array)
                 
    result
end

def _reduce_396(val, _values, result)
                   result = val[1]
                 
    result
end

def _reduce_397(val, _values, result)
                   result = s(:array)
                 
    result
end

def _reduce_398(val, _values, result)
                   result = val[0] << s(:str, val[1])
                 
    result
end

def _reduce_399(val, _values, result)
 result = s(:str, "") 
    result
end

def _reduce_400(val, _values, result)
                     result = literal_concat(val[0], val[1])
                   
    result
end

def _reduce_401(val, _values, result)
 result = nil 
    result
end

def _reduce_402(val, _values, result)
                    result = literal_concat(val[0], val[1])
                  
    result
end

def _reduce_403(val, _values, result)
 result = s(:str, val[0]) 
    result
end

def _reduce_404(val, _values, result)
                   result = lexer.lex_strterm;
                   lexer.lex_strterm = nil
                   lexer.lex_state = :expr_beg
                 
    result
end

def _reduce_405(val, _values, result)
                   lexer.lex_strterm = val[1]
                   result = s(:evstr, val[2]);
                   
    result
end

def _reduce_406(val, _values, result)
                   result = lexer.lex_strterm;
                   lexer.lex_strterm = nil
                   lexer.lex_state = :expr_beg
                   lexer.cond.push false
                   lexer.cmdarg.push false
                 
    result
end

def _reduce_407(val, _values, result)
                   lexer.lex_strterm = val[1]
                   lexer.cond.lexpop
                   lexer.cmdarg.lexpop

                   case val[2]
                   when Sexp then
                     case val[2][0]
                     when :str, :dstr, :evstr then
                       result = val[2]
                     else
                       result = s(:evstr, val[2])
                     end
                   when nil then
                     result = s(:evstr)
                   else
                     raise "unknown rescue body: #{val[2].inspect}"
                   end
                 
    result
end

def _reduce_408(val, _values, result)
                   result = s(:gvar, val[0].to_sym);
                 
    result
end

def _reduce_409(val, _values, result)
                   result = s(:ivar, val[0].to_sym);
                 
    result
end

def _reduce_410(val, _values, result)
                   result = s(:cvar, val[0].to_sym);
                 
    result
end

# reduce 411 omitted

def _reduce_412(val, _values, result)
                   lexer.lex_state = :expr_end
                   result = val[1].to_sym
                 
    result
end

# reduce 413 omitted

# reduce 414 omitted

# reduce 415 omitted

# reduce 416 omitted

def _reduce_417(val, _values, result)
                   lexer.lex_state = :expr_end
                   result = val[1]

                   yyerror("empty symbol literal") if result.nil? or result.empty?

                   case result[0]
                   when :dstr then
                     result[0] = :dsym
                   when :str then
                     result = s(:lit, result.last.intern)
                   else
                     result = s(:dsym, '', result)
                   end

                 
    result
end

# reduce 418 omitted

# reduce 419 omitted

def _reduce_420(val, _values, result)
                 result = -val[1] # TODO: pt_testcase
               
    result
end

def _reduce_421(val, _values, result)
                 result = -val[1] # TODO: pt_testcase
               
    result
end

# reduce 422 omitted

# reduce 423 omitted

# reduce 424 omitted

# reduce 425 omitted

# reduce 426 omitted

def _reduce_427(val, _values, result)
                 result = :nil
               
    result
end

def _reduce_428(val, _values, result)
                 result = :self
               
    result
end

def _reduce_429(val, _values, result)
                 result = :true
               
    result
end

def _reduce_430(val, _values, result)
                 result = :false
               
    result
end

def _reduce_431(val, _values, result)
                 result = :"__FILE__"
               
    result
end

def _reduce_432(val, _values, result)
                 result = :"__LINE__"
               
    result
end

def _reduce_433(val, _values, result)
                   result = self.gettable(val[0])
                 
    result
end

def _reduce_434(val, _values, result)
                   result = self.assignable(val[0]);
                 
    result
end

def _reduce_435(val, _values, result)
 result = s(:nth_ref, val[0]) 
    result
end

def _reduce_436(val, _values, result)
 result = s(:back_ref, val[0]) 
    result
end

def _reduce_437(val, _values, result)
                 result = nil
               
    result
end

def _reduce_438(val, _values, result)
                 lexer.lex_state = :expr_beg
               
    result
end

def _reduce_439(val, _values, result)
                 result = val[2];
               
    result
end

def _reduce_440(val, _values, result)
                 yyerrok;
                 result = nil;
               
    result
end

def _reduce_441(val, _values, result)
                   result = val[1];
                   lexer.lex_state = :expr_beg
                 
    result
end

def _reduce_442(val, _values, result)
                   result = val[0];
                 
    result
end

def _reduce_443(val, _values, result)
                 result = args val[0], val[2], val[4], val[5]
               
    result
end

def _reduce_444(val, _values, result)
                 result = args val[0], val[2],    nil, val[3]
               
    result
end

def _reduce_445(val, _values, result)
                 result = args val[0],    nil, val[2], val[3]
               
    result
end

def _reduce_446(val, _values, result)
                 result = args val[0],    nil,    nil, val[1]
               
    result
end

def _reduce_447(val, _values, result)
                 result = args    nil, val[0], val[2], val[3]
               
    result
end

def _reduce_448(val, _values, result)
                 result = args    nil, val[0],    nil, val[1]
               
    result
end

def _reduce_449(val, _values, result)
                 result = args    nil,    nil, val[0], val[1]
               
    result
end

def _reduce_450(val, _values, result)
                 result = args    nil,    nil,    nil, val[0]
               
    result
end

def _reduce_451(val, _values, result)
                 result = args    nil,    nil,    nil,    nil
               
    result
end

def _reduce_452(val, _values, result)
                 yyerror "formal argument cannot be a constant: #{val[0]}"
               
    result
end

def _reduce_453(val, _values, result)
                 yyerror("formal argument cannot be an instance variable");
               
    result
end

def _reduce_454(val, _values, result)
                 yyerror("formal argument cannot be a class variable");
               
    result
end

def _reduce_455(val, _values, result)
                 identifier = val[0].to_sym
                 self.env[identifier] = :lvar

                 result = val[0];
               
    result
end

def _reduce_456(val, _values, result)
                   result = s(:args)
                   result << val[0].to_sym
                 
    result
end

def _reduce_457(val, _values, result)
                   val[0] << val[2].to_sym
                   result = val[0]
                 
    result
end

def _reduce_458(val, _values, result)
                   result = self.assignable(val[0], val[2]);
                   # TODO: detect duplicate names
                 
    result
end

def _reduce_459(val, _values, result)
                 result = s(:block, val[0])
               
    result
end

def _reduce_460(val, _values, result)
                 result = self.append_to_block(val[0], val[2]);
               
    result
end

# reduce 461 omitted

# reduce 462 omitted

def _reduce_463(val, _values, result)
 # TODO: differs from parse.y - needs tests
                  name = val[1].to_sym
                  self.assignable(name)
                  result = :"*#{name}"
                
    result
end

def _reduce_464(val, _values, result)
                 name = :"*"
                 self.env[name] = :lvar
                 result = name
               
    result
end

# reduce 465 omitted

# reduce 466 omitted

def _reduce_467(val, _values, result)
                  identifier = val[1].to_sym

                  self.env[identifier] = :lvar
                  result = s(:block_arg, identifier.to_sym)
                 
    result
end

def _reduce_468(val, _values, result)
                  result = val[1];
                 
    result
end

def _reduce_469(val, _values, result)
                 result = nil;
                 
    result
end

# reduce 470 omitted

def _reduce_471(val, _values, result)
                 lexer.lex_state = :expr_beg
               
    result
end

def _reduce_472(val, _values, result)
                 if (val[2].instanceof ILiteralNode) then
                    yyerror("Can't define single method for literals.");
                 end
                 result = val[2];
               
    result
end

def _reduce_473(val, _values, result)
 #  [!nil]
                  result = s(:array)
                 
    result
end

def _reduce_474(val, _values, result)
 #  [!nil]
                  result = val[0];
                 
    result
end

def _reduce_475(val, _values, result)
                  size = val[0].size
                  if (size % 2 != 1) then # != 1 because of leading :array
                    yyerror("Odd number (#{size}) list for Hash. #{val[0].inspect}");
                  end
                  result = val[0];
                 
    result
end

# reduce 476 omitted

def _reduce_477(val, _values, result)
                  list = val[0].dup
                  more = val[2][1..-1]
                  list.push(*more) unless more.empty?
                  result = list
                
    result
end

def _reduce_478(val, _values, result)
                  result = s(:array, val[0], val[2])
                
    result
end

# reduce 479 omitted

# reduce 480 omitted

# reduce 481 omitted

# reduce 482 omitted

# reduce 483 omitted

# reduce 484 omitted

# reduce 485 omitted

# reduce 486 omitted

# reduce 487 omitted

# reduce 488 omitted

# reduce 489 omitted

# reduce 490 omitted

# reduce 491 omitted

# reduce 492 omitted

# reduce 493 omitted

# reduce 494 omitted

# reduce 495 omitted

# reduce 496 omitted

# reduce 497 omitted

def _reduce_498(val, _values, result)
 yyerrok 
    result
end

# reduce 499 omitted

# reduce 500 omitted

def _reduce_501(val, _values, result)
 yyerrok 
    result
end

def _reduce_502(val, _values, result)
 result = nil 
    result
end

def _reduce_503(val, _values, result)
 result = nil 
    result
end

def _reduce_none(val, _values, result)
  val[0]
end

end   # class RubyParser
