############################################################
# This file is imported from a different project.
# DO NOT make modifications in this repo.
# File a patch instead and assign it to Ryan Davis
############################################################

#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.5
# from Racc grammer file "".
#

require 'racc/parser.rb'
class RubyParser < Racc::Parser


require 'ruby_lexer'

# Local Variables: **
# racc-token-length-max:14 **
# End: **
##### State transition tables begin ###

clist = [
'-503,357,-87,600,261,262,409,-503,-503,-503,482,-435,-503,-503,-503',
'122,-503,122,122,261,262,399,-280,652,652,552,-503,-64,3,-280,651,651',
'563,738,-484,-503,-503,563,-503,-503,-503,-503,-503,598,426,378,379',
'599,-86,-432,357,424,-83,358,786,-75,-432,-89,510,-83,511,359,361,89',
'700,564,-87,-72,410,-79,564,34,745,575,-280,-503,482,-274,266,266,-350',
'738,-503,523,-274,-274,-274,321,-503,-274,-274,-274,299,-274,482,-84',
'425,482,123,266,123,123,563,-274,-274,601,-85,299,482,-503,359,361,-274',
'-274,-87,-274,-274,-274,-274,-274,-87,-87,484,-483,-503,-85,271,273',
'271,273,-503,-503,271,273,673,564,673,514,-89,511,-83,-274,-274,-274',
'-274,-274,-274,-274,-274,-274,-274,-274,-274,-274,-274,749,738,-274',
'-274,-274,-86,-81,-274,-75,673,-274,-86,-86,-274,563,-274,521,-274,523',
'-274,752,-274,-274,-274,-274,-274,-274,-274,-280,-274,732,-274,-85,484',
'-87,-280,-280,-280,731,271,273,-280,-280,755,-280,-274,-274,564,729',
'-274,-274,484,-274,-274,484,-77,738,271,273,-90,271,273,759,-280,-280',
'484,-280,-280,-280,-280,-280,271,273,-86,801,728,-88,671,725,671,-77',
'-84,-85,271,273,271,273,724,-85,-85,271,273,-280,-280,-280,-280,-280',
'-280,-280,-280,-280,-280,-280,-280,-280,-280,357,671,-280,-280,-280',
'-433,545,271,273,-87,-280,764,-433,618,620,621,625,-280,-79,-280,721',
'-280,-280,-280,-280,-280,-280,-280,-503,-280,-483,-280,-79,-484,-90',
'-503,-503,-503,-77,-435,-503,-503,-503,768,-503,-280,357,-88,-86,-280',
'-80,-88,-280,-280,-503,-77,-84,-82,263,264,359,361,536,-503,-503,357',
'-503,-503,-503,-503,-503,-78,357,771,-80,-77,596,399,-77,-76,-83,326',
'-79,594,-282,-426,423,131,325,-281,398,-282,-426,422,707,873,-281,711',
'433,-79,-487,399,871,-503,-487,432,359,361,392,706,-503,-487,-487,-487',
'103,321,-503,-487,-487,-79,-487,101,-79,551,452,359,361,525,595,-487',
'704,-90,359,361,531,-85,-282,-503,395,-487,-487,-281,-487,-487,-487',
'-487,-487,872,-280,-431,-487,701,-503,708,-428,-280,-431,-487,-503,-503',
'-484,-428,-483,321,-85,-89,102,-77,-487,-487,-487,-487,-487,-487,-487',
'-487,-487,-487,-487,-487,-487,-487,777,-487,-487,-487,-487,692,544,-281',
'-326,-273,-487,527,-87,511,-281,-326,-273,-487,-280,-487,-487,-487,-487',
'-487,-487,-487,-487,-487,779,-487,-487,-487,514,-429,511,-273,-281,-423',
'321,-434,-429,396,-273,-281,-423,-487,-434,-86,394,-487,-78,588,-487',
'-487,18,22,26,31,37,-281,-326,-273,53,63,261,262,384,82,-480,91,95,6',
'11,17,23,27,384,-487,-261,155,51,56,60,64,69,73,77,-273,-281,97,523',
'-434,686,395,668,29,39,44,47,48,52,59,67,70,74,78,83,88,92,-280,9,15',
'299,25,30,36,-280,-434,-423,376,-90,-484,-282,-82,-434,-423,374,-487',
'588,-282,-480,271,273,-84,-487,43,-76,665,54,-483,588,72,76,295,87,-430',
'96,277,280,266,20,-480,-430,801,271,273,261,262,61,654,-487,-280,266',
'84,89,93,4,10,16,-434,-423,375,34,40,-282,452,18,22,26,-487,37,791,440',
'451,53,63,438,439,303,82,-481,91,95,6,11,17,23,27,618,620,621,625,51',
'56,60,64,69,73,77,649,299,97,648,299,271,273,-89,794,39,-81,647,48,52',
'59,67,70,74,78,83,88,92,-72,9,15,646,25,30,36,643,299,-426,295,749,738',
'295,277,280,-426,277,280,283,286,-481,621,625,284,287,136,261,262,139',
'261,262,72,76,804,87,271,273,266,295,806,20,-481,277,280,283,286,678',
'679,61,681,88,92,299,84,89,93,4,10,16,809,-426,811,34,40,-261,299,-484',
'-484,-484,299,-484,746,271,273,-484,-484,299,816,321,-484,321,-484,-484',
'-484,-484,-484,-484,-484,303,299,818,638,-484,-484,-484,-484,-484,-484',
'-484,637,295,-262,609,592,277,280,283,286,-484,822,588,-484,-484,-484',
'-484,-484,-484,-484,-484,-484,-484,449,-484,-484,546,-484,-484,-484',
'314,315,316,317,318,314,315,316,317,318,314,315,316,317,318,321,528',
'828,829,-484,545,831,-484,-484,451,-484,-484,834,-484,266,-484,507,-484',
'487,-484,616,486,839,622,627,629,-63,-484,842,732,729,732,-484,-484',
'-484,-484,-484,-484,845,453,445,-484,-484,-483,-483,-483,-88,-483,444',
'853,441,-483,-483,855,299,428,-483,858,-483,-483,-483,-483,-483,-483',
'-483,618,620,621,625,-483,-483,-483,-483,-483,-483,-483,859,427,861',
'411,588,408,588,664,405,-483,404,401,-483,-483,-483,-483,-483,-483,-483',
'-483,-483,-483,400,-483,-483,399,-483,-483,-483,299,300,276,279,282',
'285,288,290,292,294,296,393,301,278,384,874,284,287,321,-483,705,321',
'-483,-483,313,-483,-483,381,-483,881,-483,295,-483,298,-483,277,280',
'283,286,289,291,293,-483,297,266,884,377,-483,-483,-483,-483,-483,-483',
'886,887,732,-483,-483,353,281,350,-86,14,18,22,26,31,37,334,303,637',
'53,63,302,588,274,82,588,91,95,6,11,17,23,27,266,166,899,153,51,56,60',
'64,69,73,77,150,128,97,98,588,,,,29,39,44,47,48,52,59,67,70,74,78,83',
'88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,43,,,54,,,72,76,,87,,96,,,',
'20,,616,,,622,627,629,61,,,,,84,89,93,4,10,16,,,,34,40,14,18,22,26,31',
'37,,,,53,63,,,,82,,91,95,6,11,17,23,27,618,620,621,625,51,56,60,64,69',
'73,77,,,97,,,,,,29,39,44,47,48,52,59,67,70,74,78,83,88,92,,9,15,,25',
'30,36,299,-505,-505,-505,-505,285,288,,,-505,-505,,,,,,284,287,,43,',
',54,,,72,76,,87,,96,295,,298,20,277,280,283,286,289,291,293,61,297,',
',,84,89,93,4,10,16,,,,34,40,14,18,22,26,31,37,,,,53,63,,,,82,,91,95',
'6,11,17,23,27,,,,,51,56,60,64,69,73,77,,,97,,,,,,29,39,44,47,48,52,59',
'67,70,74,78,83,88,92,,9,15,,25,30,36,299,-505,-505,-505,-505,285,288',
',,-505,-505,,,,,,284,287,,43,,,54,,,72,76,,87,,96,295,,298,20,277,280',
'283,286,289,291,293,61,297,,,,84,89,93,4,10,16,,,,34,40,14,18,22,26',
'31,37,,,,53,63,,,,82,,91,95,6,11,17,23,27,,,,,51,56,60,64,69,73,77,',
',97,,,,,,29,39,44,47,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,299',
'-505,-505,-505,-505,285,288,,,-505,-505,,,,,,284,287,,43,,,54,,,72,76',
',87,,96,295,,298,20,277,280,283,286,289,291,293,61,297,,,,84,89,93,4',
'10,16,,,,34,40,14,18,22,26,31,37,,,,53,63,,,,82,,91,95,6,11,17,23,27',
',,,,51,56,60,64,69,73,77,,,97,,,,,,29,39,44,47,48,52,59,67,70,74,78',
'83,88,92,,9,15,,25,30,36,299,,,,,,,,,,,,,,,,284,287,,43,,,54,,,72,76',
',87,,96,295,,298,20,277,280,283,286,,,293,61,297,,,,84,89,93,4,10,16',
',,,34,40,14,18,22,26,31,37,,,,53,63,,,,82,,91,95,6,11,17,23,27,,,,,51',
'56,60,64,69,73,77,,,97,,,,,,29,39,44,47,48,52,59,67,70,74,78,83,88,92',
',9,15,,25,30,36,299,,,,,,,,,,,,,,,,284,287,,43,,,54,,,72,76,,87,,96',
'295,,298,20,277,280,283,286,,,293,61,297,,,,84,89,93,4,10,16,,,,34,40',
'14,18,22,26,31,37,,,,53,63,,,,82,,91,95,6,11,17,23,27,,,,,51,56,60,64',
'69,73,77,,,97,,,,,,29,39,44,47,48,52,59,67,70,74,78,83,88,92,,9,15,',
'25,30,36,299,300,276,279,282,285,288,290,292,294,296,,-505,-505,,,284',
'287,,43,,,54,,,72,76,,87,,96,295,,298,20,277,280,283,286,289,291,293',
'61,297,,,,84,89,93,4,10,16,,,,34,40,14,18,22,26,31,37,,,,53,63,,,,82',
',91,95,6,11,17,23,27,,,,,51,56,60,64,69,73,77,,,97,,,,,,29,39,44,47',
'48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,299,-505,-505,-505,-505',
'285,288,,,-505,-505,,,,,,284,287,,43,,,311,,,72,76,,87,,96,295,,298',
'20,277,280,283,286,289,291,293,61,297,,,,84,89,93,4,10,16,,,,34,40,14',
'18,22,26,31,37,,,,53,63,,,,82,,91,95,6,11,17,23,27,,,,,51,56,60,64,69',
'73,77,,,97,,,,,,29,39,44,47,48,52,59,67,70,74,78,83,88,92,,9,15,,25',
'30,36,299,300,276,279,282,285,288,,,294,296,,,,,,284,287,,43,,,54,,',
'72,76,,87,,96,295,,298,20,277,280,283,286,289,291,293,61,297,,,,84,89',
'93,4,10,16,,,,34,40,14,18,22,26,31,37,,,,53,63,,,,82,,91,95,6,11,17',
'23,27,,,,,51,56,60,64,69,73,77,,,97,,,,,,29,39,44,47,48,52,59,67,70',
'74,78,83,88,92,,9,15,,25,30,36,299,-505,-505,-505,-505,285,288,,,-505',
'-505,,,,,,284,287,,43,,,54,,,72,76,,87,,96,295,,298,20,277,280,283,286',
'289,291,293,61,297,,,,84,89,93,4,10,16,,,,34,40,14,18,22,26,31,37,,',
',53,63,,,,82,,91,95,6,11,17,23,27,,,,,51,56,60,64,69,73,77,,,97,,,,',
',29,39,44,47,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,299,,,,,',
',,,,,,,,,,284,287,,43,,,54,,,72,76,,87,,96,295,,298,20,277,280,283,286',
',,293,61,297,,,,84,89,93,4,10,16,,,,34,40,14,18,22,26,31,37,,,,53,63',
',,,82,,91,95,6,11,17,23,27,,,,,51,56,60,64,69,73,77,,,97,,,,,,29,39',
'44,47,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,299,-505,-505,-505',
'-505,285,288,,,-505,-505,,,,,,284,287,,43,,,54,,,72,76,,87,,96,295,',
'298,20,277,280,283,286,289,291,293,61,297,,,,84,89,93,4,10,16,,,,34',
'40,14,18,22,26,31,37,,,,53,63,,,,82,,91,95,6,11,17,23,27,,,,,51,56,60',
'64,69,73,77,,,97,,,,,,29,39,44,47,48,52,59,67,70,74,78,83,88,92,,9,15',
',25,30,36,299,,,,,,,,,,,,,,,,284,287,,43,,,54,,,72,76,,87,,96,295,,298',
'20,277,280,283,286,,,293,61,297,,,,84,89,93,4,10,16,,,,34,40,14,18,22',
'26,31,37,,,,53,63,,,,82,,91,95,6,11,17,23,27,,,,,51,56,60,64,69,73,77',
',,97,,,,,,29,39,44,47,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36',
'299,300,276,279,282,285,288,290,,294,296,,,,,,284,287,,43,,,54,,,72',
'76,,87,,96,295,,298,20,277,280,283,286,289,291,293,61,297,,,,84,89,93',
'4,10,16,,,,34,40,14,18,22,26,31,37,,,,53,63,,,,82,,91,95,6,11,17,23',
'27,,,,,51,56,60,64,69,73,77,,,97,,,,,,29,39,44,47,48,52,59,67,70,74',
'78,83,88,92,,9,15,,25,30,36,299,300,276,279,282,285,288,290,292,294',
'296,,-505,-505,,,284,287,,43,,,54,,,72,76,,87,,96,295,,298,20,277,280',
'283,286,289,291,293,61,297,,,,84,89,93,4,10,16,,,,34,40,14,18,22,26',
'31,37,,,,53,63,,,,82,,91,95,6,11,17,23,27,,,,,51,56,60,64,69,73,77,',
',97,,,,,,29,39,44,47,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,299',
',,,,,,,,,,,,,,,284,287,,43,,,54,,,72,76,,87,,96,295,,298,20,277,280',
'283,286,,,,61,,,,,84,89,93,4,10,16,,,,34,40,14,18,22,26,31,37,,,,53',
'63,,,,82,,91,95,6,11,17,23,27,,,,,51,56,60,64,69,73,77,,,97,,,,,,29',
'39,44,47,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,299,,,,,,,,,',
',,,,,,284,287,,43,,,54,,,72,76,,87,,96,295,,298,20,277,280,283,286,',
',,61,,,,,84,89,93,4,10,16,,,,34,40,14,18,22,26,31,37,,,,53,63,,,,82',
',91,95,6,11,17,23,27,,,,,51,56,60,64,69,73,77,,,97,,,,,,29,39,44,47',
'48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,43',
',,311,,,72,76,,87,,96,,,,20,,,,,,,,61,,,,,84,89,93,4,10,16,,,,34,40',
'14,18,22,26,31,37,,,,53,63,,,,82,,91,95,6,11,17,23,27,,,,,51,56,60,64',
'69,73,77,,,97,,,,,,29,39,44,47,48,52,59,67,70,74,78,83,88,92,,9,15,',
'25,30,36,,,,,,,,,,,,,,,,,,,,43,,,54,,,72,76,,87,,96,,,,20,,,,,,,,61',
',,,,84,89,93,4,10,16,,,,34,40,14,18,22,26,31,37,,,,53,63,,,,82,,91,95',
'6,11,17,23,27,,,,,51,56,60,64,69,73,77,,,97,,,,,,29,39,44,47,48,52,59',
'67,70,74,78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,43,,,54,,,72',
'76,,87,,96,,,,20,,,,,,,,61,,,,,84,89,93,4,10,16,,,,34,40,14,18,22,26',
'31,37,,,,53,63,,,,82,,91,95,6,11,17,23,27,,,,,51,56,60,64,69,73,77,',
',97,,,,,,29,39,44,47,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,',
',,,,,,,,,,,,,,,,,,43,,,54,,,72,76,,87,,96,,,,20,,,,,,,,61,,,,,84,89',
'93,4,10,16,,,,34,40,14,18,22,26,31,37,,,,53,63,,,,82,,91,95,6,11,17',
'23,27,,,,,51,56,60,64,69,73,77,,,97,,,,,,29,39,44,47,48,52,59,67,70',
'74,78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,43,,,54,,,72,76,,87',
',96,,,,20,,,,,,,,61,,,,,84,89,93,4,10,16,,,,34,40,14,18,22,26,31,37',
',,,53,63,,,,82,,91,95,6,11,17,23,27,,,,,51,56,60,64,69,73,77,,,97,,',
',,,29,39,44,47,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,,,,,,',
',,,,,,,,,,,,43,,,54,,,72,76,,87,,96,,,,20,,,,,,,,61,,,,,84,89,93,4,10',
'16,,,,34,40,14,18,22,26,31,37,,,,53,63,,,,82,,91,95,6,11,17,23,27,,',
',,51,56,60,64,69,73,77,,,97,,,,,,29,39,44,47,48,52,59,67,70,74,78,83',
'88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,43,,,54,,,72,76,,87,,96,,,',
'20,,,,,,,,61,,,,,84,89,93,4,10,16,,,,34,40,14,18,22,26,31,37,,,,53,63',
',,,82,,91,95,6,11,17,23,27,,,,,51,56,60,64,69,73,77,,,97,,,,,,29,39',
'44,47,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,',
',,,43,,,311,,,72,76,,87,,96,,,,20,,,,,,,,61,,,,,84,89,93,4,10,16,,,',
'34,40,14,18,22,26,31,37,,,,53,63,,,,82,,91,95,6,11,17,23,27,,,,,51,56',
'60,64,69,73,77,,,97,,,,,,29,39,44,47,48,52,59,67,70,74,78,83,88,92,',
'9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,43,,,54,,,72,76,,87,,96,,,,20,,,,',
',,,61,,,,,84,89,93,4,10,16,,,,34,40,14,18,22,26,31,37,,,,53,63,,,,82',
',91,95,6,11,17,23,27,,,,,51,56,60,64,69,73,77,,,97,,,,,,29,39,44,47',
'48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,43',
',,54,,,72,76,,87,,96,,,,20,,,,,,,,61,,,,,84,89,93,4,10,16,,,,34,40,14',
'18,22,26,31,37,,,,53,63,,,,82,,91,95,6,11,17,23,27,,,,,51,56,60,64,69',
'73,77,,,97,,,,,,29,39,44,47,48,52,59,67,70,74,78,83,88,92,,9,15,,25',
'30,36,,,,,,,,,,,,,,,,,,,,43,,,54,,,72,76,,87,,96,,,,20,,,,,,,,61,,,',
',84,89,93,4,10,16,,,,34,40,14,18,22,26,31,37,,,,53,63,,,,82,,91,95,6',
'11,17,23,27,,,,,51,56,60,64,69,73,77,,,97,,,,,,29,39,44,47,48,52,59',
'67,70,74,78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,43,,,54,,,72',
'76,,87,,96,,,,20,,,,,,,,61,,,,,84,89,93,4,10,16,,,,34,40,18,22,26,,37',
',,,53,63,,,,82,,91,95,6,11,17,23,27,,,,,51,56,60,64,69,73,77,,,97,,',
',,,,39,,,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,',
',,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,61,,,,,84,89,93,4,10,16,',
',,34,40,18,22,26,,37,,,,53,63,,,,82,,91,95,6,11,17,23,27,,,,,51,56,60',
'64,69,73,77,,,97,,,,,,,39,,,48,52,59,67,70,74,78,83,88,92,,9,15,,25',
'30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,61,,,',
',84,89,93,4,10,16,,,,34,40,-251,-251,-251,,-251,,,,-251,-251,,,,-251',
',-251,-251,-251,-251,-251,-251,-251,,,,,-251,-251,-251,-251,-251,-251',
'-251,,,,,,,,,,-251,,,-251,-251,-251,-251,-251,-251,-251,-251,-251,-251',
',-251,-251,,-251,-251,-251,,,,,,,,,,,,,,,,,,,,-251,,,-251,321,,-251',
'-251,,-251,,-251,,-251,,-251,,,,,,,,-251,,,,,-251,-251,-251,-251,-251',
'-251,,,,-251,-251,-480,-480,-480,,-480,,,,-480,-480,,,,-480,,-480,-480',
'-480,-480,-480,-480,-480,,-480,,,-480,-480,-480,-480,-480,-480,-480',
',,,,,,,,,-480,,,-480,-480,-480,-480,-480,-480,-480,-480,-480,-480,,-480',
'-480,,-480,-480,-480,,,,,,,,,,,,,,,,,,,,-480,,,-480,-480,,-480,-480',
',-480,,-480,,-480,,-480,,,,,,,,-480,,-480,,,-480,-480,-480,-480,-480',
'-480,,,,-480,-480,18,22,26,,37,,,,53,63,,,,82,,91,95,6,11,17,23,27,',
',,,51,56,60,64,69,73,77,,,97,,,,,,,39,,,48,52,59,67,70,74,78,83,88,92',
',9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,',
',,,,61,,,,,84,89,93,4,10,16,,,,34,40,18,22,26,,37,,,,53,63,,,,82,,91',
'95,6,106,107,23,27,,,,,114,56,60,64,69,73,77,,,,,,,,,,39,,,48,52,59',
'67,70,74,78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,',
'72,76,,87,,332,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,34,40,-481,-481',
'-481,,-481,,,,-481,-481,,,,-481,,-481,-481,-481,-481,-481,-481,-481',
',-481,,,-481,-481,-481,-481,-481,-481,-481,,,,,,,,,,-481,,,-481,-481',
'-481,-481,-481,-481,-481,-481,-481,-481,,-481,-481,,-481,-481,-481,',
',,,,,,,,,,,,,,,,,,-481,,,-481,-481,,-481,-481,,-481,,-481,,-481,,-481',
',,,,,,,-481,,-481,,,-481,-481,-481,-481,-481,-481,,,,-481,-481,18,22',
'26,,37,,,,53,63,,,,82,,91,95,6,106,107,23,27,,,,,114,56,60,64,69,73',
'77,,,,,,,,,,39,,,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,,,,',
',,,,,,,,,,,,,,136,,,139,,,72,76,,87,,332,,,,20,,,,,,,,141,,,,,84,89',
'93,4,10,16,,,,34,40,18,22,26,,37,,,,53,63,,,,82,,91,95,6,106,107,23',
'27,,,,,114,115,116,64,69,73,77,,,,,,,,,,39,,,48,52,59,67,70,74,78,83',
'88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,520',
',,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,34,40,18,22,26,,37,,,,53,63',
',,,82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,,,39',
',,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136',
',,139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,34,40,18',
'22,26,,37,,,,53,63,,,,82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69',
'73,77,,,,,,,,,,39,,,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,',
',,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89',
'93,4,10,16,,,,34,40,18,22,26,,37,,,,53,63,,,,82,,91,95,6,106,107,23',
'27,,,,,114,115,116,64,69,73,77,,,,,,,,,,39,,,48,52,59,67,70,74,78,83',
'88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,',
'20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,34,40,18,22,26,,37,,,,53,63,,',
',82,,91,95,6,106,107,23,27,,,,,114,56,60,64,69,73,77,,,,,,,,,,39,,,48',
'52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136,,',
'139,,,72,76,,87,,332,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,34,40',
'18,22,26,,37,,,,53,63,,,,82,,91,95,6,106,107,23,27,,,,,114,115,116,64',
'69,73,77,,,,,,,,,,112,,,48,52,59,67,70,74,78,83,88,92,616,9,15,622,627',
'629,110,,,,,,,,,,,,,,,,,,,,113,,,54,,,72,76,,87,,96,630,,,,,,,618,620',
'621,625,,,,,,84,89,93,4,10,16,,,,34,40,18,22,26,,37,,,,53,63,,,,82,',
'91,95,6,106,107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,,,112,,,48',
'52,59,67,70,74,78,83,88,92,616,9,15,622,627,629,110,,,,,,,,,,,,,,,,',
',,,162,,,139,,,72,76,,87,,,630,,,,,,,618,620,621,625,,,,,,84,89,93,4',
'10,16,,,,34,40,18,22,26,,37,,,,53,63,,,,82,,91,95,6,11,17,23,27,,,,',
'51,56,60,64,69,73,77,,,97,,,,,,,39,,,48,52,59,67,70,74,78,83,88,92,',
'9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,',
',,,61,,,,,84,89,93,4,10,16,,,,34,40,18,22,26,,37,,,,53,63,,,,82,,91',
'95,6,11,17,23,27,,,,,51,56,60,64,69,73,77,,,97,,,,,,,39,,,48,52,59,67',
'70,74,78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72',
'76,,87,,,,,,20,,,,,,,,61,,,,,84,89,93,4,10,16,,,,34,40,18,22,26,,37',
',,,53,63,,,,82,,91,95,6,11,17,23,27,,,,,51,56,60,64,69,73,77,,,97,,',
',,,,39,,,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,',
',,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,61,,,,,84,89,93,4,10,16,',
',,34,40,18,22,26,,37,,,,53,63,,,,82,,91,95,6,106,107,23,27,,,,,114,56',
'60,64,69,73,77,,,,,,,,,,39,,,48,52,59,67,70,74,78,83,88,92,,9,15,,25',
'30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,332,,,,20,,,,,,,,141',
',,,,84,89,93,4,10,16,,,,34,40,18,22,26,,37,,,,53,63,,,,82,,91,95,6,106',
'107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,,,39,,,48,52,59,67,70,74',
'78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87',
',,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,34,40,18,22,26,,37,,,,53',
'63,,,,82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,',
',39,,,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,',
',,,136,,,139,,,72,76,,87,,662,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16',
',,,34,40,18,22,26,,37,,,,53,63,,,,82,,91,95,6,106,107,23,27,,,,,114',
'115,116,64,69,73,77,,,,,,,,,,39,,,48,52,59,67,70,74,78,83,88,92,,9,15',
',25,30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141',
',,,,84,89,93,4,10,16,,,,34,40,18,22,26,,37,,,,53,63,,,,82,,91,95,6,106',
'107,23,27,,,,,114,56,60,64,69,73,77,,,,,,,,,,39,,,48,52,59,67,70,74',
'78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87',
',146,,131,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,34,40,18,22,26,,37',
',,,53,63,,,,82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69,73,77,,',
',,,,,,,39,,,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,,,,,,,,,',
',,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89,93,4,10',
'16,,,,34,40,18,22,26,,37,,,,53,63,,,,82,,91,95,6,106,107,23,27,,,,,114',
'115,116,64,69,73,77,,,,,,,,,,39,,,48,52,59,67,70,74,78,83,88,92,,9,15',
',25,30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,767,,,,20,,,,,,',
',141,,,,,84,89,93,4,10,16,,,,34,40,18,22,26,,37,,,,53,63,,,,82,,91,95',
'6,106,107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,,,39,,,48,52,59,67',
'70,74,78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72',
'76,,87,,,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,34,40,18,22,26,,37',
',,,53,63,,,,82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69,73,77,,',
',,,,,,,39,,,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,,,,,,,,,',
',,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89,93,4,10',
'16,,,,34,40,18,22,26,,37,,,,53,63,,,,82,,91,95,6,106,107,23,27,,,,,114',
'115,116,64,69,73,77,,,,,,,,,,39,,,48,52,59,67,70,74,78,83,88,92,,9,15',
',25,30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141',
',,,,84,89,93,4,10,16,,,,34,40,18,22,26,,37,,,,53,63,,,,82,,91,95,6,11',
'17,23,27,,,,,51,56,60,64,69,73,77,,,97,,,,,,,39,,,48,52,59,67,70,74',
'78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87',
',,,,,20,,,,,,,,61,,,,,84,89,93,4,10,16,,,,34,40,-251,-251,-251,,-251',
',,,-251,-251,,,,-251,,-251,-251,-251,-251,-251,-251,-251,,,,,-251,-251',
'-251,-251,-251,-251,-251,,,,,,,,,,-251,,,-251,-251,-251,-251,-251,-251',
'-251,-251,-251,-251,,-251,-251,,-251,-251,-251,,,,,,,,,,,,,,,,,,,,-251',
',,-251,313,,-251,-251,,-251,,-251,,-251,,-251,,,,,,,,-251,,,,,-251,-251',
'-251,-251,-251,-251,,,,-251,-251,18,22,26,,37,,,,53,63,,,,82,,91,95',
'6,11,17,23,27,,,,,51,56,60,64,69,73,77,,,97,,,,,,,39,,,48,52,59,67,70',
'74,78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76',
',87,,,,,,20,,,,,,,,61,,,,,84,89,93,4,10,16,,,,34,40,18,22,26,,37,,,',
'53,63,,,,82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69,73,77,,,,,',
',,,,39,,,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,',
',,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16',
',,,34,40,18,22,26,,37,,,,53,63,,,,82,,91,95,6,106,107,23,27,,,,,114',
'56,60,64,69,73,77,,,,,,,,,,39,,,48,52,59,67,70,74,78,83,88,92,,9,15',
',25,30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,389,76,,87,,146,,131,,20,,',
',,,,,141,,,,,84,89,93,4,10,16,,,,34,40,18,22,26,,37,,,,53,63,,,,82,',
'91,95,6,106,107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,,,39,,,48,52',
'59,67,70,74,78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136,,,139',
',,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,34,40,18,22,26',
',37,,,,53,63,,,,82,,91,95,6,106,107,23,27,,,,,114,56,60,64,69,73,77',
',,,,,,,,,39,,,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,,,,,,,',
',,,,,,,,,,,136,,,139,,,72,76,,87,,332,,,,20,,,,,,,,141,,,,,84,89,93',
'4,10,16,,,,34,40,176,180,185,191,196,201,205,210,,,228,231,232,235,240',
',,169,172,174,182,187,193,197,,,211,215,221,249,252,254,256,241,242',
'244,168,171,173,178,183,189,199,203,207,246,247,248,226,,,255,,,,,,',
',184,190,,200,204,214,219,,227,230,,,239,,,,,177,181,186,192,,,,,,,',
',,,,,243,170,,175,179,188,194,198,202,206,212,216,,225,,,237,257,,,18',
'22,26,,37,,,40,53,63,,,,82,,91,95,6,106,107,23,27,,,,,114,115,116,64',
'69,73,77,,,,,,,,,,39,,,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36',
',,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89',
'93,4,10,16,,,,34,40,18,22,26,,37,,,,53,63,,,,82,,91,95,6,106,107,23',
'27,,,,,114,115,116,64,69,73,77,,,,,,,,,,39,,,48,52,59,67,70,74,78,83',
'88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,',
'20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,34,40,18,22,26,,37,,,,53,63,,',
',82,,91,95,6,11,17,23,27,,,,,51,56,60,64,69,73,77,,,97,,,,,,,39,,,48',
'52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136,,',
'139,,,72,76,,87,,,,,,20,,,,,,,,61,,,,,84,89,93,4,10,16,,,,34,40,18,22',
'26,,37,,,,53,63,,,,82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69,73',
'77,,,,,,,,,,39,,,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,,,,',
',,,,,,,,,,,,,,136,,,139,,,72,76,,87,,788,,131,,20,,,,,,,,141,,,,,84',
'89,93,4,10,16,,,,34,40,18,22,26,,37,,,,53,63,,,,82,,91,95,6,11,17,23',
'27,,,,,51,56,60,64,69,73,77,,,,,,,,,,39,,,48,52,59,67,70,74,78,83,88',
'92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20',
',,,,,,,141,,,,,84,89,93,4,10,16,,,,34,40,-486,-486,-486,,-486,,,,-486',
'-486,,,,-486,,-486,-486,-486,-486,-486,-486,-486,,,,,-486,-486,-486',
'-486,-486,-486,-486,,,,,,,,,,-486,,,-486,-486,-486,-486,-486,-486,-486',
'-486,-486,-486,,-486,-486,,-486,-486,-486,,,,,,,,,,,,,,,,,,,,-486,,',
'-486,-486,,-486,-486,,-486,,-486,,-486,,-486,,,,,,,,-486,,,,,-486,-486',
'-486,-486,-486,-486,,,,-486,-486,18,22,26,,37,,,,53,63,,,,82,,91,95',
'6,106,107,23,27,,,,,114,56,60,64,69,73,77,,,,,,,,,,39,,,48,52,59,67',
'70,74,78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72',
'76,,87,,146,,131,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,34,40,18,22',
'26,,37,,,,53,63,,,,82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69,73',
'77,,,,,,,,,,39,,,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,,,,',
',,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89,93',
'4,10,16,,,,34,40,18,22,26,,37,,,,53,63,,,,82,,91,95,6,106,107,23,27',
',,,,114,115,116,64,69,73,77,,,,,,,,,,39,,,48,52,59,67,70,74,78,83,88',
'92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,763,,,',
'20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,34,40,18,22,26,,37,,,,53,63,,',
',82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,,,39,',
',48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136',
',,139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,34,40,18',
'22,26,,37,,,,53,63,,,,82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69',
'73,77,,,,,,,,,,39,,,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,',
',,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89',
'93,4,10,16,,,,34,40,18,22,26,,37,,,,53,63,,,,82,,91,95,6,106,107,23',
'27,,,,,114,115,116,64,69,73,77,,,,,,,,,,39,,,48,52,59,67,70,74,78,83',
'88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,',
'20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,34,40,18,22,26,,37,,,,53,63,,',
',82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,,,39,',
',48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136',
',,139,,,72,76,,87,,865,,131,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,34',
'40,18,22,26,,37,,,,53,63,,,,82,,91,95,6,106,107,23,27,,,,,114,115,116',
'64,69,73,77,,,,,,,,,,39,,,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30',
'36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84',
'89,93,4,10,16,,,,34,40,18,22,26,31,37,,,,53,63,,,,82,,91,95,6,11,17',
'23,27,,,,,51,56,60,64,69,73,77,,,97,,,,,,29,39,44,47,48,52,59,67,70',
'74,78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,43,,,54,,,72,76,,87',
',96,,,,20,,,,,,,,61,,,,,84,89,93,4,10,16,,,,34,40,18,22,26,,37,,,,53',
'63,,,,82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,',
',39,,,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,',
',,,136,,,139,,,72,76,,87,,862,,131,,20,,,,,,,,141,,,,,84,89,93,4,10',
'16,,,,34,40,18,22,26,,37,,,,53,63,,,,82,,91,95,6,106,107,23,27,,,,,114',
'115,116,64,69,73,77,,,,,,,,,,112,,,48,52,418,67,70,74,419,83,88,92,',
'9,15,,,,110,,,,,,,,,,,,,,,,,,,,415,,,139,,,72,76,,87,,,,,,,,,,,,,,,',
',,,84,89,93,4,10,16,,,,34,40,18,22,26,,37,,,,53,63,,,,82,,91,95,6,11',
'17,23,27,,,,,51,56,60,64,69,73,77,,,,,,,,,,39,,,48,52,59,67,70,74,78',
'83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,',
',,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,34,40,18,22,26,,37,,,,53,63',
',,,82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,,,39',
',,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136',
',,139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,34,40,18',
'22,26,,37,,,,53,63,,,,82,,91,95,6,11,17,23,27,,,,,51,56,60,64,69,73',
'77,,,97,,,,,,,39,,,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,,',
',,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,61,,,,,84,89,93',
'4,10,16,,,,34,40,18,22,26,,37,,,,53,63,,,,82,,91,95,6,106,107,23,27',
',,,,114,115,116,64,69,73,77,,,,,,,,,,39,,,48,52,59,67,70,74,78,83,88',
'92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,897,,131',
',20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,34,40,18,22,26,,37,,,,53,63,',
',,82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,,,39',
',,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136',
',,139,,,72,76,,87,,857,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,34,40',
'18,22,26,,37,,,,53,63,,,,82,,91,95,6,106,107,23,27,,,,,114,115,116,64',
'69,73,77,,,,,,,,,,39,,,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36',
',,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89',
'93,4,10,16,,,,34,40,18,22,26,,37,,,,53,63,,,,82,,91,95,6,106,107,23',
'27,,,,,114,115,116,64,69,73,77,,,,,,,,,,112,,,48,52,59,67,70,74,78,83',
'88,92,,9,15,,,,110,,,,,,,,,,,,,,,,,,,,162,,,139,,,72,76,,87,,,,,,,,',
',,,,,,,,,,84,89,93,4,10,16,,,,34,40,18,22,26,,37,,,,53,63,,,,82,,91',
'95,6,106,107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,,,112,,,48,52',
'418,67,70,74,419,83,88,92,,9,15,,,,110,,,,,,,,,,,,,,,,,,,,415,,,139',
',,72,76,,87,,,,,,,,,,,,,,,,,,,84,89,93,4,10,16,,,,34,40,18,22,26,,37',
',,,53,63,,,,82,,91,95,6,106,107,23,27,,,,,114,56,60,64,69,73,77,,,,',
',,,,,39,,,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,',
',,,,,,,136,,,139,,,72,76,,87,,585,,131,,20,,,,,,,,141,,,,,84,89,93,4',
'10,16,,,,34,40,18,22,26,,37,,,,53,63,,,,82,,91,95,6,106,107,23,27,,',
',,114,115,116,64,69,73,77,,,,,,,,,,39,,,48,52,59,67,70,74,78,83,88,92',
',9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,591,,131,',
'20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,34,40,18,22,26,,37,,,,53,63,,',
',82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,,,39,',
',48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136',
',,139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,34,40,18',
'22,26,,37,,,,53,63,,,,82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69',
'73,77,,,,,,,,,,39,,,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,',
',,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89',
'93,4,10,16,,,,34,40,18,22,26,,37,,,,53,63,,,,82,,91,95,6,106,107,23',
'27,,,,,114,115,116,64,69,73,77,,,,,,,,,,39,,,48,52,59,67,70,74,78,83',
'88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,',
'20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,34,40,18,22,26,,37,,,,53,63,,',
',82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,,,112',
',,48,52,59,67,70,74,78,83,88,92,,9,15,,,,110,,,,,,,,,,,,,,,,,,,,113',
',,54,,,72,76,,87,,96,,,,,,,,,,,697,,,,,,84,89,93,4,10,16,,,,34,40,18',
'22,26,,37,,,,53,63,,,,82,,91,95,6,11,17,23,27,,,,,51,56,60,64,69,73',
'77,,,97,,,,,,,39,,,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,,',
',,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,61,,,,,84,89,93',
'4,10,16,,,,34,40,18,22,26,,37,,,,53,63,,,,82,,91,95,6,106,107,23,27',
',,,,114,115,116,64,69,73,77,,,,,,,,,,39,,,48,52,59,67,70,74,78,83,88',
'92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,585,,131',
',20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,34,40,18,22,26,,37,,,,53,63,',
',,82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,,,39',
',,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136',
',,139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,34,40,18',
'22,26,,37,,,,53,63,,,,82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69',
'73,77,,,,,,,,,,39,,,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,',
',,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89',
'93,4,10,16,,,,34,40,18,22,26,,37,,,,53,63,,,,82,,91,95,6,106,107,23',
'27,,,,,114,115,116,64,69,73,77,,,,,,,,,,39,,,48,52,59,67,70,74,78,83',
'88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,',
'20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,34,40,18,22,26,,37,,,,53,63,,',
',82,,91,95,6,11,17,23,27,,,,,51,56,60,64,69,73,77,,,97,,,,,,,39,,,48',
'52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136,,',
'139,,,72,76,,87,,,,,,20,,,,,,,,61,,,,,84,89,93,4,10,16,,,,34,40,18,22',
'26,,37,,,,53,63,,,,82,,91,95,6,11,17,23,27,,,,,51,56,60,64,69,73,77',
',,97,,,,,,,39,,,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,,,,,',
',,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,61,,,,,84,89,93,4',
'10,16,,,,34,40,18,22,26,,37,,,,53,63,,,,82,,91,95,6,106,107,23,27,,',
',,114,115,116,64,69,73,77,,,,,,,,,,112,,,48,52,59,67,70,74,78,83,88',
'92,,9,15,,,,110,,,,,,,,,,,,,,,,,,,,850,,,139,,,72,76,,87,,,,,,,,,,,',
',,,,,,,84,89,93,4,10,16,,,,34,40,18,22,26,,37,,,,53,63,,,,82,,91,95',
'6,106,107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,,,39,,,48,52,59,67',
'70,74,78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72',
'76,,87,,,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,34,40,18,22,26,,37',
',,,53,63,,,,82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69,73,77,,',
',,,,,,,39,,,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,,,,,,,,,',
',,,,,,,,,136,,,139,449,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89,93,4',
'10,16,,,,34,40,176,180,185,191,196,201,205,210,,,228,231,232,235,240',
',,169,172,174,182,187,193,197,,,211,215,221,249,252,254,256,241,242',
'244,168,171,173,178,183,189,199,203,207,246,247,248,226,,,255,,,,,,',
',184,190,,200,204,214,219,,227,230,,,239,,,,,177,181,186,192,,,,,,,',
',,,,,243,170,,175,179,188,194,198,202,206,212,216,,225,,,237,257,,,18',
'22,26,,37,,,40,53,63,,,,82,,91,95,6,106,107,23,27,,,,,114,115,116,64',
'69,73,77,,,,,,,,,,39,,,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36',
',,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89',
'93,4,10,16,,,,34,40,176,180,185,191,196,201,205,210,,,228,231,232,235',
'240,,,169,172,174,182,187,193,197,,,211,215,221,249,252,254,256,241',
'242,244,168,171,173,178,183,189,199,203,207,246,247,248,226,253,,255',
',,,,,,,184,190,,200,204,214,219,,227,230,,,239,,,,,177,181,186,192,',
',,,,,,,,,,,243,170,,175,179,188,194,198,202,206,212,216,,225,,,237,257',
',,18,22,26,,37,,,40,53,63,,,,82,,91,95,6,106,107,23,27,,,,,114,115,116',
'64,69,73,77,,,,,,,,,,39,,,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30',
'36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84',
'89,93,4,10,16,,,,34,40,18,22,26,,37,,,,53,63,,,,82,,91,95,6,106,107',
'23,27,,,,,114,115,116,64,69,73,77,,,,,,,,,,39,,,48,52,59,67,70,74,78',
'83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,',
',,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,34,40,18,22,26,,37,,,,53,63',
',,,82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,,,39',
',,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136',
',,139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,34,40,18',
'22,26,,37,,,,53,63,,,,82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69',
'73,77,,,,,,,,,,39,,,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,',
',,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89',
'93,4,10,16,,,,34,40,18,22,26,,37,,,,53,63,,,,82,,91,95,6,106,107,23',
'27,,,,,114,115,116,64,69,73,77,,,,,,,,,,39,,,48,52,59,67,70,74,78,83',
'88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,',
'20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,34,40,18,22,26,,37,,,,53,63,,',
',82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,,,39,',
',48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136',
',,139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,34,40,18',
'22,26,,37,,,,53,63,,,,82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69',
'73,77,,,,,,,,,,39,,,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,',
',,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89',
'93,4,10,16,,,,34,40,18,22,26,,37,,,,53,63,,,,82,,91,95,6,106,107,23',
'27,,,,,114,115,116,64,69,73,77,,,,,,,,,,39,,,48,52,59,67,70,74,78,83',
'88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,',
'20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,34,40,18,22,26,,37,,,,53,63,,',
',82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,,,39,',
',48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136',
',,139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,34,40,18',
'22,26,,37,,,,53,63,,,,82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69',
'73,77,,,,,,,,,,39,,,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,',
',,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89',
'93,4,10,16,,,,34,40,18,22,26,,37,,,,53,63,,,,82,,91,95,6,106,107,23',
'27,,,,,114,115,116,64,69,73,77,,,,,,,,,,39,,,48,52,59,67,70,74,78,83',
'88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,',
'20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,34,40,18,22,26,,37,,,,53,63,,',
',82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,,,39,',
',48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136',
',,139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,34,40,18',
'22,26,,37,,,,53,63,,,,82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69',
'73,77,,,,,,,,,,39,,,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,',
',,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89',
'93,4,10,16,,,,34,40,18,22,26,,37,,,,53,63,,,,82,,91,95,6,106,107,23',
'27,,,,,114,115,116,64,69,73,77,,,,,,,,,,39,,,48,52,59,67,70,74,78,83',
'88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,',
'20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,34,40,18,22,26,,37,,,,53,63,,',
',82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,,,39,',
',48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136',
',,139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,34,40,18',
'22,26,,37,,,,53,63,,,,82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69',
'73,77,,,,,,,,,,39,,,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,',
',,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89',
'93,4,10,16,,,,34,40,18,22,26,,37,,,,53,63,,,,82,,91,95,6,106,107,23',
'27,,,,,114,115,116,64,69,73,77,,,,,,,,,,39,,,48,52,59,67,70,74,78,83',
'88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,',
'20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,34,40,18,22,26,,37,,,,53,63,,',
',82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,,,39,',
',48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136',
',,139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,34,40,18',
'22,26,,37,,,,53,63,,,,82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69',
'73,77,,,,,,,,,,39,,,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,',
',,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89',
'93,4,10,16,,,,34,40,18,22,26,,37,,,,53,63,,,,82,,91,95,6,106,107,23',
'27,,,,,114,115,116,64,69,73,77,,,,,,,,,,39,,,48,52,59,67,70,74,78,83',
'88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,',
'20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,34,40,18,22,26,,37,,,,53,63,,',
',82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,,,39,',
',48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136',
',,139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,34,40,18',
'22,26,,37,,,,53,63,,,,82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69',
'73,77,,,,,,,,,,39,,,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,',
',,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89',
'93,4,10,16,,,,34,40,18,22,26,,37,,,,53,63,,,,82,,91,95,6,106,107,23',
'27,,,,,114,115,116,64,69,73,77,,,,,,,,,,39,,,48,52,59,67,70,74,78,83',
'88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,',
'20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,34,40,18,22,26,,37,,,,53,63,,',
',82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,,,39,',
',48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136',
',,139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,34,40,18',
'22,26,,37,,,,53,63,,,,82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69',
'73,77,,,,,,,,,,39,,,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,',
',,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89',
'93,4,10,16,,,,34,40,18,22,26,,37,,,,53,63,,,,82,,91,95,6,106,107,23',
'27,,,,,114,115,116,64,69,73,77,,,,,,,,,,39,,,48,52,59,67,70,74,78,83',
'88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,',
'20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,34,40,18,22,26,,37,,,,53,63,,',
',82,,91,95,6,106,107,23,27,,,,,114,56,60,64,69,73,77,,,,,,,,,,39,,,48',
'52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136,,',
'139,,,72,76,,87,,332,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,34,40',
'18,22,26,,37,,,,53,63,,,,82,,91,95,6,11,17,23,27,,,,,51,56,60,64,69',
'73,77,,,97,,,,,,,39,,,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36',
',,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,572,,131,,20,,,,,,,,61,,,',
',84,89,93,4,10,16,,,,34,40,18,22,26,,37,,,,53,63,,,,82,,91,95,6,106',
'107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,,,39,,,48,52,59,67,70,74',
'78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87',
',,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,34,40,18,22,26,,37,,,,53',
'63,,,,82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,',
',39,,,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,',
',,,136,,,139,,,72,76,,87,,782,,131,,20,,,,,,,,141,,,,,84,89,93,4,10',
'16,,,,34,40,18,22,26,,37,,,,53,63,,,,82,,91,95,6,106,107,23,27,,,,,114',
'115,116,64,69,73,77,,,,,,,,,,39,,,48,52,59,67,70,74,78,83,88,92,,9,15',
',25,30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141',
',,,,84,89,93,4,10,16,,,,34,40,18,22,26,,37,,,,53,63,,,,82,,91,95,6,106',
'107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,,,39,,,48,52,59,67,70,74',
'78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87',
',,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,34,40,18,22,26,,37,,,,53',
'63,,,,82,,91,95,6,106,107,23,27,,,,,114,56,60,64,69,73,77,,,,,,,,,,39',
',,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136',
',,139,,490,72,76,,87,,146,,131,,20,,,,,,,,141,,,,,84,89,93,4,10,16,',
',,34,40,18,22,26,,37,,,,53,63,,,,82,,91,95,6,11,17,23,27,,,,,51,56,60',
'64,69,73,77,,,97,,,,,,,39,,,48,52,59,67,70,74,78,83,88,92,,9,15,,25',
'30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,61,,,',
',84,89,93,4,10,16,,,,34,40,18,22,26,,37,,,,53,63,,,,82,,91,95,6,11,17',
'23,27,,,,,51,56,60,64,69,73,77,,,97,,,,,,,39,,,48,52,59,67,70,74,78',
'83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,',
',,,20,,,,,,,,61,,,,,84,89,93,4,10,16,,,,34,40,18,22,26,,37,,,,53,63',
',,,82,,91,95,6,11,17,23,27,,,,,51,56,60,64,69,73,77,,,97,,,,,,,39,,',
'48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136',
',,139,,,72,76,,87,,,,,,20,,,,,,,,61,,,,,84,89,93,4,10,16,,,,34,40,18',
'22,26,,37,,,,53,63,,,,82,,91,95,6,11,17,23,27,,,,,51,56,60,64,69,73',
'77,,,,,,,,,,39,,,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,,,,',
',,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89,93',
'4,10,16,,,,34,40,18,22,26,31,37,,,,53,63,,,,82,,91,95,6,11,17,23,27',
',,,,51,56,60,64,69,73,77,,,97,,,,,,29,39,44,47,48,52,59,67,70,74,78',
'83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,43,,,54,,,72,76,,87,,96',
',,,20,,,,,,,,61,,,,,84,89,93,4,10,16,,,,34,40,18,22,26,,37,,,,53,63',
',,,82,,91,95,6,106,107,23,27,,,,,114,56,60,64,69,73,77,,,,,,,,,,39,',
',48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136',
',,139,,,72,76,,87,,146,,131,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,34',
'40,18,22,26,,37,,,,53,63,,,,82,,91,95,6,106,107,23,27,,,,,114,56,60',
'64,69,73,77,,,,,,,,,,39,,,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30',
'36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,146,,131,,20,,,,,,,,141',
',,,,84,89,93,4,10,16,,,,34,40,18,22,26,,37,,,,53,63,,,,82,,91,95,6,106',
'107,23,27,,,,,114,56,60,64,69,73,77,,,,,,,,,,39,,,48,52,59,67,70,74',
'78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87',
',332,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,34,40,18,22,26,,37,,,',
'53,63,,,,82,,91,95,6,11,17,23,27,,,,,51,56,60,64,69,73,77,,,,,,,,,,39',
',,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136',
',,139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,34,40,18',
'22,26,,37,,,,53,63,,,,82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69',
'73,77,,,,,,,,,,39,,,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,',
',,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89',
'93,4,10,16,,,,34,40,18,22,26,,37,,,,53,63,,,,82,,91,95,6,106,107,23',
'27,,,,,114,115,116,64,69,73,77,,,,,,,,,,39,,,48,52,59,67,70,74,78,83',
'88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,',
'20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,34,40,18,22,26,,37,,,,53,63,,',
',82,,91,95,6,11,17,23,27,,,,,51,56,60,64,69,73,77,,,,,,,,,,39,,,48,52',
'59,67,70,74,78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136,,,139',
',,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,34,40,18,22,26',
',37,,,,53,63,,,,82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69,73,77',
',,,,,,,,,39,,,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,,,,,,,',
',,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89,93,4,10',
'16,,,,34,40,18,22,26,,37,,,,53,63,,,,82,,91,95,6,106,107,23,27,,,,,114',
'115,116,64,69,73,77,,,,,,,,,,39,,,48,52,59,67,70,74,78,83,88,92,,9,15',
',25,30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,785,,131,,20,,,',
',,,,141,,,,,84,89,93,4,10,16,,,,34,40,18,22,26,,37,,,,53,63,,,,82,,91',
'95,6,11,17,23,27,,,,,51,56,60,64,69,73,77,,,,,,,,,,39,,,48,52,59,67',
'70,74,78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72',
'76,,87,,520,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,34,40,18,22,26',
',37,,,,53,63,,,,82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69,73,77',
',,,,,,,,,39,,,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,,,,,,,',
',,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89,93,4,10',
'16,,,,34,40,18,22,26,,37,,,,53,63,,,,82,,91,95,6,106,107,23,27,,,,,114',
'115,116,64,69,73,77,,,,,,,,,,39,,,48,52,59,67,70,74,78,83,88,92,,9,15',
',25,30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141',
',,,,84,89,93,4,10,16,,,,34,40,18,22,26,,37,,,,53,63,,,,82,,91,95,6,11',
'17,23,27,,,,,51,56,60,64,69,73,77,,,,,,,,,,39,,,48,52,59,67,70,74,78',
'83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,',
',,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,34,40,-251,-251,-251,,-251',
',,,-251,-251,,,,-251,,-251,-251,-251,-251,-251,-251,-251,,,,,-251,-251',
'-251,-251,-251,-251,-251,,,,,,,,,,-251,,,-251,-251,-251,-251,-251,-251',
'-251,-251,-251,-251,,-251,-251,,-251,-251,-251,,,,,,,,,,,,,,,,,,,,-251',
',,-251,321,,-251,-251,,-251,,-251,,-251,,-251,,,,,,,,-251,,,,,-251,-251',
'-251,-251,-251,-251,,,,-251,-251,18,22,26,,37,,,,53,63,,,,82,,91,95',
'6,106,107,23,27,,,,,114,115,116,64,69,73,77,,,,,,,,,,39,,,48,52,59,67',
'70,74,78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72',
'76,,87,,,,,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,34,40,18,22,26,,37',
',,,53,63,,,,82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69,73,77,,',
',,,,,,,112,,,48,52,59,67,70,74,78,83,88,92,,9,15,,,,110,,,,,,,,,,,,',
',,,,,,,162,,,163,,,72,76,,87,,164,,,,,,,,,,,,,,,,,84,89,93,4,10,16,',
',,34,40,176,180,185,191,196,201,205,210,,,228,231,232,235,240,,,169',
'172,174,182,187,193,197,,,211,215,221,249,252,254,256,241,242,244,168',
'171,173,178,183,189,199,203,207,246,247,248,226,,,255,,,,,,,,184,190',
',200,204,214,219,,227,230,,,239,,,,,177,181,186,192,,,,,,,,,,,,,243',
'170,,175,179,188,194,198,202,206,212,216,,225,,,237,257,,,18,22,26,',
'37,,,40,53,63,,,,82,,91,95,6,11,17,23,27,,,,,51,56,60,64,69,73,77,,',
',,,,,,,39,,,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,,,,,,,,,',
',,,,,,,,,136,,,139,,,72,76,,87,,520,,,,20,,,,,,,,141,,,,,84,89,93,4',
'10,16,,,,34,40,18,22,26,,37,,,,53,63,,,,82,,91,95,6,11,17,23,27,,,,',
'51,56,60,64,69,73,77,,,97,,,,,,,39,,,48,52,59,67,70,74,78,83,88,92,',
'9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,',
',,,61,,,,,84,89,93,4,10,16,,,,34,40,-485,-485,-485,,-485,,,,-485,-485',
',,,-485,,-485,-485,-485,-485,-485,-485,-485,,,,,-485,-485,-485,-485',
'-485,-485,-485,,,,,,,,,,-485,,,-485,-485,-485,-485,-485,-485,-485,-485',
'-485,-485,,-485,-485,,-485,-485,-485,,,,,,,,,,,,,,,,,,,,-485,,,-485',
'-485,,-485,-485,,-485,,-485,,-485,,-485,,,,,,,,-485,,,,,-485,-485,-485',
'-485,-485,-485,,,,-485,-485,18,22,26,,37,,,,53,63,,,,82,,91,95,6,11',
'17,23,27,,,,,51,56,60,64,69,73,77,,,,,,,,,,39,,,48,52,59,67,70,74,78',
'83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,',
',,,20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,34,40,18,22,26,,37,,,,53,63',
',,,82,,91,95,6,11,17,23,27,,,,,51,56,60,64,69,73,77,,,97,,,,,,,39,,',
'48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136',
',,139,,,72,76,,87,,,,,,20,,,,,,,,61,,,,,84,89,93,4,10,16,,,,34,40,18',
'22,26,,37,,,,53,63,,,,82,,91,95,6,106,107,23,27,,,,,114,115,116,64,69',
'73,77,,,,,,,,,,39,,,48,52,59,67,70,74,78,83,88,92,,9,15,,25,30,36,,',
',,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,,20,,,,,,,,141,,,,,84,89',
'93,4,10,16,,,,34,40,18,22,26,,37,,,,53,63,,,,82,,91,95,6,106,107,23',
'27,,,,,114,115,116,64,69,73,77,,,,,,,,,,39,,,48,52,59,67,70,74,78,83',
'88,92,,9,15,,25,30,36,,,,,,,,,,,,,,,,,,,,136,,,139,,,72,76,,87,,,,,',
'20,,,,,,,,141,,,,,84,89,93,4,10,16,,,,34,40,176,180,185,191,196,201',
'205,210,,,228,231,232,235,240,,,169,172,174,182,187,193,197,,,211,215',
'221,249,252,254,256,241,242,244,168,171,173,178,183,189,199,203,207',
'246,247,248,226,340,341,255,342,,,,,,,184,190,,200,204,214,219,,227',
'230,,,239,,,,,177,181,186,192,,,,,,,,,,,,,243,170,,175,179,188,194,198',
'202,206,212,216,,225,,,237,176,180,185,191,196,201,205,210,,,228,231',
'232,235,240,,,169,172,174,182,187,193,197,,,211,215,221,249,252,254',
'256,241,242,244,168,171,173,178,183,189,199,203,207,246,247,248,226',
',,255,,,,,,,,184,190,,200,204,214,219,,227,230,,,239,,,,,177,181,186',
'192,,,,,,,,,,,,,243,170,,175,179,188,194,198,202,206,212,216,,225,,',
'237,176,180,185,191,196,201,205,210,,,228,231,232,235,240,,,169,172',
'174,182,187,193,197,,,211,215,221,249,252,254,256,241,242,244,168,171',
'173,178,183,189,199,203,207,246,247,248,226,340,341,255,342,,,,,,,184',
'190,,200,204,214,219,,227,230,,,239,,,,,177,181,186,192,,,,,,,,,,,,',
'243,170,,175,179,188,194,198,202,206,212,216,,225,,,237,176,180,185',
'191,196,201,205,210,,,228,231,232,235,240,,,169,172,174,182,187,193',
'197,,,211,215,221,224,229,233,236,241,242,244,168,171,173,178,183,189',
'199,203,207,213,218,223,226,70,74,234,83,,,,,,,184,190,,200,204,214',
'219,,227,230,,,239,,,,,177,181,186,192,,,,,,220,,664,,,,,243,170,,175',
'179,188,194,198,202,206,212,216,,225,,,237,299,300,276,279,282,285,288',
'290,292,294,296,,301,278,,,284,287,,,,,,,,,,,,,,295,,298,,277,280,283',
'286,289,291,293,,297,299,300,276,279,282,285,288,290,292,294,296,,301',
'278,,281,284,287,,,-217,,,,,,,,,,,295,,298,,277,280,283,286,289,291',
'293,,297,299,300,276,279,282,285,288,290,292,294,296,,301,278,,281,284',
'287,,,,,266,,,,,,,,,295,,298,,277,280,283,286,289,291,293,,297,299,300',
'276,279,282,285,288,290,292,294,296,,301,278,,281,284,287,,,,-217,266',
',,,,,,,,295,,298,,277,280,283,286,289,291,293,,297,299,300,276,279,282',
'285,288,290,292,294,296,,301,278,,281,284,287,,,-217,,,,,,,,,,,295,',
'298,,277,280,283,286,289,291,293,,297,,607,372,,,608,,,,,,,,184,190',
'281,200,204,214,219,588,227,230,,,239,,,,,177,181,186,192,,,,,,,,,,',
',,243,170,,175,179,188,194,198,202,206,212,216,,225,604,365,237,,605',
',,,,,,,184,190,,200,204,214,219,,227,230,,,239,,,,,177,181,186,192,',
',,,,,,,,,,,243,170,,175,179,188,194,198,202,206,212,216,,225,579,372',
'237,,580,,,,,,,,184,190,,200,204,214,219,,227,230,,,239,,,,,177,181',
'186,192,,,,,,,,,,,,,243,170,,175,179,188,194,198,202,206,212,216,,225',
'576,365,237,,577,,,,,,,,184,190,,200,204,214,219,,227,230,,,239,,,,',
'177,181,186,192,,,,,,,,,,,,,243,170,,175,179,188,194,198,202,206,212',
'216,,225,889,365,237,,890,,,,,,,,184,190,,200,204,214,219,,227,230,',
',239,,,,,177,181,186,192,,,,,,,,,,,,,243,170,,175,179,188,194,198,202',
'206,212,216,,225,576,365,237,,577,,,,,,,,184,190,,200,204,214,219,,227',
'230,,,239,,,,,177,181,186,192,,,,,,,,,,,,,243,170,,175,179,188,194,198',
'202,206,212,216,,225,715,365,237,,716,,,,,,,,184,190,,200,204,214,219',
',227,230,,,239,,,,,177,181,186,192,,,,,,,,,,,,,243,170,,175,179,188',
'194,198,202,206,212,216,,225,892,372,237,,893,,,,,,,,184,190,,200,204',
'214,219,,227,230,,,239,,,,,177,181,186,192,,,,,,,,,,,,,243,170,,175',
'179,188,194,198,202,206,212,216,,225,579,372,237,,580,,,,,,,,184,190',
',200,204,214,219,,227,230,,,239,,,,,177,181,186,192,,,,,,,,,,,,,243',
'170,,175,179,188,194,198,202,206,212,216,,225,364,365,237,,366,,,,,',
',,184,190,,200,204,214,219,,227,230,,,239,,,,,177,181,186,192,,,,,,',
',,,,,,243,170,,175,179,188,194,198,202,206,212,216,,225,503,372,237',
',504,,,,,,,,184,190,,200,204,214,219,,227,230,,,239,,,,,177,181,186',
'192,,,,,,,,,,,,,243,170,,175,179,188,194,198,202,206,212,216,,225,371',
'372,237,,373,,,,,,,,184,190,,200,204,214,219,,227,230,,,239,,,,,177',
'181,186,192,,,,,,,,,,,,,243,170,,175,179,188,194,198,202,206,212,216',
',225,503,372,237,,504,,,,,,,,184,190,,200,204,214,219,,227,230,,,239',
',,,,177,181,186,192,,,,,,,,,,,,,243,170,,175,179,188,194,198,202,206',
'212,216,,225,558,372,237,,559,,,,,,,,184,190,,200,204,214,219,,227,230',
',,239,,,,,177,181,186,192,,,,,,,,,,,,,243,170,,175,179,188,194,198,202',
'206,212,216,,225,503,372,237,,504,,,,,,,,184,190,,200,204,214,219,,227',
'230,,,239,,,,,177,181,186,192,,,,,,,,,,,,,243,170,,175,179,188,194,198',
'202,206,212,216,,225,554,365,237,,555,,,,,,,,184,190,,200,204,214,219',
',227,230,,,239,,,,,177,181,186,192,,,,,,,,,,,,,243,170,,175,179,188',
'194,198,202,206,212,216,,225,503,372,237,,504,,,,,,,,184,190,,200,204',
'214,219,,227,230,,,239,,,,,177,181,186,192,,,,,,,,,,,,,243,170,,175',
'179,188,194,198,202,206,212,216,,225,503,372,237,,504,,,,,,,,184,190',
',200,204,214,219,,227,230,,,239,,,,,177,181,186,192,,,,,,,,,,,,,243',
'170,,175,179,188,194,198,202,206,212,216,,225,,,237,299,300,276,279',
'282,285,288,290,292,294,296,,301,278,,,284,287,,,,,,,,,,,,,,295,,298',
',277,280,283,286,289,291,293,,297,,299,300,276,279,282,285,288,290,292',
'294,296,,301,278,281,642,284,287,,,,,,,,,,,,,,295,,298,,277,280,283',
'286,289,291,293,,297,299,300,276,279,282,285,288,290,292,294,296,,301',
'278,,281,284,287,,,,,,,,,,,,,,295,,298,,277,280,283,286,289,291,293',
',297,299,300,276,279,282,285,288,290,292,294,296,,301,278,,281,284,287',
',,,,,,,,,,,,,295,,298,,277,280,283,286,289,291,293,,297,299,300,276',
'279,282,285,288,290,292,294,296,,301,278,,281,284,287,,,,,,,,,,,,,,295',
',298,,277,280,283,286,289,291,293,,297,299,300,276,279,282,285,288,290',
'292,294,296,,301,278,,281,284,287,,,,,,,,,,,,,,295,,298,,277,280,283',
'286,289,291,293,,297,299,300,276,279,282,285,288,290,292,294,296,,301',
'278,,281,284,287,,,,,,,,,,,,,,295,,298,,277,280,283,286,289,291,293',
',297,299,300,276,279,282,285,288,290,292,294,296,,301,278,,281,284,287',
',,,,,,,,,,,,,295,,298,,277,280,283,286,289,291,293,,297,299,300,276',
'279,282,285,288,290,292,294,296,,301,278,,281,284,287,,,,,,,,,,,,,,295',
',298,,277,280,283,286,289,291,293,,297,299,300,276,279,282,285,288,290',
'292,294,296,,301,278,,281,284,287,,,,,,,,,,,,,,295,,298,,277,280,283',
'286,289,291,293,,297,299,300,276,279,282,285,288,290,292,294,296,,301',
'278,,281,284,287,,,,,,,,,,,,,,295,,298,,277,280,283,286,289,291,293',
',297,299,300,276,279,282,285,288,290,292,294,296,,301,278,,281,284,287',
',,,,,,,,,,,,,295,,298,,277,280,283,286,289,291,293,,297,299,300,276',
'279,282,285,288,290,292,294,296,,301,278,,281,284,287,,,,,,,,,,,,,,295',
',298,,277,280,283,286,289,291,293,,297,299,300,276,279,282,285,288,290',
'292,294,296,,301,278,,281,284,287,,,,,,,,,,,,,,295,,298,,277,280,283',
'286,289,291,293,,297,,,,,,,,,,,,,,,,281' ]
        racc_action_table = arr = Array.new(23857, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'502,390,893,417,631,631,149,502,502,502,765,38,502,502,502,105,502,8',
'7,639,639,569,890,757,499,373,502,647,1,890,757,499,386,636,890,502',
'502,481,502,502,502,502,502,415,158,110,110,415,889,218,99,158,38,99',
'706,38,218,381,331,111,331,390,390,41,569,386,373,647,149,373,481,41',
'639,390,890,502,815,67,757,499,7,856,502,856,67,67,67,502,502,67,67',
'67,635,67,812,706,158,307,105,631,8,7,561,67,67,417,558,634,324,502',
'99,99,67,67,893,67,67,67,67,67,893,893,765,889,502,892,42,42,765,765',
'502,502,417,417,693,561,539,347,381,347,111,67,67,67,67,67,67,67,67',
'67,67,67,67,67,67,876,876,67,67,67,889,381,67,111,535,67,889,889,67',
'385,67,335,67,335,67,650,67,67,67,67,67,67,67,366,67,619,67,558,815',
'559,366,366,366,617,815,815,366,366,653,366,67,67,385,616,67,67,812',
'67,67,307,558,655,812,812,108,307,307,660,366,366,324,366,366,366,366',
'366,324,324,554,731,615,555,693,613,539,607,692,892,693,693,539,539',
'612,892,892,713,713,366,366,366,366,366,366,366,366,366,366,366,366',
'366,366,352,535,366,366,366,213,366,535,535,559,366,667,213,731,731',
'731,731,366,608,366,606,366,366,366,366,366,366,366,505,366,554,366',
'559,555,108,505,505,505,607,135,505,505,505,670,505,366,127,366,554',
'366,366,555,366,366,505,607,692,108,36,36,352,352,352,505,505,339,505',
'505,505,505,505,554,348,676,555,607,413,589,607,692,135,66,608,413,899',
'234,156,588,66,599,132,899,234,156,579,847,599,586,208,608,715,584,847',
'505,364,208,127,127,127,578,505,364,364,364,5,505,505,364,364,608,364',
'5,608,371,400,339,339,339,413,364,573,132,348,348,348,579,899,505,156',
'364,364,599,364,364,364,364,364,847,605,236,715,570,505,580,229,605',
'236,715,505,505,605,229,715,557,371,400,5,371,364,364,364,364,364,364',
'364,364,364,364,364,364,364,364,696,715,364,364,364,556,364,428,79,159',
'364,345,580,345,428,79,159,364,605,364,715,364,364,364,364,364,364,364',
'699,364,364,364,333,224,333,848,874,223,553,849,224,130,848,874,223',
'364,849,364,130,364,364,702,364,364,269,269,269,269,269,428,79,159,269',
'269,32,32,547,269,418,269,269,269,269,269,269,269,542,604,533,19,269',
'269,269,269,269,269,269,848,874,269,524,849,546,130,522,269,269,269',
'269,269,269,269,269,269,269,269,269,269,269,716,269,269,461,269,269',
'269,716,161,418,104,19,716,721,19,161,418,104,604,709,721,418,614,614',
'546,604,269,546,519,269,604,712,269,269,461,269,233,269,461,461,506',
'269,418,233,842,600,600,593,593,269,500,604,716,498,269,269,269,269',
'269,269,161,418,104,269,269,721,274,82,82,82,604,82,717,253,269,82,82',
'253,253,497,82,419,82,82,82,82,82,82,82,842,842,842,842,82,82,82,82',
'82,82,82,496,464,82,489,465,337,337,274,722,82,274,488,82,82,82,82,82',
'82,82,82,82,82,487,82,82,485,82,82,82,480,476,419,464,645,645,465,464',
'464,419,465,465,465,465,419,732,732,476,476,82,327,327,82,306,306,82',
'82,734,82,792,792,735,476,736,82,419,476,476,476,476,541,541,82,541',
'541,541,477,82,82,82,82,82,82,739,419,741,82,82,743,473,577,577,577',
'462,577,641,82,82,577,577,458,750,753,577,754,577,577,577,577,577,577',
'577,756,455,758,447,577,577,577,577,577,577,577,446,462,762,429,409',
'462,462,462,462,577,766,406,577,577,577,577,577,577,577,577,577,577',
'380,577,577,368,577,577,577,148,148,148,148,148,58,58,58,58,58,450,450',
'450,450,450,362,346,776,778,577,577,781,577,577,336,577,577,783,577',
'330,577,328,577,310,577,728,309,793,728,728,728,308,577,796,797,801',
'802,577,577,577,577,577,577,805,275,264,577,577,576,576,576,577,576',
'263,814,260,576,576,817,258,162,576,824,576,576,576,576,576,576,576',
'728,728,728,728,576,576,576,576,576,576,576,825,160,827,150,832,147',
'835,582,145,576,144,143,576,576,576,576,576,576,576,576,576,576,136',
'576,576,134,576,576,576,582,582,582,582,582,582,582,582,582,582,582',
'128,582,582,121,850,582,582,120,576,576,116,576,576,115,576,576,113',
'576,860,576,582,576,582,576,582,582,582,582,582,582,582,576,582,112',
'863,109,576,576,576,576,576,576,868,869,870,576,576,94,582,90,576,809',
'809,809,809,809,809,81,50,875,809,809,47,882,43,809,885,809,809,809',
'809,809,809,809,39,24,891,18,809,809,809,809,809,809,809,16,10,809,3',
'900,,,,809,809,809,809,809,809,809,809,809,809,809,809,809,809,,809',
'809,,809,809,809,,,,,,,,,,,,,,,,,,,,809,,,809,,,809,809,,809,,809,,',
',809,,630,,,630,630,630,809,,,,,809,809,809,809,809,809,,,,809,809,769',
'769,769,769,769,769,,,,769,769,,,,769,,769,769,769,769,769,769,769,630',
'630,630,630,769,769,769,769,769,769,769,,,769,,,,,,769,769,769,769,769',
'769,769,769,769,769,769,769,769,769,,769,769,,769,769,769,457,457,457',
'457,457,457,457,,,457,457,,,,,,457,457,,769,,,769,,,769,769,,769,,769',
'457,,457,769,457,457,457,457,457,457,457,769,457,,,,769,769,769,769',
'769,769,,,,769,769,770,770,770,770,770,770,,,,770,770,,,,770,,770,770',
'770,770,770,770,770,,,,,770,770,770,770,770,770,770,,,770,,,,,,770,770',
'770,770,770,770,770,770,770,770,770,770,770,770,,770,770,,770,770,770',
'454,454,454,454,454,454,454,,,454,454,,,,,,454,454,,770,,,770,,,770',
'770,,770,,770,454,,454,770,454,454,454,454,454,454,454,770,454,,,,770',
'770,770,770,770,770,,,,770,770,453,453,453,453,453,453,,,,453,453,,',
',453,,453,453,453,453,453,453,453,,,,,453,453,453,453,453,453,453,,',
'453,,,,,,453,453,453,453,453,453,453,453,453,453,453,453,453,453,,453',
'453,,453,453,453,460,460,460,460,460,460,460,,,460,460,,,,,,460,460',
',453,,,453,,,453,453,,453,,453,460,,460,453,460,460,460,460,460,460',
'460,453,460,,,,453,453,453,453,453,453,,,,453,453,738,738,738,738,738',
'738,,,,738,738,,,,738,,738,738,738,738,738,738,738,,,,,738,738,738,738',
'738,738,738,,,738,,,,,,738,738,738,738,738,738,738,738,738,738,738,738',
'738,738,,738,738,,738,738,738,463,,,,,,,,,,,,,,,,463,463,,738,,,738',
',,738,738,,738,,738,463,,463,738,463,463,463,463,,,463,738,463,,,,738',
'738,738,738,738,738,,,,738,738,540,540,540,540,540,540,,,,540,540,,',
',540,,540,540,540,540,540,540,540,,,,,540,540,540,540,540,540,540,,',
'540,,,,,,540,540,540,540,540,540,540,540,540,540,540,540,540,540,,540',
'540,,540,540,540,467,,,,,,,,,,,,,,,,467,467,,540,,,540,,,540,540,,540',
',540,467,,467,540,467,467,467,467,,,467,540,467,,,,540,540,540,540,540',
'540,,,,540,540,775,775,775,775,775,775,,,,775,775,,,,775,,775,775,775',
'775,775,775,775,,,,,775,775,775,775,775,775,775,,,775,,,,,,775,775,775',
'775,775,775,775,775,775,775,775,775,775,775,,775,775,,775,775,775,479',
'479,479,479,479,479,479,479,479,479,479,,479,479,,,479,479,,775,,,775',
',,775,775,,775,,775,479,,479,775,479,479,479,479,479,479,479,775,479',
',,,775,775,775,775,775,775,,,,775,775,311,311,311,311,311,311,,,,311',
'311,,,,311,,311,311,311,311,311,311,311,,,,,311,311,311,311,311,311',
'311,,,311,,,,,,311,311,311,311,311,311,311,311,311,311,311,311,311,311',
',311,311,,311,311,311,478,478,478,478,478,478,478,,,478,478,,,,,,478',
'478,,311,,,311,,,311,311,,311,,311,478,,478,311,478,478,478,478,478',
'478,478,311,478,,,,311,311,311,311,311,311,,,,311,311,302,302,302,302',
'302,302,,,,302,302,,,,302,,302,302,302,302,302,302,302,,,,,302,302,302',
'302,302,302,302,,,302,,,,,,302,302,302,302,302,302,302,302,302,302,302',
'302,302,302,,302,302,,302,302,302,468,468,468,468,468,468,468,,,468',
'468,,,,,,468,468,,302,,,302,,,302,302,,302,,302,468,,468,302,468,468',
'468,468,468,468,468,302,468,,,,302,302,302,302,302,302,,,,302,302,521',
'521,521,521,521,521,,,,521,521,,,,521,,521,521,521,521,521,521,521,',
',,,521,521,521,521,521,521,521,,,521,,,,,,521,521,521,521,521,521,521',
'521,521,521,521,521,521,521,,521,521,,521,521,521,474,474,474,474,474',
'474,474,,,474,474,,,,,,474,474,,521,,,521,,,521,521,,521,,521,474,,474',
'521,474,474,474,474,474,474,474,521,474,,,,521,521,521,521,521,521,',
',,521,521,698,698,698,698,698,698,,,,698,698,,,,698,,698,698,698,698',
'698,698,698,,,,,698,698,698,698,698,698,698,,,698,,,,,,698,698,698,698',
'698,698,698,698,698,698,698,698,698,698,,698,698,,698,698,698,469,,',
',,,,,,,,,,,,,469,469,,698,,,698,,,698,698,,698,,698,469,,469,698,469',
'469,469,469,,,469,698,469,,,,698,698,698,698,698,698,,,,698,698,501',
'501,501,501,501,501,,,,501,501,,,,501,,501,501,501,501,501,501,501,',
',,,501,501,501,501,501,501,501,,,501,,,,,,501,501,501,501,501,501,501',
'501,501,501,501,501,501,501,,501,501,,501,501,501,472,472,472,472,472',
'472,472,,,472,472,,,,,,472,472,,501,,,501,,,501,501,,501,,501,472,,472',
'501,472,472,472,472,472,472,472,501,472,,,,501,501,501,501,501,501,',
',,501,501,624,624,624,624,624,624,,,,624,624,,,,624,,624,624,624,624',
'624,624,624,,,,,624,624,624,624,624,624,624,,,624,,,,,,624,624,624,624',
'624,624,624,624,624,624,624,624,624,624,,624,624,,624,624,624,466,,',
',,,,,,,,,,,,,466,466,,624,,,624,,,624,624,,624,,624,466,,466,624,466',
'466,466,466,,,466,624,466,,,,624,624,624,624,624,624,,,,624,624,265',
'265,265,265,265,265,,,,265,265,,,,265,,265,265,265,265,265,265,265,',
',,,265,265,265,265,265,265,265,,,265,,,,,,265,265,265,265,265,265,265',
'265,265,265,265,265,265,265,,265,265,,265,265,265,470,470,470,470,470',
'470,470,470,,470,470,,,,,,470,470,,265,,,265,,,265,265,,265,,265,470',
',470,265,470,470,470,470,470,470,470,265,470,,,,265,265,265,265,265',
'265,,,,265,265,821,821,821,821,821,821,,,,821,821,,,,821,,821,821,821',
'821,821,821,821,,,,,821,821,821,821,821,821,821,,,821,,,,,,821,821,821',
'821,821,821,821,821,821,821,821,821,821,821,,821,821,,821,821,821,456',
'456,456,456,456,456,456,456,456,456,456,,456,456,,,456,456,,821,,,821',
',,821,821,,821,,821,456,,456,821,456,456,456,456,456,456,456,821,456',
',,,821,821,821,821,821,821,,,,821,821,695,695,695,695,695,695,,,,695',
'695,,,,695,,695,695,695,695,695,695,695,,,,,695,695,695,695,695,695',
'695,,,695,,,,,,695,695,695,695,695,695,695,695,695,695,695,695,695,695',
',695,695,,695,695,695,475,,,,,,,,,,,,,,,,475,475,,695,,,695,,,695,695',
',695,,695,475,,475,695,475,475,475,475,,,,695,,,,,695,695,695,695,695',
'695,,,,695,695,720,720,720,720,720,720,,,,720,720,,,,720,,720,720,720',
'720,720,720,720,,,,,720,720,720,720,720,720,720,,,720,,,,,,720,720,720',
'720,720,720,720,720,720,720,720,720,720,720,,720,720,,720,720,720,471',
',,,,,,,,,,,,,,,471,471,,720,,,720,,,720,720,,720,,720,471,,471,720,471',
'471,471,471,,,,720,,,,,720,720,720,720,720,720,,,,720,720,163,163,163',
'163,163,163,,,,163,163,,,,163,,163,163,163,163,163,163,163,,,,,163,163',
'163,163,163,163,163,,,163,,,,,,163,163,163,163,163,163,163,163,163,163',
'163,163,163,163,,163,163,,163,163,163,,,,,,,,,,,,,,,,,,,,163,,,163,',
',163,163,,163,,163,,,,163,,,,,,,,163,,,,,163,163,163,163,163,163,,,',
'163,163,748,748,748,748,748,748,,,,748,748,,,,748,,748,748,748,748,748',
'748,748,,,,,748,748,748,748,748,748,748,,,748,,,,,,748,748,748,748,748',
'748,748,748,748,748,748,748,748,748,,748,748,,748,748,748,,,,,,,,,,',
',,,,,,,,,748,,,748,,,748,748,,748,,748,,,,748,,,,,,,,748,,,,,748,748',
'748,748,748,748,,,,748,748,826,826,826,826,826,826,,,,826,826,,,,826',
',826,826,826,826,826,826,826,,,,,826,826,826,826,826,826,826,,,826,',
',,,,826,826,826,826,826,826,826,826,826,826,826,826,826,826,,826,826',
',826,826,826,,,,,,,,,,,,,,,,,,,,826,,,826,,,826,826,,826,,826,,,,826',
',,,,,,,826,,,,,826,826,826,826,826,826,,,,826,826,837,837,837,837,837',
'837,,,,837,837,,,,837,,837,837,837,837,837,837,837,,,,,837,837,837,837',
'837,837,837,,,837,,,,,,837,837,837,837,837,837,837,837,837,837,837,837',
'837,837,,837,837,,837,837,837,,,,,,,,,,,,,,,,,,,,837,,,837,,,837,837',
',837,,837,,,,837,,,,,,,,837,,,,,837,837,837,837,837,837,,,,837,837,840',
'840,840,840,840,840,,,,840,840,,,,840,,840,840,840,840,840,840,840,',
',,,840,840,840,840,840,840,840,,,840,,,,,,840,840,840,840,840,840,840',
'840,840,840,840,840,840,840,,840,840,,840,840,840,,,,,,,,,,,,,,,,,,',
',840,,,840,,,840,840,,840,,840,,,,840,,,,,,,,840,,,,,840,840,840,840',
'840,840,,,,840,840,139,139,139,139,139,139,,,,139,139,,,,139,,139,139',
'139,139,139,139,139,,,,,139,139,139,139,139,139,139,,,139,,,,,,139,139',
'139,139,139,139,139,139,139,139,139,139,139,139,,139,139,,139,139,139',
',,,,,,,,,,,,,,,,,,,139,,,139,,,139,139,,139,,139,,,,139,,,,,,,,139,',
',,,139,139,139,139,139,139,,,,139,139,852,852,852,852,852,852,,,,852',
'852,,,,852,,852,852,852,852,852,852,852,,,,,852,852,852,852,852,852',
'852,,,852,,,,,,852,852,852,852,852,852,852,852,852,852,852,852,852,852',
',852,852,,852,852,852,,,,,,,,,,,,,,,,,,,,852,,,852,,,852,852,,852,,852',
',,,852,,,,,,,,852,,,,,852,852,852,852,852,852,,,,852,852,54,54,54,54',
'54,54,,,,54,54,,,,54,,54,54,54,54,54,54,54,,,,,54,54,54,54,54,54,54',
',,54,,,,,,54,54,54,54,54,54,54,54,54,54,54,54,54,54,,54,54,,54,54,54',
',,,,,,,,,,,,,,,,,,,54,,,54,,,54,54,,54,,54,,,,54,,,,,,,,54,,,,,54,54',
'54,54,54,54,,,,54,54,854,854,854,854,854,854,,,,854,854,,,,854,,854',
'854,854,854,854,854,854,,,,,854,854,854,854,854,854,854,,,854,,,,,,854',
'854,854,854,854,854,854,854,854,854,854,854,854,854,,854,854,,854,854',
'854,,,,,,,,,,,,,,,,,,,,854,,,854,,,854,854,,854,,854,,,,854,,,,,,,,854',
',,,,854,854,854,854,854,854,,,,854,854,483,483,483,483,483,483,,,,483',
'483,,,,483,,483,483,483,483,483,483,483,,,,,483,483,483,483,483,483',
'483,,,483,,,,,,483,483,483,483,483,483,483,483,483,483,483,483,483,483',
',483,483,,483,483,483,,,,,,,,,,,,,,,,,,,,483,,,483,,,483,483,,483,,483',
',,,483,,,,,,,,483,,,,,483,483,483,483,483,483,,,,483,483,2,2,2,2,2,2',
',,,2,2,,,,2,,2,2,2,2,2,2,2,,,,,2,2,2,2,2,2,2,,,2,,,,,,2,2,2,2,2,2,2',
'2,2,2,2,2,2,2,,2,2,,2,2,2,,,,,,,,,,,,,,,,,,,,2,,,2,,,2,2,,2,,2,,,,2',
',,,,,,,2,,,,,2,2,2,2,2,2,,,,2,2,610,610,610,610,610,610,,,,610,610,',
',,610,,610,610,610,610,610,610,610,,,,,610,610,610,610,610,610,610,',
',610,,,,,,610,610,610,610,610,610,610,610,610,610,610,610,610,610,,610',
'610,,610,610,610,,,,,,,,,,,,,,,,,,,,610,,,610,,,610,610,,610,,610,,',
',610,,,,,,,,610,,,,,610,610,610,610,610,610,,,,610,610,317,317,317,',
'317,,,,317,317,,,,317,,317,317,317,317,317,317,317,,,,,317,317,317,317',
'317,317,317,,,317,,,,,,,317,,,317,317,317,317,317,317,317,317,317,317',
',317,317,,317,317,317,,,,,,,,,,,,,,,,,,,,317,,,317,,,317,317,,317,,',
',,,317,,,,,,,,317,,,,,317,317,317,317,317,317,,,,317,317,63,63,63,,63',
',,,63,63,,,,63,,63,63,63,63,63,63,63,,,,,63,63,63,63,63,63,63,,,63,',
',,,,,63,,,63,63,63,63,63,63,63,63,63,63,,63,63,,63,63,63,,,,,,,,,,,',
',,,,,,,,63,,,63,,,63,63,,63,,,,,,63,,,,,,,,63,,,,,63,63,63,63,63,63',
',,,63,63,60,60,60,,60,,,,60,60,,,,60,,60,60,60,60,60,60,60,,,,,60,60',
'60,60,60,60,60,,,,,,,,,,60,,,60,60,60,60,60,60,60,60,60,60,,60,60,,60',
'60,60,,,,,,,,,,,,,,,,,,,,60,,,60,60,,60,60,,60,,60,,60,,60,,,,,,,,60',
',,,,60,60,60,60,60,60,,,,60,60,59,59,59,,59,,,,59,59,,,,59,,59,59,59',
'59,59,59,59,,59,,,59,59,59,59,59,59,59,,,,,,,,,,59,,,59,59,59,59,59',
'59,59,59,59,59,,59,59,,59,59,59,,,,,,,,,,,,,,,,,,,,59,,,59,59,,59,59',
',59,,59,,59,,59,,,,,,,,59,,59,,,59,59,59,59,59,59,,,,59,59,72,72,72',
',72,,,,72,72,,,,72,,72,72,72,72,72,72,72,,,,,72,72,72,72,72,72,72,,',
'72,,,,,,,72,,,72,72,72,72,72,72,72,72,72,72,,72,72,,72,72,72,,,,,,,',
',,,,,,,,,,,,72,,,72,,,72,72,,72,,,,,,72,,,,,,,,72,,,,,72,72,72,72,72',
'72,,,,72,72,76,76,76,,76,,,,76,76,,,,76,,76,76,76,76,76,76,76,,,,,76',
'76,76,76,76,76,76,,,,,,,,,,76,,,76,76,76,76,76,76,76,76,76,76,,76,76',
',76,76,76,,,,,,,,,,,,,,,,,,,,76,,,76,,,76,76,,76,,76,,,,76,,,,,,,,76',
',,,,76,76,76,76,76,76,,,,76,76,78,78,78,,78,,,,78,78,,,,78,,78,78,78',
'78,78,78,78,,78,,,78,78,78,78,78,78,78,,,,,,,,,,78,,,78,78,78,78,78',
'78,78,78,78,78,,78,78,,78,78,78,,,,,,,,,,,,,,,,,,,,78,,,78,78,,78,78',
',78,,78,,78,,78,,,,,,,,78,,78,,,78,78,78,78,78,78,,,,78,78,425,425,425',
',425,,,,425,425,,,,425,,425,425,425,425,425,425,425,,,,,425,425,425',
'425,425,425,425,,,,,,,,,,425,,,425,425,425,425,425,425,425,425,425,425',
',425,425,,425,425,425,,,,,,,,,,,,,,,,,,,,425,,,425,,,425,425,,425,,425',
',,,425,,,,,,,,425,,,,,425,425,425,425,425,425,,,,425,425,637,637,637',
',637,,,,637,637,,,,637,,637,637,637,637,637,637,637,,,,,637,637,637',
'637,637,637,637,,,,,,,,,,637,,,637,637,637,637,637,637,637,637,637,637',
',637,637,,637,637,637,,,,,,,,,,,,,,,,,,,,637,,,637,,,637,637,,637,,637',
',,,637,,,,,,,,637,,,,,637,637,637,637,637,637,,,,637,637,642,642,642',
',642,,,,642,642,,,,642,,642,642,642,642,642,642,642,,,,,642,642,642',
'642,642,642,642,,,,,,,,,,642,,,642,642,642,642,642,642,642,642,642,642',
',642,642,,642,642,642,,,,,,,,,,,,,,,,,,,,642,,,642,,,642,642,,642,,',
',,,642,,,,,,,,642,,,,,642,642,642,642,642,642,,,,642,642,729,729,729',
',729,,,,729,729,,,,729,,729,729,729,729,729,729,729,,,,,729,729,729',
'729,729,729,729,,,,,,,,,,729,,,729,729,729,729,729,729,729,729,729,729',
',729,729,,729,729,729,,,,,,,,,,,,,,,,,,,,729,,,729,,,729,729,,729,,',
',,,729,,,,,,,,729,,,,,729,729,729,729,729,729,,,,729,729,87,87,87,,87',
',,,87,87,,,,87,,87,87,87,87,87,87,87,,,,,87,87,87,87,87,87,87,,,,,,',
',,,87,,,87,87,87,87,87,87,87,87,87,87,,87,87,,87,87,87,,,,,,,,,,,,,',
',,,,,,87,,,87,,,87,87,,87,,,,,,87,,,,,,,,87,,,,,87,87,87,87,87,87,,',
',87,87,872,872,872,,872,,,,872,872,,,,872,,872,872,872,872,872,872,872',
',,,,872,872,872,872,872,872,872,,,,,,,,,,872,,,872,872,872,872,872,872',
'872,872,872,872,,872,872,,872,872,872,,,,,,,,,,,,,,,,,,,,872,,,872,',
',872,872,,872,,872,,,,872,,,,,,,,872,,,,,872,872,872,872,872,872,,,',
'872,872,6,6,6,,6,,,,6,6,,,,6,,6,6,6,6,6,6,6,,,,,6,6,6,6,6,6,6,,,,,,',
',,,6,,,6,6,6,6,6,6,6,6,6,6,435,6,6,435,435,435,6,,,,,,,,,,,,,,,,,,,',
'6,,,6,,,6,6,,6,,6,435,,,,,,,435,435,435,435,,,,,,6,6,6,6,6,6,,,,6,6',
'96,96,96,,96,,,,96,96,,,,96,,96,96,96,96,96,96,96,,,,,96,96,96,96,96',
'96,96,,,,,,,,,,96,,,96,96,96,96,96,96,96,96,96,96,795,96,96,795,795',
'795,96,,,,,,,,,,,,,,,,,,,,96,,,96,,,96,96,,96,,,795,,,,,,,795,795,795',
'795,,,,,,96,96,96,96,96,96,,,,96,96,97,97,97,,97,,,,97,97,,,,97,,97',
'97,97,97,97,97,97,,,,,97,97,97,97,97,97,97,,,97,,,,,,,97,,,97,97,97',
'97,97,97,97,97,97,97,,97,97,,97,97,97,,,,,,,,,,,,,,,,,,,,97,,,97,,,97',
'97,,97,,,,,,97,,,,,,,,97,,,,,97,97,97,97,97,97,,,,97,97,719,719,719',
',719,,,,719,719,,,,719,,719,719,719,719,719,719,719,,,,,719,719,719',
'719,719,719,719,,,719,,,,,,,719,,,719,719,719,719,719,719,719,719,719',
'719,,719,719,,719,719,719,,,,,,,,,,,,,,,,,,,,719,,,719,,,719,719,,719',
',,,,,719,,,,,,,,719,,,,,719,719,719,719,719,719,,,,719,719,749,749,749',
',749,,,,749,749,,,,749,,749,749,749,749,749,749,749,,,,,749,749,749',
'749,749,749,749,,,749,,,,,,,749,,,749,749,749,749,749,749,749,749,749',
'749,,749,749,,749,749,749,,,,,,,,,,,,,,,,,,,,749,,,749,,,749,749,,749',
',,,,,749,,,,,,,,749,,,,,749,749,749,749,749,749,,,,749,749,102,102,102',
',102,,,,102,102,,,,102,,102,102,102,102,102,102,102,,,,,102,102,102',
'102,102,102,102,,,,,,,,,,102,,,102,102,102,102,102,102,102,102,102,102',
',102,102,,102,102,102,,,,,,,,,,,,,,,,,,,,102,,,102,,,102,102,,102,,102',
',,,102,,,,,,,,102,,,,,102,102,102,102,102,102,,,,102,102,897,897,897',
',897,,,,897,897,,,,897,,897,897,897,897,897,897,897,,,,,897,897,897',
'897,897,897,897,,,,,,,,,,897,,,897,897,897,897,897,897,897,897,897,897',
',897,897,,897,897,897,,,,,,,,,,,,,,,,,,,,897,,,897,,,897,897,,897,,',
',,,897,,,,,,,,897,,,,,897,897,897,897,897,897,,,,897,897,510,510,510',
',510,,,,510,510,,,,510,,510,510,510,510,510,510,510,,,,,510,510,510',
'510,510,510,510,,,,,,,,,,510,,,510,510,510,510,510,510,510,510,510,510',
',510,510,,510,510,510,,,,,,,,,,,,,,,,,,,,510,,,510,,,510,510,,510,,510',
',,,510,,,,,,,,510,,,,,510,510,510,510,510,510,,,,510,510,514,514,514',
',514,,,,514,514,,,,514,,514,514,514,514,514,514,514,,,,,514,514,514',
'514,514,514,514,,,,,,,,,,514,,,514,514,514,514,514,514,514,514,514,514',
',514,514,,514,514,514,,,,,,,,,,,,,,,,,,,,514,,,514,,,514,514,,514,,',
',,,514,,,,,,,,514,,,,,514,514,514,514,514,514,,,,514,514,11,11,11,,11',
',,,11,11,,,,11,,11,11,11,11,11,11,11,,,,,11,11,11,11,11,11,11,,,,,,',
',,,11,,,11,11,11,11,11,11,11,11,11,11,,11,11,,11,11,11,,,,,,,,,,,,,',
',,,,,,11,,,11,,,11,11,,11,,11,,11,,11,,,,,,,,11,,,,,11,11,11,11,11,11',
',,,11,11,865,865,865,,865,,,,865,865,,,,865,,865,865,865,865,865,865',
'865,,,,,865,865,865,865,865,865,865,,,,,,,,,,865,,,865,865,865,865,865',
'865,865,865,865,865,,865,865,,865,865,865,,,,,,,,,,,,,,,,,,,,865,,,865',
',,865,865,,865,,,,,,865,,,,,,,,865,,,,,865,865,865,865,865,865,,,,865',
'865,669,669,669,,669,,,,669,669,,,,669,,669,669,669,669,669,669,669',
',,,,669,669,669,669,669,669,669,,,,,,,,,,669,,,669,669,669,669,669,669',
'669,669,669,669,,669,669,,669,669,669,,,,,,,,,,,,,,,,,,,,669,,,669,',
',669,669,,669,,669,,,,669,,,,,,,,669,,,,,669,669,669,669,669,669,,,',
'669,669,452,452,452,,452,,,,452,452,,,,452,,452,452,452,452,452,452',
'452,,,,,452,452,452,452,452,452,452,,,,,,,,,,452,,,452,452,452,452,452',
'452,452,452,452,452,,452,452,,452,452,452,,,,,,,,,,,,,,,,,,,,452,,,452',
',,452,452,,452,,,,,,452,,,,,,,,452,,,,,452,452,452,452,452,452,,,,452',
'452,862,862,862,,862,,,,862,862,,,,862,,862,862,862,862,862,862,862',
',,,,862,862,862,862,862,862,862,,,,,,,,,,862,,,862,862,862,862,862,862',
'862,862,862,862,,862,862,,862,862,862,,,,,,,,,,,,,,,,,,,,862,,,862,',
',862,862,,862,,,,,,862,,,,,,,,862,,,,,862,862,862,862,862,862,,,,862',
'862,857,857,857,,857,,,,857,857,,,,857,,857,857,857,857,857,857,857',
',,,,857,857,857,857,857,857,857,,,,,,,,,,857,,,857,857,857,857,857,857',
'857,857,857,857,,857,857,,857,857,857,,,,,,,,,,,,,,,,,,,,857,,,857,',
',857,857,,857,,,,,,857,,,,,,,,857,,,,,857,857,857,857,857,857,,,,857',
'857,449,449,449,,449,,,,449,449,,,,449,,449,449,449,449,449,449,449',
',,,,449,449,449,449,449,449,449,,,449,,,,,,,449,,,449,449,449,449,449',
'449,449,449,449,449,,449,449,,449,449,449,,,,,,,,,,,,,,,,,,,,449,,,449',
',,449,449,,449,,,,,,449,,,,,,,,449,,,,,449,449,449,449,449,449,,,,449',
'449,56,56,56,,56,,,,56,56,,,,56,,56,56,56,56,56,56,56,,,,,56,56,56,56',
'56,56,56,,,,,,,,,,56,,,56,56,56,56,56,56,56,56,56,56,,56,56,,56,56,56',
',,,,,,,,,,,,,,,,,,,56,,,56,56,,56,56,,56,,56,,56,,56,,,,,,,,56,,,,,56',
'56,56,56,56,56,,,,56,56,53,53,53,,53,,,,53,53,,,,53,,53,53,53,53,53',
'53,53,,,,,53,53,53,53,53,53,53,,,53,,,,,,,53,,,53,53,53,53,53,53,53',
'53,53,53,,53,53,,53,53,53,,,,,,,,,,,,,,,,,,,,53,,,53,,,53,53,,53,,,',
',,53,,,,,,,,53,,,,,53,53,53,53,53,53,,,,53,53,445,445,445,,445,,,,445',
'445,,,,445,,445,445,445,445,445,445,445,,,,,445,445,445,445,445,445',
'445,,,,,,,,,,445,,,445,445,445,445,445,445,445,445,445,445,,445,445',
',445,445,445,,,,,,,,,,,,,,,,,,,,445,,,445,,,445,445,,445,,,,,,445,,',
',,,,,445,,,,,445,445,445,445,445,445,,,,445,445,124,124,124,,124,,,',
'124,124,,,,124,,124,124,124,124,124,124,124,,,,,124,124,124,124,124',
'124,124,,,,,,,,,,124,,,124,124,124,124,124,124,124,124,124,124,,124',
'124,,124,124,124,,,,,,,,,,,,,,,,,,,,124,,,124,,,124,124,,124,,124,,124',
',124,,,,,,,,124,,,,,124,124,124,124,124,124,,,,124,124,444,444,444,',
'444,,,,444,444,,,,444,,444,444,444,444,444,444,444,,,,,444,444,444,444',
'444,444,444,,,,,,,,,,444,,,444,444,444,444,444,444,444,444,444,444,',
'444,444,,444,444,444,,,,,,,,,,,,,,,,,,,,444,,,444,,,444,444,,444,,,',
',,444,,,,,,,,444,,,,,444,444,444,444,444,444,,,,444,444,595,595,595',
',595,,,,595,595,,,,595,,595,595,595,595,595,595,595,,,,,595,595,595',
'595,595,595,595,,,,,,,,,,595,,,595,595,595,595,595,595,595,595,595,595',
',595,595,,595,595,595,,,,,,,,,,,,,,,,,,,,595,,,595,,,595,595,,595,,595',
',,,595,,,,,,,,595,,,,,595,595,595,595,595,595,,,,595,595,437,437,437',
'437,437,437,437,437,,,437,437,437,437,437,,,437,437,437,437,437,437',
'437,,,437,437,437,437,437,437,437,437,437,437,437,437,437,437,437,437',
'437,437,437,437,437,437,437,,,437,,,,,,,,437,437,,437,437,437,437,,437',
'437,,,437,,,,,437,437,437,437,,,,,,,,,,,,,437,437,,437,437,437,437,437',
'437,437,437,437,,437,,,437,437,,,131,131,131,,131,,,437,131,131,,,,131',
',131,131,131,131,131,131,131,,,,,131,131,131,131,131,131,131,,,,,,,',
',,131,,,131,131,131,131,131,131,131,131,131,131,,131,131,,131,131,131',
',,,,,,,,,,,,,,,,,,,131,,,131,,,131,131,,131,,,,,,131,,,,,,,,131,,,,',
'131,131,131,131,131,131,,,,131,131,591,591,591,,591,,,,591,591,,,,591',
',591,591,591,591,591,591,591,,,,,591,591,591,591,591,591,591,,,,,,,',
',,591,,,591,591,591,591,591,591,591,591,591,591,,591,591,,591,591,591',
',,,,,,,,,,,,,,,,,,,591,,,591,,,591,591,,591,,,,,,591,,,,,,,,591,,,,',
'591,591,591,591,591,591,,,,591,591,436,436,436,,436,,,,436,436,,,,436',
',436,436,436,436,436,436,436,,,,,436,436,436,436,436,436,436,,,436,',
',,,,,436,,,436,436,436,436,436,436,436,436,436,436,,436,436,,436,436',
'436,,,,,,,,,,,,,,,,,,,,436,,,436,,,436,436,,436,,,,,,436,,,,,,,,436',
',,,,436,436,436,436,436,436,,,,436,436,711,711,711,,711,,,,711,711,',
',,711,,711,711,711,711,711,711,711,,,,,711,711,711,711,711,711,711,',
',,,,,,,,711,,,711,711,711,711,711,711,711,711,711,711,,711,711,,711',
'711,711,,,,,,,,,,,,,,,,,,,,711,,,711,,,711,711,,711,,711,,711,,711,',
',,,,,,711,,,,,711,711,711,711,711,711,,,,711,711,686,686,686,,686,,',
',686,686,,,,686,,686,686,686,686,686,686,686,,,,,686,686,686,686,686',
'686,686,,,,,,,,,,686,,,686,686,686,686,686,686,686,686,686,686,,686',
'686,,686,686,686,,,,,,,,,,,,,,,,,,,,686,,,686,,,686,686,,686,,,,,,686',
',,,,,,,686,,,,,686,686,686,686,686,686,,,,686,686,363,363,363,,363,',
',,363,363,,,,363,,363,363,363,363,363,363,363,,,,,363,363,363,363,363',
'363,363,,,,,,,,,,363,,,363,363,363,363,363,363,363,363,363,363,,363',
'363,,363,363,363,,,,,,,,,,,,,,,,,,,,363,,,363,363,,363,363,,363,,363',
',363,,363,,,,,,,,363,,,,,363,363,363,363,363,363,,,,363,363,51,51,51',
',51,,,,51,51,,,,51,,51,51,51,51,51,51,51,,,,,51,51,51,51,51,51,51,,',
',,,,,,,51,,,51,51,51,51,51,51,51,51,51,51,,51,51,,51,51,51,,,,,,,,,',
',,,,,,,,,,51,,,51,,,51,51,,51,,51,,51,,51,,,,,,,,51,,,,,51,51,51,51',
'51,51,,,,51,51,141,141,141,,141,,,,141,141,,,,141,,141,141,141,141,141',
'141,141,,,,,141,141,141,141,141,141,141,,,,,,,,,,141,,,141,141,141,141',
'141,141,141,141,141,141,,141,141,,141,141,141,,,,,,,,,,,,,,,,,,,,141',
',,141,,,141,141,,141,,,,,,141,,,,,,,,141,,,,,141,141,141,141,141,141',
',,,141,141,665,665,665,,665,,,,665,665,,,,665,,665,665,665,665,665,665',
'665,,,,,665,665,665,665,665,665,665,,,,,,,,,,665,,,665,665,665,665,665',
'665,665,665,665,665,,665,665,,665,665,665,,,,,,,,,,,,,,,,,,,,665,,,665',
',,665,665,,665,,665,,,,665,,,,,,,,665,,,,,665,665,665,665,665,665,,',
',665,665,664,664,664,,664,,,,664,664,,,,664,,664,664,664,664,664,664',
'664,,,,,664,664,664,664,664,664,664,,,,,,,,,,664,,,664,664,664,664,664',
'664,664,664,664,664,,664,664,,664,664,664,,,,,,,,,,,,,,,,,,,,664,,,664',
',,664,664,,664,,,,,,664,,,,,,,,664,,,,,664,664,664,664,664,664,,,,664',
'664,520,520,520,,520,,,,520,520,,,,520,,520,520,520,520,520,520,520',
',,,,520,520,520,520,520,520,520,,,,,,,,,,520,,,520,520,520,520,520,520',
'520,520,520,520,,520,520,,520,520,520,,,,,,,,,,,,,,,,,,,,520,,,520,',
',520,520,,520,,,,,,520,,,,,,,,520,,,,,520,520,520,520,520,520,,,,520',
'520,146,146,146,,146,,,,146,146,,,,146,,146,146,146,146,146,146,146',
',,,,146,146,146,146,146,146,146,,,,,,,,,,146,,,146,146,146,146,146,146',
'146,146,146,146,,146,146,,146,146,146,,,,,,,,,,,,,,,,,,,,146,,,146,',
',146,146,,146,,,,,,146,,,,,,,,146,,,,,146,146,146,146,146,146,,,,146',
'146,834,834,834,,834,,,,834,834,,,,834,,834,834,834,834,834,834,834',
',,,,834,834,834,834,834,834,834,,,,,,,,,,834,,,834,834,834,834,834,834',
'834,834,834,834,,834,834,,834,834,834,,,,,,,,,,,,,,,,,,,,834,,,834,',
',834,834,,834,,834,,834,,834,,,,,,,,834,,,,,834,834,834,834,834,834',
',,,834,834,585,585,585,,585,,,,585,585,,,,585,,585,585,585,585,585,585',
'585,,,,,585,585,585,585,585,585,585,,,,,,,,,,585,,,585,585,585,585,585',
'585,585,585,585,585,,585,585,,585,585,585,,,,,,,,,,,,,,,,,,,,585,,,585',
',,585,585,,585,,,,,,585,,,,,,,,585,,,,,585,585,585,585,585,585,,,,585',
'585,14,14,14,14,14,,,,14,14,,,,14,,14,14,14,14,14,14,14,,,,,14,14,14',
'14,14,14,14,,,14,,,,,,14,14,14,14,14,14,14,14,14,14,14,14,14,14,,14',
'14,,14,14,14,,,,,,,,,,,,,,,,,,,,14,,,14,,,14,14,,14,,14,,,,14,,,,,,',
',14,,,,,14,14,14,14,14,14,,,,14,14,831,831,831,,831,,,,831,831,,,,831',
',831,831,831,831,831,831,831,,,,,831,831,831,831,831,831,831,,,,,,,',
',,831,,,831,831,831,831,831,831,831,831,831,831,,831,831,,831,831,831',
',,,,,,,,,,,,,,,,,,,831,,,831,,,831,831,,831,,831,,831,,831,,,,,,,,831',
',,,,831,831,831,831,831,831,,,,831,831,154,154,154,,154,,,,154,154,',
',,154,,154,154,154,154,154,154,154,,,,,154,154,154,154,154,154,154,',
',,,,,,,,154,,,154,154,154,154,154,154,154,154,154,154,,154,154,,,,154',
',,,,,,,,,,,,,,,,,,,154,,,154,,,154,154,,154,,,,,,,,,,,,,,,,,,,154,154',
'154,154,154,154,,,,154,154,155,155,155,,155,,,,155,155,,,,155,,155,155',
'155,155,155,155,155,,,,,155,155,155,155,155,155,155,,,,,,,,,,155,,,155',
'155,155,155,155,155,155,155,155,155,,155,155,,155,155,155,,,,,,,,,,',
',,,,,,,,,155,,,155,,,155,155,,155,,,,,,155,,,,,,,,155,,,,,155,155,155',
'155,155,155,,,,155,155,708,708,708,,708,,,,708,708,,,,708,,708,708,708',
'708,708,708,708,,,,,708,708,708,708,708,708,708,,,,,,,,,,708,,,708,708',
'708,708,708,708,708,708,708,708,,708,708,,708,708,708,,,,,,,,,,,,,,',
',,,,,708,,,708,,,708,708,,708,,,,,,708,,,,,,,,708,,,,,708,708,708,708',
'708,708,,,,708,708,412,412,412,,412,,,,412,412,,,,412,,412,412,412,412',
'412,412,412,,,,,412,412,412,412,412,412,412,,,412,,,,,,,412,,,412,412',
'412,412,412,412,412,412,412,412,,412,412,,412,412,412,,,,,,,,,,,,,,',
',,,,,412,,,412,,,412,412,,412,,,,,,412,,,,,,,,412,,,,,412,412,412,412',
'412,412,,,,412,412,884,884,884,,884,,,,884,884,,,,884,,884,884,884,884',
'884,884,884,,,,,884,884,884,884,884,884,884,,,,,,,,,,884,,,884,884,884',
'884,884,884,884,884,884,884,,884,884,,884,884,884,,,,,,,,,,,,,,,,,,',
',884,,,884,,,884,884,,884,,884,,884,,884,,,,,,,,884,,,,,884,884,884',
'884,884,884,,,,884,884,822,822,822,,822,,,,822,822,,,,822,,822,822,822',
'822,822,822,822,,,,,822,822,822,822,822,822,822,,,,,,,,,,822,,,822,822',
'822,822,822,822,822,822,822,822,,822,822,,822,822,822,,,,,,,,,,,,,,',
',,,,,822,,,822,,,822,822,,822,,822,,,,822,,,,,,,,822,,,,,822,822,822',
'822,822,822,,,,822,822,662,662,662,,662,,,,662,662,,,,662,,662,662,662',
'662,662,662,662,,,,,662,662,662,662,662,662,662,,,,,,,,,,662,,,662,662',
'662,662,662,662,662,662,662,662,,662,662,,662,662,662,,,,,,,,,,,,,,',
',,,,,662,,,662,,,662,662,,662,,,,,,662,,,,,,,,662,,,,,662,662,662,662',
'662,662,,,,662,662,164,164,164,,164,,,,164,164,,,,164,,164,164,164,164',
'164,164,164,,,,,164,164,164,164,164,164,164,,,,,,,,,,164,,,164,164,164',
'164,164,164,164,164,164,164,,164,164,,,,164,,,,,,,,,,,,,,,,,,,,164,',
',164,,,164,164,,164,,,,,,,,,,,,,,,,,,,164,164,164,164,164,164,,,,164',
'164,165,165,165,,165,,,,165,165,,,,165,,165,165,165,165,165,165,165',
',,,,165,165,165,165,165,165,165,,,,,,,,,,165,,,165,165,165,165,165,165',
'165,165,165,165,,165,165,,,,165,,,,,,,,,,,,,,,,,,,,165,,,165,,,165,165',
',165,,,,,,,,,,,,,,,,,,,165,165,165,165,165,165,,,,165,165,654,654,654',
',654,,,,654,654,,,,654,,654,654,654,654,654,654,654,,,,,654,654,654',
'654,654,654,654,,,,,,,,,,654,,,654,654,654,654,654,654,654,654,654,654',
',654,654,,654,654,654,,,,,,,,,,,,,,,,,,,,654,,,654,,,654,654,,654,,654',
',654,,654,,,,,,,,654,,,,,654,654,654,654,654,654,,,,654,654,408,408',
'408,,408,,,,408,408,,,,408,,408,408,408,408,408,408,408,,,,,408,408',
'408,408,408,408,408,,,,,,,,,,408,,,408,408,408,408,408,408,408,408,408',
'408,,408,408,,408,408,408,,,,,,,,,,,,,,,,,,,,408,,,408,,,408,408,,408',
',408,,408,,408,,,,,,,,408,,,,,408,408,408,408,408,408,,,,408,408,572',
'572,572,,572,,,,572,572,,,,572,,572,572,572,572,572,572,572,,,,,572',
'572,572,572,572,572,572,,,,,,,,,,572,,,572,572,572,572,572,572,572,572',
'572,572,,572,572,,572,572,572,,,,,,,,,,,,,,,,,,,,572,,,572,,,572,572',
',572,,,,,,572,,,,,,,,572,,,,,572,572,572,572,572,572,,,,572,572,767',
'767,767,,767,,,,767,767,,,,767,,767,767,767,767,767,767,767,,,,,767',
'767,767,767,767,767,767,,,,,,,,,,767,,,767,767,767,767,767,767,767,767',
'767,767,,767,767,,767,767,767,,,,,,,,,,,,,,,,,,,,767,,,767,,,767,767',
',767,,,,,,767,,,,,,,,767,,,,,767,767,767,767,767,767,,,,767,767,405',
'405,405,,405,,,,405,405,,,,405,,405,405,405,405,405,405,405,,,,,405',
'405,405,405,405,405,405,,,,,,,,,,405,,,405,405,405,405,405,405,405,405',
'405,405,,405,405,,405,405,405,,,,,,,,,,,,,,,,,,,,405,,,405,,,405,405',
',405,,,,,,405,,,,,,,,405,,,,,405,405,405,405,405,405,,,,405,405,564',
'564,564,,564,,,,564,564,,,,564,,564,564,564,564,564,564,564,,,,,564',
'564,564,564,564,564,564,,,,,,,,,,564,,,564,564,564,564,564,564,564,564',
'564,564,,564,564,,,,564,,,,,,,,,,,,,,,,,,,,564,,,564,,,564,564,,564',
',564,,,,,,,,,,,564,,,,,,564,564,564,564,564,564,,,,564,564,560,560,560',
',560,,,,560,560,,,,560,,560,560,560,560,560,560,560,,,,,560,560,560',
'560,560,560,560,,,560,,,,,,,560,,,560,560,560,560,560,560,560,560,560',
'560,,560,560,,560,560,560,,,,,,,,,,,,,,,,,,,,560,,,560,,,560,560,,560',
',,,,,560,,,,,,,,560,,,,,560,560,560,560,560,560,,,,560,560,404,404,404',
',404,,,,404,404,,,,404,,404,404,404,404,404,404,404,,,,,404,404,404',
'404,404,404,404,,,,,,,,,,404,,,404,404,404,404,404,404,404,404,404,404',
',404,404,,404,404,404,,,,,,,,,,,,,,,,,,,,404,,,404,,,404,404,,404,,404',
',404,,404,,,,,,,,404,,,,,404,404,404,404,404,404,,,,404,404,401,401',
'401,,401,,,,401,401,,,,401,,401,401,401,401,401,401,401,,,,,401,401',
'401,401,401,401,401,,,,,,,,,,401,,,401,401,401,401,401,401,401,401,401',
'401,,401,401,,401,401,401,,,,,,,,,,,,,,,,,,,,401,,,401,,,401,401,,401',
',,,,,401,,,,,,,,401,,,,,401,401,401,401,401,401,,,,401,401,707,707,707',
',707,,,,707,707,,,,707,,707,707,707,707,707,707,707,,,,,707,707,707',
'707,707,707,707,,,,,,,,,,707,,,707,707,707,707,707,707,707,707,707,707',
',707,707,,707,707,707,,,,,,,,,,,,,,,,,,,,707,,,707,,,707,707,,707,,',
',,,707,,,,,,,,707,,,,,707,707,707,707,707,707,,,,707,707,399,399,399',
',399,,,,399,399,,,,399,,399,399,399,399,399,399,399,,,,,399,399,399',
'399,399,399,399,,,,,,,,,,399,,,399,399,399,399,399,399,399,399,399,399',
',399,399,,399,399,399,,,,,,,,,,,,,,,,,,,,399,,,399,,,399,399,,399,,',
',,,399,,,,,,,,399,,,,,399,399,399,399,399,399,,,,399,399,261,261,261',
',261,,,,261,261,,,,261,,261,261,261,261,261,261,261,,,,,261,261,261',
'261,261,261,261,,,261,,,,,,,261,,,261,261,261,261,261,261,261,261,261',
'261,,261,261,,261,261,261,,,,,,,,,,,,,,,,,,,,261,,,261,,,261,261,,261',
',,,,,261,,,,,,,,261,,,,,261,261,261,261,261,261,,,,261,261,262,262,262',
',262,,,,262,262,,,,262,,262,262,262,262,262,262,262,,,,,262,262,262',
'262,262,262,262,,,262,,,,,,,262,,,262,262,262,262,262,262,262,262,262',
'262,,262,262,,262,262,262,,,,,,,,,,,,,,,,,,,,262,,,262,,,262,262,,262',
',,,,,262,,,,,,,,262,,,,,262,262,262,262,262,262,,,,262,262,811,811,811',
',811,,,,811,811,,,,811,,811,811,811,811,811,811,811,,,,,811,811,811',
'811,811,811,811,,,,,,,,,,811,,,811,811,811,811,811,811,811,811,811,811',
',811,811,,,,811,,,,,,,,,,,,,,,,,,,,811,,,811,,,811,811,,811,,,,,,,,',
',,,,,,,,,,811,811,811,811,811,811,,,,811,811,398,398,398,,398,,,,398',
'398,,,,398,,398,398,398,398,398,398,398,,,,,398,398,398,398,398,398',
'398,,,,,,,,,,398,,,398,398,398,398,398,398,398,398,398,398,,398,398',
',398,398,398,,,,,,,,,,,,,,,,,,,,398,,,398,,,398,398,,398,,,,,,398,,',
',,,,,398,,,,,398,398,398,398,398,398,,,,398,398,267,267,267,,267,,,',
'267,267,,,,267,,267,267,267,267,267,267,267,,,,,267,267,267,267,267',
'267,267,,,,,,,,,,267,,,267,267,267,267,267,267,267,267,267,267,,267',
'267,,267,267,267,,,,,,,,,,,,,,,,,,,,267,,,267,267,,267,267,,267,,,,',
',267,,,,,,,,267,,,,,267,267,267,267,267,267,,,,267,267,31,31,31,31,31',
'31,31,31,,,31,31,31,31,31,,,31,31,31,31,31,31,31,,,31,31,31,31,31,31',
'31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,,,31,,,,,,,,31,31',
',31,31,31,31,,31,31,,,31,,,,,31,31,31,31,,,,,,,,,,,,,31,31,,31,31,31',
'31,31,31,31,31,31,,31,,,31,31,,,30,30,30,,30,,,31,30,30,,,,30,,30,30',
'30,30,30,30,30,,,,,30,30,30,30,30,30,30,,,,,,,,,,30,,,30,30,30,30,30',
'30,30,30,30,30,,30,30,,30,30,30,,,,,,,,,,,,,,,,,,,,30,,,30,,,30,30,',
'30,,,,,,30,,,,,,,,30,,,,,30,30,30,30,30,30,,,,30,30,29,29,29,29,29,29',
'29,29,,,29,29,29,29,29,,,29,29,29,29,29,29,29,,,29,29,29,29,29,29,29',
'29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,29,,29,,,,,,,,29,29',
',29,29,29,29,,29,29,,,29,,,,,29,29,29,29,,,,,,,,,,,,,29,29,,29,29,29',
'29,29,29,29,29,29,,29,,,29,29,,,276,276,276,,276,,,29,276,276,,,,276',
',276,276,276,276,276,276,276,,,,,276,276,276,276,276,276,276,,,,,,,',
',,276,,,276,276,276,276,276,276,276,276,276,276,,276,276,,276,276,276',
',,,,,,,,,,,,,,,,,,,276,,,276,,,276,276,,276,,,,,,276,,,,,,,,276,,,,',
'276,276,276,276,276,276,,,,276,276,277,277,277,,277,,,,277,277,,,,277',
',277,277,277,277,277,277,277,,,,,277,277,277,277,277,277,277,,,,,,,',
',,277,,,277,277,277,277,277,277,277,277,277,277,,277,277,,277,277,277',
',,,,,,,,,,,,,,,,,,,277,,,277,,,277,277,,277,,,,,,277,,,,,,,,277,,,,',
'277,277,277,277,277,277,,,,277,277,278,278,278,,278,,,,278,278,,,,278',
',278,278,278,278,278,278,278,,,,,278,278,278,278,278,278,278,,,,,,,',
',,278,,,278,278,278,278,278,278,278,278,278,278,,278,278,,278,278,278',
',,,,,,,,,,,,,,,,,,,278,,,278,,,278,278,,278,,,,,,278,,,,,,,,278,,,,',
'278,278,278,278,278,278,,,,278,278,279,279,279,,279,,,,279,279,,,,279',
',279,279,279,279,279,279,279,,,,,279,279,279,279,279,279,279,,,,,,,',
',,279,,,279,279,279,279,279,279,279,279,279,279,,279,279,,279,279,279',
',,,,,,,,,,,,,,,,,,,279,,,279,,,279,279,,279,,,,,,279,,,,,,,,279,,,,',
'279,279,279,279,279,279,,,,279,279,280,280,280,,280,,,,280,280,,,,280',
',280,280,280,280,280,280,280,,,,,280,280,280,280,280,280,280,,,,,,,',
',,280,,,280,280,280,280,280,280,280,280,280,280,,280,280,,280,280,280',
',,,,,,,,,,,,,,,,,,,280,,,280,,,280,280,,280,,,,,,280,,,,,,,,280,,,,',
'280,280,280,280,280,280,,,,280,280,281,281,281,,281,,,,281,281,,,,281',
',281,281,281,281,281,281,281,,,,,281,281,281,281,281,281,281,,,,,,,',
',,281,,,281,281,281,281,281,281,281,281,281,281,,281,281,,281,281,281',
',,,,,,,,,,,,,,,,,,,281,,,281,,,281,281,,281,,,,,,281,,,,,,,,281,,,,',
'281,281,281,281,281,281,,,,281,281,282,282,282,,282,,,,282,282,,,,282',
',282,282,282,282,282,282,282,,,,,282,282,282,282,282,282,282,,,,,,,',
',,282,,,282,282,282,282,282,282,282,282,282,282,,282,282,,282,282,282',
',,,,,,,,,,,,,,,,,,,282,,,282,,,282,282,,282,,,,,,282,,,,,,,,282,,,,',
'282,282,282,282,282,282,,,,282,282,283,283,283,,283,,,,283,283,,,,283',
',283,283,283,283,283,283,283,,,,,283,283,283,283,283,283,283,,,,,,,',
',,283,,,283,283,283,283,283,283,283,283,283,283,,283,283,,283,283,283',
',,,,,,,,,,,,,,,,,,,283,,,283,,,283,283,,283,,,,,,283,,,,,,,,283,,,,',
'283,283,283,283,283,283,,,,283,283,284,284,284,,284,,,,284,284,,,,284',
',284,284,284,284,284,284,284,,,,,284,284,284,284,284,284,284,,,,,,,',
',,284,,,284,284,284,284,284,284,284,284,284,284,,284,284,,284,284,284',
',,,,,,,,,,,,,,,,,,,284,,,284,,,284,284,,284,,,,,,284,,,,,,,,284,,,,',
'284,284,284,284,284,284,,,,284,284,285,285,285,,285,,,,285,285,,,,285',
',285,285,285,285,285,285,285,,,,,285,285,285,285,285,285,285,,,,,,,',
',,285,,,285,285,285,285,285,285,285,285,285,285,,285,285,,285,285,285',
',,,,,,,,,,,,,,,,,,,285,,,285,,,285,285,,285,,,,,,285,,,,,,,,285,,,,',
'285,285,285,285,285,285,,,,285,285,286,286,286,,286,,,,286,286,,,,286',
',286,286,286,286,286,286,286,,,,,286,286,286,286,286,286,286,,,,,,,',
',,286,,,286,286,286,286,286,286,286,286,286,286,,286,286,,286,286,286',
',,,,,,,,,,,,,,,,,,,286,,,286,,,286,286,,286,,,,,,286,,,,,,,,286,,,,',
'286,286,286,286,286,286,,,,286,286,287,287,287,,287,,,,287,287,,,,287',
',287,287,287,287,287,287,287,,,,,287,287,287,287,287,287,287,,,,,,,',
',,287,,,287,287,287,287,287,287,287,287,287,287,,287,287,,287,287,287',
',,,,,,,,,,,,,,,,,,,287,,,287,,,287,287,,287,,,,,,287,,,,,,,,287,,,,',
'287,287,287,287,287,287,,,,287,287,288,288,288,,288,,,,288,288,,,,288',
',288,288,288,288,288,288,288,,,,,288,288,288,288,288,288,288,,,,,,,',
',,288,,,288,288,288,288,288,288,288,288,288,288,,288,288,,288,288,288',
',,,,,,,,,,,,,,,,,,,288,,,288,,,288,288,,288,,,,,,288,,,,,,,,288,,,,',
'288,288,288,288,288,288,,,,288,288,289,289,289,,289,,,,289,289,,,,289',
',289,289,289,289,289,289,289,,,,,289,289,289,289,289,289,289,,,,,,,',
',,289,,,289,289,289,289,289,289,289,289,289,289,,289,289,,289,289,289',
',,,,,,,,,,,,,,,,,,,289,,,289,,,289,289,,289,,,,,,289,,,,,,,,289,,,,',
'289,289,289,289,289,289,,,,289,289,290,290,290,,290,,,,290,290,,,,290',
',290,290,290,290,290,290,290,,,,,290,290,290,290,290,290,290,,,,,,,',
',,290,,,290,290,290,290,290,290,290,290,290,290,,290,290,,290,290,290',
',,,,,,,,,,,,,,,,,,,290,,,290,,,290,290,,290,,,,,,290,,,,,,,,290,,,,',
'290,290,290,290,290,290,,,,290,290,291,291,291,,291,,,,291,291,,,,291',
',291,291,291,291,291,291,291,,,,,291,291,291,291,291,291,291,,,,,,,',
',,291,,,291,291,291,291,291,291,291,291,291,291,,291,291,,291,291,291',
',,,,,,,,,,,,,,,,,,,291,,,291,,,291,291,,291,,,,,,291,,,,,,,,291,,,,',
'291,291,291,291,291,291,,,,291,291,292,292,292,,292,,,,292,292,,,,292',
',292,292,292,292,292,292,292,,,,,292,292,292,292,292,292,292,,,,,,,',
',,292,,,292,292,292,292,292,292,292,292,292,292,,292,292,,292,292,292',
',,,,,,,,,,,,,,,,,,,292,,,292,,,292,292,,292,,,,,,292,,,,,,,,292,,,,',
'292,292,292,292,292,292,,,,292,292,293,293,293,,293,,,,293,293,,,,293',
',293,293,293,293,293,293,293,,,,,293,293,293,293,293,293,293,,,,,,,',
',,293,,,293,293,293,293,293,293,293,293,293,293,,293,293,,293,293,293',
',,,,,,,,,,,,,,,,,,,293,,,293,,,293,293,,293,,,,,,293,,,,,,,,293,,,,',
'293,293,293,293,293,293,,,,293,293,294,294,294,,294,,,,294,294,,,,294',
',294,294,294,294,294,294,294,,,,,294,294,294,294,294,294,294,,,,,,,',
',,294,,,294,294,294,294,294,294,294,294,294,294,,294,294,,294,294,294',
',,,,,,,,,,,,,,,,,,,294,,,294,,,294,294,,294,,,,,,294,,,,,,,,294,,,,',
'294,294,294,294,294,294,,,,294,294,295,295,295,,295,,,,295,295,,,,295',
',295,295,295,295,295,295,295,,,,,295,295,295,295,295,295,295,,,,,,,',
',,295,,,295,295,295,295,295,295,295,295,295,295,,295,295,,295,295,295',
',,,,,,,,,,,,,,,,,,,295,,,295,,,295,295,,295,,,,,,295,,,,,,,,295,,,,',
'295,295,295,295,295,295,,,,295,295,296,296,296,,296,,,,296,296,,,,296',
',296,296,296,296,296,296,296,,,,,296,296,296,296,296,296,296,,,,,,,',
',,296,,,296,296,296,296,296,296,296,296,296,296,,296,296,,296,296,296',
',,,,,,,,,,,,,,,,,,,296,,,296,,,296,296,,296,,,,,,296,,,,,,,,296,,,,',
'296,296,296,296,296,296,,,,296,296,297,297,297,,297,,,,297,297,,,,297',
',297,297,297,297,297,297,297,,,,,297,297,297,297,297,297,297,,,,,,,',
',,297,,,297,297,297,297,297,297,297,297,297,297,,297,297,,297,297,297',
',,,,,,,,,,,,,,,,,,,297,,,297,,,297,297,,297,,,,,,297,,,,,,,,297,,,,',
'297,297,297,297,297,297,,,,297,297,298,298,298,,298,,,,298,298,,,,298',
',298,298,298,298,298,298,298,,,,,298,298,298,298,298,298,298,,,,,,,',
',,298,,,298,298,298,298,298,298,298,298,298,298,,298,298,,298,298,298',
',,,,,,,,,,,,,,,,,,,298,,,298,,,298,298,,298,,,,,,298,,,,,,,,298,,,,',
'298,298,298,298,298,298,,,,298,298,299,299,299,,299,,,,299,299,,,,299',
',299,299,299,299,299,299,299,,,,,299,299,299,299,299,299,299,,,,,,,',
',,299,,,299,299,299,299,299,299,299,299,299,299,,299,299,,299,299,299',
',,,,,,,,,,,,,,,,,,,299,,,299,,,299,299,,299,,,,,,299,,,,,,,,299,,,,',
'299,299,299,299,299,299,,,,299,299,300,300,300,,300,,,,300,300,,,,300',
',300,300,300,300,300,300,300,,,,,300,300,300,300,300,300,300,,,,,,,',
',,300,,,300,300,300,300,300,300,300,300,300,300,,300,300,,300,300,300',
',,,,,,,,,,,,,,,,,,,300,,,300,,,300,300,,300,,,,,,300,,,,,,,,300,,,,',
'300,300,300,300,300,300,,,,300,300,301,301,301,,301,,,,301,301,,,,301',
',301,301,301,301,301,301,301,,,,,301,301,301,301,301,301,301,,,,,,,',
',,301,,,301,301,301,301,301,301,301,301,301,301,,301,301,,301,301,301',
',,,,,,,,,,,,,,,,,,,301,,,301,,,301,301,,301,,,,,,301,,,,,,,,301,,,,',
'301,301,301,301,301,301,,,,301,301,395,395,395,,395,,,,395,395,,,,395',
',395,395,395,395,395,395,395,,,,,395,395,395,395,395,395,395,,,,,,,',
',,395,,,395,395,395,395,395,395,395,395,395,395,,395,395,,395,395,395',
',,,,,,,,,,,,,,,,,,,395,,,395,,,395,395,,395,,395,,,,395,,,,,,,,395,',
',,,395,395,395,395,395,395,,,,395,395,389,389,389,,389,,,,389,389,,',
',389,,389,389,389,389,389,389,389,,,,,389,389,389,389,389,389,389,,',
'389,,,,,,,389,,,389,389,389,389,389,389,389,389,389,389,,389,389,,389',
'389,389,,,,,,,,,,,,,,,,,,,,389,,,389,,,389,389,,389,,389,,389,,389,',
',,,,,,389,,,,,389,389,389,389,389,389,,,,389,389,527,527,527,,527,,',
',527,527,,,,527,,527,527,527,527,527,527,527,,,,,527,527,527,527,527',
'527,527,,,,,,,,,,527,,,527,527,527,527,527,527,527,527,527,527,,527',
'527,,527,527,527,,,,,,,,,,,,,,,,,,,,527,,,527,,,527,527,,527,,,,,,527',
',,,,,,,527,,,,,527,527,527,527,527,527,,,,527,527,700,700,700,,700,',
',,700,700,,,,700,,700,700,700,700,700,700,700,,,,,700,700,700,700,700',
'700,700,,,,,,,,,,700,,,700,700,700,700,700,700,700,700,700,700,,700',
'700,,700,700,700,,,,,,,,,,,,,,,,,,,,700,,,700,,,700,700,,700,,700,,700',
',700,,,,,,,,700,,,,,700,700,700,700,700,700,,,,700,700,788,788,788,',
'788,,,,788,788,,,,788,,788,788,788,788,788,788,788,,,,,788,788,788,788',
'788,788,788,,,,,,,,,,788,,,788,788,788,788,788,788,788,788,788,788,',
'788,788,,788,788,788,,,,,,,,,,,,,,,,,,,,788,,,788,,,788,788,,788,,,',
',,788,,,,,,,,788,,,,,788,788,788,788,788,788,,,,788,788,25,25,25,,25',
',,,25,25,,,,25,,25,25,25,25,25,25,25,,,,,25,25,25,25,25,25,25,,,,,,',
',,,25,,,25,25,25,25,25,25,25,25,25,25,,25,25,,25,25,25,,,,,,,,,,,,,',
',,,,,,25,,,25,,,25,25,,25,,,,,,25,,,,,,,,25,,,,,25,25,25,25,25,25,,',
',25,25,313,313,313,,313,,,,313,313,,,,313,,313,313,313,313,313,313,313',
',,,,313,313,313,313,313,313,313,,,,,,,,,,313,,,313,313,313,313,313,313',
'313,313,313,313,,313,313,,313,313,313,,,,,,,,,,,,,,,,,,,,313,,,313,',
'313,313,313,,313,,313,,313,,313,,,,,,,,313,,,,,313,313,313,313,313,313',
',,,313,313,314,314,314,,314,,,,314,314,,,,314,,314,314,314,314,314,314',
'314,,,,,314,314,314,314,314,314,314,,,314,,,,,,,314,,,314,314,314,314',
'314,314,314,314,314,314,,314,314,,314,314,314,,,,,,,,,,,,,,,,,,,,314',
',,314,,,314,314,,314,,,,,,314,,,,,,,,314,,,,,314,314,314,314,314,314',
',,,314,314,315,315,315,,315,,,,315,315,,,,315,,315,315,315,315,315,315',
'315,,,,,315,315,315,315,315,315,315,,,315,,,,,,,315,,,315,315,315,315',
'315,315,315,315,315,315,,315,315,,315,315,315,,,,,,,,,,,,,,,,,,,,315',
',,315,,,315,315,,315,,,,,,315,,,,,,,,315,,,,,315,315,315,315,315,315',
',,,315,315,316,316,316,,316,,,,316,316,,,,316,,316,316,316,316,316,316',
'316,,,,,316,316,316,316,316,316,316,,,316,,,,,,,316,,,316,316,316,316',
'316,316,316,316,316,316,,316,316,,316,316,316,,,,,,,,,,,,,,,,,,,,316',
',,316,,,316,316,,316,,,,,,316,,,,,,,,316,,,,,316,316,316,316,316,316',
',,,316,316,61,61,61,,61,,,,61,61,,,,61,,61,61,61,61,61,61,61,,,,,61',
'61,61,61,61,61,61,,,,,,,,,,61,,,61,61,61,61,61,61,61,61,61,61,,61,61',
',61,61,61,,,,,,,,,,,,,,,,,,,,61,,,61,,,61,61,,61,,,,,,61,,,,,,,,61,',
',,,61,61,61,61,61,61,,,,61,61,318,318,318,318,318,,,,318,318,,,,318',
',318,318,318,318,318,318,318,,,,,318,318,318,318,318,318,318,,,318,',
',,,,318,318,318,318,318,318,318,318,318,318,318,318,318,318,,318,318',
',318,318,318,,,,,,,,,,,,,,,,,,,,318,,,318,,,318,318,,318,,318,,,,318',
',,,,,,,318,,,,,318,318,318,318,318,318,,,,318,318,321,321,321,,321,',
',,321,321,,,,321,,321,321,321,321,321,321,321,,,,,321,321,321,321,321',
'321,321,,,,,,,,,,321,,,321,321,321,321,321,321,321,321,321,321,,321',
'321,,321,321,321,,,,,,,,,,,,,,,,,,,,321,,,321,,,321,321,,321,,321,,321',
',321,,,,,,,,321,,,,,321,321,321,321,321,321,,,,321,321,17,17,17,,17',
',,,17,17,,,,17,,17,17,17,17,17,17,17,,,,,17,17,17,17,17,17,17,,,,,,',
',,,17,,,17,17,17,17,17,17,17,17,17,17,,17,17,,17,17,17,,,,,,,,,,,,,',
',,,,,,17,,,17,,,17,17,,17,,17,,17,,17,,,,,,,,17,,,,,17,17,17,17,17,17',
',,,17,17,375,375,375,,375,,,,375,375,,,,375,,375,375,375,375,375,375',
'375,,,,,375,375,375,375,375,375,375,,,,,,,,,,375,,,375,375,375,375,375',
'375,375,375,375,375,,375,375,,375,375,375,,,,,,,,,,,,,,,,,,,,375,,,375',
',,375,375,,375,,375,,,,375,,,,,,,,375,,,,,375,375,375,375,375,375,,',
',375,375,552,552,552,,552,,,,552,552,,,,552,,552,552,552,552,552,552',
'552,,,,,552,552,552,552,552,552,552,,,,,,,,,,552,,,552,552,552,552,552',
'552,552,552,552,552,,552,552,,552,552,552,,,,,,,,,,,,,,,,,,,,552,,,552',
',,552,552,,552,,,,,,552,,,,,,,,552,,,,,552,552,552,552,552,552,,,,552',
'552,786,786,786,,786,,,,786,786,,,,786,,786,786,786,786,786,786,786',
',,,,786,786,786,786,786,786,786,,,,,,,,,,786,,,786,786,786,786,786,786',
'786,786,786,786,,786,786,,786,786,786,,,,,,,,,,,,,,,,,,,,786,,,786,',
',786,786,,786,,,,,,786,,,,,,,,786,,,,,786,786,786,786,786,786,,,,786',
'786,785,785,785,,785,,,,785,785,,,,785,,785,785,785,785,785,785,785',
',,,,785,785,785,785,785,785,785,,,,,,,,,,785,,,785,785,785,785,785,785',
'785,785,785,785,,785,785,,785,785,785,,,,,,,,,,,,,,,,,,,,785,,,785,',
',785,785,,785,,,,,,785,,,,,,,,785,,,,,785,785,785,785,785,785,,,,785',
'785,551,551,551,,551,,,,551,551,,,,551,,551,551,551,551,551,551,551',
',,,,551,551,551,551,551,551,551,,,,,,,,,,551,,,551,551,551,551,551,551',
'551,551,551,551,,551,551,,551,551,551,,,,,,,,,,,,,,,,,,,,551,,,551,',
',551,551,,551,,,,,,551,,,,,,,,551,,,,,551,551,551,551,551,551,,,,551',
'551,332,332,332,,332,,,,332,332,,,,332,,332,332,332,332,332,332,332',
',,,,332,332,332,332,332,332,332,,,,,,,,,,332,,,332,332,332,332,332,332',
'332,332,332,332,,332,332,,332,332,332,,,,,,,,,,,,,,,,,,,,332,,,332,',
',332,332,,332,,,,,,332,,,,,,,,332,,,,,332,332,332,332,332,332,,,,332',
'332,704,704,704,,704,,,,704,704,,,,704,,704,704,704,704,704,704,704',
',,,,704,704,704,704,704,704,704,,,,,,,,,,704,,,704,704,704,704,704,704',
'704,704,704,704,,704,704,,704,704,704,,,,,,,,,,,,,,,,,,,,704,,,704,',
',704,704,,704,,704,,704,,704,,,,,,,,704,,,,,704,704,704,704,704,704',
',,,704,704,334,334,334,,334,,,,334,334,,,,334,,334,334,334,334,334,334',
'334,,,,,334,334,334,334,334,334,334,,,,,,,,,,334,,,334,334,334,334,334',
'334,334,334,334,334,,334,334,,334,334,334,,,,,,,,,,,,,,,,,,,,334,,,334',
',,334,334,,334,,334,,,,334,,,,,,,,334,,,,,334,334,334,334,334,334,,',
',334,334,545,545,545,,545,,,,545,545,,,,545,,545,545,545,545,545,545',
'545,,,,,545,545,545,545,545,545,545,,,,,,,,,,545,,,545,545,545,545,545',
'545,545,545,545,545,,545,545,,545,545,545,,,,,,,,,,,,,,,,,,,,545,,,545',
',,545,545,,545,,,,,,545,,,,,,,,545,,,,,545,545,545,545,545,545,,,,545',
'545,782,782,782,,782,,,,782,782,,,,782,,782,782,782,782,782,782,782',
',,,,782,782,782,782,782,782,782,,,,,,,,,,782,,,782,782,782,782,782,782',
'782,782,782,782,,782,782,,782,782,782,,,,,,,,,,,,,,,,,,,,782,,,782,',
',782,782,,782,,,,,,782,,,,,,,,782,,,,,782,782,782,782,782,782,,,,782',
'782,544,544,544,,544,,,,544,544,,,,544,,544,544,544,544,544,544,544',
',,,,544,544,544,544,544,544,544,,,,,,,,,,544,,,544,544,544,544,544,544',
'544,544,544,544,,544,544,,544,544,544,,,,,,,,,,,,,,,,,,,,544,,,544,',
',544,544,,544,,,,,,544,,,,,,,,544,,,,,544,544,544,544,544,544,,,,544',
'544,369,369,369,,369,,,,369,369,,,,369,,369,369,369,369,369,369,369',
',,,,369,369,369,369,369,369,369,,,,,,,,,,369,,,369,369,369,369,369,369',
'369,369,369,369,,369,369,,369,369,369,,,,,,,,,,,,,,,,,,,,369,,,369,369',
',369,369,,369,,369,,369,,369,,,,,,,,369,,,,,369,369,369,369,369,369',
',,,369,369,705,705,705,,705,,,,705,705,,,,705,,705,705,705,705,705,705',
'705,,,,,705,705,705,705,705,705,705,,,,,,,,,,705,,,705,705,705,705,705',
'705,705,705,705,705,,705,705,,705,705,705,,,,,,,,,,,,,,,,,,,,705,,,705',
',,705,705,,705,,,,,,705,,,,,,,,705,,,,,705,705,705,705,705,705,,,,705',
'705,21,21,21,,21,,,,21,21,,,,21,,21,21,21,21,21,21,21,,,,,21,21,21,21',
'21,21,21,,,,,,,,,,21,,,21,21,21,21,21,21,21,21,21,21,,21,21,,,,21,,',
',,,,,,,,,,,,,,,,,21,,,21,,,21,21,,21,,21,,,,,,,,,,,,,,,,,21,21,21,21',
'21,21,,,,21,21,633,633,633,633,633,633,633,633,,,633,633,633,633,633',
',,633,633,633,633,633,633,633,,,633,633,633,633,633,633,633,633,633',
'633,633,633,633,633,633,633,633,633,633,633,633,633,633,,,633,,,,,,',
',633,633,,633,633,633,633,,633,633,,,633,,,,,633,633,633,633,,,,,,,',
',,,,,633,633,,633,633,633,633,633,633,633,633,633,,633,,,633,633,,,350',
'350,350,,350,,,633,350,350,,,,350,,350,350,350,350,350,350,350,,,,,350',
'350,350,350,350,350,350,,,,,,,,,,350,,,350,350,350,350,350,350,350,350',
'350,350,,350,350,,350,350,350,,,,,,,,,,,,,,,,,,,,350,,,350,,,350,350',
',350,,350,,,,350,,,,,,,,350,,,,,350,350,350,350,350,350,,,,350,350,351',
'351,351,,351,,,,351,351,,,,351,,351,351,351,351,351,351,351,,,,,351',
'351,351,351,351,351,351,,,351,,,,,,,351,,,351,351,351,351,351,351,351',
'351,351,351,,351,351,,351,351,351,,,,,,,,,,,,,,,,,,,,351,,,351,,,351',
'351,,351,,,,,,351,,,,,,,,351,,,,,351,351,351,351,351,351,,,,351,351',
'365,365,365,,365,,,,365,365,,,,365,,365,365,365,365,365,365,365,,,,',
'365,365,365,365,365,365,365,,,,,,,,,,365,,,365,365,365,365,365,365,365',
'365,365,365,,365,365,,365,365,365,,,,,,,,,,,,,,,,,,,,365,,,365,365,',
'365,365,,365,,365,,365,,365,,,,,,,,365,,,,,365,365,365,365,365,365,',
',,365,365,353,353,353,,353,,,,353,353,,,,353,,353,353,353,353,353,353',
'353,,,,,353,353,353,353,353,353,353,,,,,,,,,,353,,,353,353,353,353,353',
'353,353,353,353,353,,353,353,,353,353,353,,,,,,,,,,,,,,,,,,,,353,,,353',
',,353,353,,353,,,,,,353,,,,,,,,353,,,,,353,353,353,353,353,353,,,,353',
'353,354,354,354,,354,,,,354,354,,,,354,,354,354,354,354,354,354,354',
',,,,354,354,354,354,354,354,354,,,354,,,,,,,354,,,354,354,354,354,354',
'354,354,354,354,354,,354,354,,354,354,354,,,,,,,,,,,,,,,,,,,,354,,,354',
',,354,354,,354,,,,,,354,,,,,,,,354,,,,,354,354,354,354,354,354,,,,354',
'354,20,20,20,,20,,,,20,20,,,,20,,20,20,20,20,20,20,20,,,,,20,20,20,20',
'20,20,20,,,,,,,,,,20,,,20,20,20,20,20,20,20,20,20,20,,20,20,,20,20,20',
',,,,,,,,,,,,,,,,,,,20,,,20,,,20,20,,20,,,,,,20,,,,,,,,20,,,,,20,20,20',
'20,20,20,,,,20,20,763,763,763,,763,,,,763,763,,,,763,,763,763,763,763',
'763,763,763,,,,,763,763,763,763,763,763,763,,,,,,,,,,763,,,763,763,763',
'763,763,763,763,763,763,763,,763,763,,763,763,763,,,,,,,,,,,,,,,,,,',
',763,,,763,,,763,763,,763,,,,,,763,,,,,,,,763,,,,,763,763,763,763,763',
'763,,,,763,763,257,257,257,257,257,257,257,257,,,257,257,257,257,257',
',,257,257,257,257,257,257,257,,,257,257,257,257,257,257,257,257,257',
'257,257,257,257,257,257,257,257,257,257,257,257,257,257,257,257,257',
'257,,,,,,,257,257,,257,257,257,257,,257,257,,,257,,,,,257,257,257,257',
',,,,,,,,,,,,257,257,,257,257,257,257,257,257,257,257,257,,257,,,257',
'611,611,611,611,611,611,611,611,,,611,611,611,611,611,,,611,611,611',
'611,611,611,611,,,611,611,611,611,611,611,611,611,611,611,611,611,611',
'611,611,611,611,611,611,611,611,611,611,,,611,,,,,,,,611,611,,611,611',
'611,611,,611,611,,,611,,,,,611,611,611,611,,,,,,,,,,,,,611,611,,611',
'611,611,611,611,611,611,611,611,,611,,,611,84,84,84,84,84,84,84,84,',
',84,84,84,84,84,,,84,84,84,84,84,84,84,,,84,84,84,84,84,84,84,84,84',
'84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,84,,,,,,,84,84,,84',
'84,84,84,,84,84,,,84,,,,,84,84,84,84,,,,,,,,,,,,,84,84,,84,84,84,84',
'84,84,84,84,84,,84,,,84,26,26,26,26,26,26,26,26,,,26,26,26,26,26,,,26',
'26,26,26,26,26,26,,,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26',
'26,26,26,26,26,26,26,26,26,26,26,,,,,,,26,26,,26,26,26,26,,26,26,,,26',
',,,,26,26,26,26,,,,,,26,,517,,,,,26,26,,26,26,26,26,26,26,26,26,26,',
'26,,,26,517,517,517,517,517,517,517,517,517,517,517,,517,517,,,517,517',
',,,,,,,,,,,,,517,,517,,517,517,517,517,517,517,517,,517,512,512,512',
'512,512,512,512,512,512,512,512,,512,512,,517,512,512,,,517,,,,,,,,',
',,512,,512,,512,512,512,512,512,512,512,,512,760,760,760,760,760,760',
'760,760,760,760,760,,760,760,,512,760,760,,,,,512,,,,,,,,,760,,760,',
'760,760,760,760,760,760,760,,760,571,571,571,571,571,571,571,571,571',
'571,571,,571,571,,760,571,571,,,,571,760,,,,,,,,,571,,571,,571,571,571',
'571,571,571,571,,571,836,836,836,836,836,836,836,836,836,836,836,,836',
'836,,571,836,836,,,571,,,,,,,,,,,836,,836,,836,836,836,836,836,836,836',
',836,,426,426,,,426,,,,,,,,426,426,836,426,426,426,426,836,426,426,',
',426,,,,,426,426,426,426,,,,,,,,,,,,,426,426,,426,426,426,426,426,426',
'426,426,426,,426,424,424,426,,424,,,,,,,,424,424,,424,424,424,424,,424',
'424,,,424,,,,,424,424,424,424,,,,,,,,,,,,,424,424,,424,424,424,424,424',
'424,424,424,424,,424,423,423,424,,423,,,,,,,,423,423,,423,423,423,423',
',423,423,,,423,,,,,423,423,423,423,,,,,,,,,,,,,423,423,,423,423,423',
'423,423,423,423,423,423,,423,422,422,423,,422,,,,,,,,422,422,,422,422',
'422,422,,422,422,,,422,,,,,422,422,422,422,,,,,,,,,,,,,422,422,,422',
'422,422,422,422,422,422,422,422,,422,871,871,422,,871,,,,,,,,871,871',
',871,871,871,871,,871,871,,,871,,,,,871,871,871,871,,,,,,,,,,,,,871',
'871,,871,871,871,871,871,871,871,871,871,,871,394,394,871,,394,,,,,',
',,394,394,,394,394,394,394,,394,394,,,394,,,,,394,394,394,394,,,,,,',
',,,,,,394,394,,394,394,394,394,394,394,394,394,394,,394,594,594,394',
',594,,,,,,,,594,594,,594,594,594,594,,594,594,,,594,,,,,594,594,594',
'594,,,,,,,,,,,,,594,594,,594,594,594,594,594,594,594,594,594,,594,873',
'873,594,,873,,,,,,,,873,873,,873,873,873,873,,873,873,,,873,,,,,873',
'873,873,873,,,,,,,,,,,,,873,873,,873,873,873,873,873,873,873,873,873',
',873,396,396,873,,396,,,,,,,,396,396,,396,396,396,396,,396,396,,,396',
',,,,396,396,396,396,,,,,,,,,,,,,396,396,,396,396,396,396,396,396,396',
'396,396,,396,101,101,396,,101,,,,,,,,101,101,,101,101,101,101,,101,101',
',,101,,,,,101,101,101,101,,,,,,,,,,,,,101,101,,101,101,101,101,101,101',
'101,101,101,,101,651,651,101,,651,,,,,,,,651,651,,651,651,651,651,,651',
'651,,,651,,,,,651,651,651,651,,,,,,,,,,,,,651,651,,651,651,651,651,651',
'651,651,651,651,,651,103,103,651,,103,,,,,,,,103,103,,103,103,103,103',
',103,103,,,103,,,,,103,103,103,103,,,,,,,,,,,,,103,103,,103,103,103',
'103,103,103,103,103,103,,103,325,325,103,,325,,,,,,,,325,325,,325,325',
'325,325,,325,325,,,325,,,,,325,325,325,325,,,,,,,,,,,,,325,325,,325',
'325,325,325,325,325,325,325,325,,325,376,376,325,,376,,,,,,,,376,376',
',376,376,376,376,,376,376,,,376,,,,,376,376,376,376,,,,,,,,,,,,,376',
'376,,376,376,376,376,376,376,376,376,376,,376,326,326,376,,326,,,,,',
',,326,326,,326,326,326,326,,326,326,,,326,,,,,326,326,326,326,,,,,,',
',,,,,,326,326,,326,326,326,326,326,326,326,326,326,,326,374,374,326',
',374,,,,,,,,374,374,,374,374,374,374,,374,374,,,374,,,,,374,374,374',
'374,,,,,,,,,,,,,374,374,,374,374,374,374,374,374,374,374,374,,374,652',
'652,374,,652,,,,,,,,652,652,,652,652,652,652,,652,652,,,652,,,,,652',
'652,652,652,,,,,,,,,,,,,652,652,,652,652,652,652,652,652,652,652,652',
',652,596,596,652,,596,,,,,,,,596,596,,596,596,596,596,,596,596,,,596',
',,,,596,596,596,596,,,,,,,,,,,,,596,596,,596,596,596,596,596,596,596',
'596,596,,596,,,596,459,459,459,459,459,459,459,459,459,459,459,,459',
'459,,,459,459,,,,,,,,,,,,,,459,,459,,459,459,459,459,459,459,459,,459',
',137,137,137,137,137,137,137,137,137,137,137,,137,137,459,459,137,137',
',,,,,,,,,,,,,137,,137,,137,137,137,137,137,137,137,,137,761,761,761',
'761,761,761,761,761,761,761,761,,761,761,,137,761,761,,,,,,,,,,,,,,761',
',761,,761,761,761,761,761,761,761,,761,537,537,537,537,537,537,537,537',
'537,537,537,,537,537,,761,537,537,,,,,,,,,,,,,,537,,537,,537,537,537',
'537,537,537,537,,537,683,683,683,683,683,683,683,683,683,683,683,,683',
'683,,537,683,683,,,,,,,,,,,,,,683,,683,,683,683,683,683,683,683,683',
',683,685,685,685,685,685,685,685,685,685,685,685,,685,685,,683,685,685',
',,,,,,,,,,,,,685,,685,,685,685,685,685,685,685,685,,685,448,448,448',
'448,448,448,448,448,448,448,448,,448,448,,685,448,448,,,,,,,,,,,,,,448',
',448,,448,448,448,448,448,448,448,,448,747,747,747,747,747,747,747,747',
'747,747,747,,747,747,,448,747,747,,,,,,,,,,,,,,747,,747,,747,747,747',
'747,747,747,747,,747,420,420,420,420,420,420,420,420,420,420,420,,420',
'420,,747,420,420,,,,,,,,,,,,,,420,,420,,420,420,420,420,420,420,420',
',420,688,688,688,688,688,688,688,688,688,688,688,,688,688,,420,688,688',
',,,,,,,,,,,,,688,,688,,688,688,688,688,688,688,688,,688,690,690,690',
'690,690,690,690,690,690,690,690,,690,690,,688,690,690,,,,,,,,,,,,,,690',
',690,,690,690,690,690,690,690,690,,690,46,46,46,46,46,46,46,46,46,46',
'46,,46,46,,690,46,46,,,,,,,,,,,,,,46,,46,,46,46,46,46,46,46,46,,46,772',
'772,772,772,772,772,772,772,772,772,772,,772,772,,46,772,772,,,,,,,',
',,,,,,772,,772,,772,772,772,772,772,772,772,,772,640,640,640,640,640',
'640,640,640,640,640,640,,640,640,,772,640,640,,,,,,,,,,,,,,640,,640',
',640,640,640,640,640,640,640,,640,,,,,,,,,,,,,,,,640' ]
        racc_action_check = arr = Array.new(23857, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
   nil,    28,  4251,  1022,   nil,   300,  6052,    -7,    -8,   nil,
   891,  7132,   nil,   nil, 10484,   nil,   890, 18748,   931,   438,
 21260, 20428,   nil,   nil,   881, 17788, 21827,   nil,   nil, 13956,
 13836, 13724,   472,   nil,   nil,   nil,   261,   nil,   -73,   878,
   nil,   -49,    -4,   945,   nil,   nil, 23645,   888,   nil,   nil,
   965,  9524,   nil,  8092,  3888,   nil,  7972,   nil,   770,  4852,
  4732, 18388,   nil,  4612,   nil,   nil,   267,    77,   nil,   nil,
   nil,   nil,  4972,   nil,   nil,   nil,  5092,   nil,  5212,   376,
   nil,   866,   617,   nil, 21718,   nil,   nil,  5812,   nil,   nil,
   858,   nil,   nil,   nil,   897,   nil,  6172,  6292,   nil,    -7,
   nil, 22641,  6652, 22759,   487,   -10,   nil,   nil,   190,   945,
   -13,    35,   837,   897,   nil,   860,   857,   nil,   nil,   nil,
   854,   844,   nil,   nil,  8332,   nil,   nil,   250,   815,   nil,
   409,  8804,   267,   nil,   834,   216,   863, 23205,   nil,  3646,
   nil,  9644,   nil,   780,   776,   818, 10124,   771,   765,   -51,
   778,   nil,   nil,   nil, 10724, 10844,   272,   nil,   -31,   377,
   767,   485,   820,  3041, 11564, 11684,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   284,   nil,
   nil,   nil,   nil,   191,   nil,   nil,   nil,   nil,   -26,   nil,
   nil,   nil,   nil,   405,   401,   nil,   nil,   nil,   nil,   340,
   nil,   nil,   nil,   513,   271,   nil,   335,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   574,   nil,   nil,   nil, 21500,   808,   nil,
   740, 13124, 13244,   802,   794,  2557,   nil, 13604,   nil,   495,
   nil,   nil,   nil,   nil,   534,   749, 14068, 14188, 14308, 14428,
 14548, 14668, 14788, 14908, 15028, 15148, 15268, 15388, 15508, 15628,
 15748, 15868, 15988, 16108, 16228, 16348, 16468, 16588, 16708, 16828,
 16948, 17068,  1952,   nil,   nil,   nil,   669,    85,   756,   751,
   748,  1831,   nil, 17908, 18028, 18148, 18268,  4492, 18508,   nil,
   nil, 18628,   nil,   nil,    96, 22818, 22936,   666,   743,   nil,
   702,   -70, 19468,   347, 19708,   157,   696,   527,   nil,   269,
   nil,   nil,   nil,   nil,   nil,   326,   710,     9,   276,   nil,
 20660, 20780,   204, 21020, 21140,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   731,  9404,   365, 20900,   183,   nil,   708, 20188,
   nil,   300,   nil,   -59, 22995, 18868, 22877,   nil,   nil,   nil,
   709,    33,   nil,   nil,   nil,    97,   -40,   nil,   nil, 17308,
   -56,   nil,   nil,   nil, 22405, 17188, 22582,   nil, 13484, 13004,
   301, 12764,   nil,   nil, 12644, 12284,   657,   nil, 11924,   649,
   nil,   nil, 11084,   262,   nil,    -6,   nil,     2,   486,   608,
 23513,   nil, 22287, 22228, 22169,  5332, 22110,   nil,   375,   689,
   nil,   nil,   nil,   nil,   nil,  6060,  9044,  8692,   nil,   nil,
   nil,   nil,   nil,   nil,  8452,  8212,   767,   757, 23425,  7852,
   775,   nil,  7492,  1347,  1226,   700,  2678,  1105,   687, 23160,
  1347,   491,   680,  1468,   589,   592,  2436,  1589,  1952,  2194,
  2557,  2920,  2315,   676,  2073,  2799,   618,   663,  1831,  1710,
   572,   -35,   nil,  4130,   nil,   665,   nil,   546,   575,   567,
   nil,   nil,   nil,   nil,   nil,   nil,   564,   604,   475,   -51,
   474,  2315,     0,   nil,   nil,   289,   462,   nil,   nil,   nil,
  6892,   nil, 21918,   nil,  7012,   nil,   nil, 21874,   nil,   452,
 10004,  2073,   528,   nil,   517,   nil,   nil, 17428,   nil,   nil,
   nil,   nil,   nil,   393,   nil,   138,   nil, 23293,   nil,   110,
  1589,   670,   426,   nil, 20068, 19828,   451,   416,   nil,   nil,
   nil, 19348, 18988,   394,   204,   207,   357,   337,    82,   165,
 12524,    30,   nil,   nil, 12404,   nil,   nil,   nil,   nil,   -64,
   324, 22006, 12044,   263,   nil,   nil,   859,   739,   279,   271,
   330,   nil,   859,   nil,   277, 10364,   230,   nil,   252,   253,
   nil,  8924,   nil,   564, 22464,  8572, 23113,   nil,   nil,   275,
   467,   nil,   nil,   nil,   495,   334,   190,   211,   255,   nil,
  4372, 21609,   193,   184,   444,   102,    78,    65,   nil,    57,
   nil,   nil,   nil,   nil,  2436,   nil,   nil,   nil,   nil,   nil,
  1035,   -31,   nil, 20548,    43,    28,    19,  5452,   nil,   -16,
 23733,   637,  5572,   nil,   nil,   672,   nil,   -61,   nil,   nil,
    87, 22700, 23054,   110, 11804,   197,   nil,   nil,   nil,   nil,
   129,   nil, 11444,   nil,  9884,  9764,   nil,   263,   nil,  7372,
   295,   nil,   nil,   nil,   nil,   nil,   225,   nil,   nil,   nil,
   nil,   nil,   nil, 23337,   nil, 23381,  9284,   nil, 23557,   nil,
 23601,   nil,   212,   108,   nil,  2799,   338,   nil,  2194,   383,
 17548,   nil,   366,   nil, 19588, 20308,   -30, 12884, 10964,   443,
   nil,  9164,   455,   115,   nil,   336,   477,   533,   nil,  6412,
  2920,   490,   651,   nil,   nil,   nil,   nil,   nil,   789,  5692,
   nil,   180,   600,   nil,   699,   582,   626,   nil,  1468,   726,
   nil,   651,   nil,   611,   nil,   nil,   nil, 23469,  3162,  6532,
   743,   nil,   nil,   666,   668,   nil,   736,   -52,   756,   nil,
 21962, 23249,   648, 21380,   nil,    -2,   656, 12164,   nil,  1105,
  1226,   nil, 23689,   nil,   nil,  1710,   811,   nil,   712,   nil,
   nil,   696, 19948,   702,   nil, 19228, 19108,   nil, 17668,   nil,
   nil,   nil,   580,   831,   nil,  6180,   718,   719,   nil,   nil,
   nil,   723,   721,   nil,   nil,   768,   nil,   nil,   nil,   984,
   nil, 13364,    82,   nil,   858,    64,   nil,   783,   nil,   nil,
   nil,  2678, 11324,   nil,   866,   885,  3283,   787,   nil,   nil,
   nil, 10604,   770,   nil, 10244,   772, 22050,  3404,   nil,   nil,
  3525,   nil,   547,   nil,   nil,   nil,   nil,   281,   403,   407,
   885,   nil,  3767,   nil,  4009,   nil,    67,  7732,   nil,   nil,
   943,   nil,  7612,   840,   nil,  7252,   nil,   nil,   967,   968,
   850, 22346,  5932, 22523,   404,   986,   142,   nil,   nil,   nil,
   nil,   nil,   869,   nil, 11204,   872,   nil,   nil,   nil,    36,
   -53,   919,   113,   -10,   nil,   nil,   nil,  6772,   nil,   270,
   895,   nil ]

racc_action_default = [
    -1,  -505,  -503,  -505,  -503,  -505,  -505,  -251,  -291,  -419,
  -503,  -322,   -61,    -2,  -505,  -420,  -503,  -323,  -307,  -273,
  -505,   -65,  -314,  -324,  -505,  -505,  -505,  -325,  -379,  -505,
  -505,  -505,   -34,   -71,  -386,  -381,  -505,  -275,  -434,  -494,
  -413,  -382,  -492,  -505,   -20,  -383,   -40,  -505,  -433,    -5,
   -42,  -285,  -432,  -505,  -503,   -43,  -288,  -266,    -6,  -423,
  -356,  -505,  -267,  -505,  -429,  -380,   -47,  -482,  -268,  -428,
  -425,  -269,  -505,  -430,  -424,  -270,  -503,  -431,  -426,  -216,
  -271,  -505,  -492,  -427,  -503,  -272,   -35,  -503,  -436,  -503,
  -505,  -295,  -437,  -503,  -505,  -298,   -70,  -505,   902,  -505,
  -401,  -505,  -503,  -505,  -505,  -350,  -322,  -323,  -273,  -505,
  -505,  -434,  -494,  -505,  -285,  -288,  -356,  -326,  -338,  -339,
  -505,   -53,  -360,  -357,  -505,  -290,  -292,  -505,  -505,  -391,
  -505,  -505,  -273,  -238,  -261,  -434,  -505,  -217,  -230,  -503,
   -45,  -505,  -477,  -505,  -504,  -505,  -505,  -504,    -8,  -505,
  -505,  -397,   -46,  -310,  -505,  -505,  -505,  -209,  -505,   -82,
   -66,   -75,  -505,  -503,   -68,  -505,   -73,  -193,  -168,  -150,
  -121,  -169,  -139,  -170,  -153,  -108,  -141,  -129,  -171,  -126,
  -152,  -130,  -157,  -172,  -127,  -142,  -117,  -159,  -124,  -136,
  -128,  -165,  -118,  -151,  -123,  -434,  -138,  -144,  -119,  -143,
  -125,  -158,  -120,  -134,  -109,  -148,  -115,  -135,  -505,  -317,
  -147,  -160,  -113,  -132,  -110,  -167,  -106,   -99,  -133,  -111,
  -472,  -162,  -100,   -96,  -161,  -107,   -98,  -114,  -163,  -154,
  -116,  -146,  -145,  -164,   -97,  -140,  -149,  -131,  -471,  -112,
  -166,  -137,  -156,  -122,  -155,  -101,  -132,  -133,   -96,  -161,
  -102,    -9,  -154,  -505,  -164,   -97,  -149,  -505,  -194,  -103,
   -14,  -505,  -505,  -421,  -422,  -503,  -495,  -505,  -384,  -493,
  -501,  -500,    -4,  -499,  -281,  -505,  -505,  -505,  -505,  -505,
  -505,  -505,  -505,  -505,  -505,  -505,  -505,  -505,  -505,  -505,
  -505,  -505,  -505,  -505,  -505,  -505,  -505,  -505,  -505,  -505,
  -505,  -505,  -503,  -344,  -347,   -44,   -41,  -505,   -61,  -505,
  -505,  -503,   -60,  -505,  -505,  -505,  -505,  -505,  -505,   -59,
  -355,  -503,  -208,   -39,  -505,  -505,  -505,  -277,  -505,  -218,
  -494,  -496,  -505,  -496,  -505,  -505,  -493,  -492,  -414,  -505,
  -416,  -415,  -417,  -412,  -474,  -496,  -505,  -496,  -505,  -399,
  -505,  -505,  -505,  -505,  -505,   -69,   -38,  -403,  -388,  -406,
  -402,  -404,  -251,  -489,  -483,  -488,  -484,  -354,  -505,  -503,
  -486,  -483,  -485,  -484,  -505,  -503,  -505,  -304,  -421,  -422,
  -505,  -281,  -351,   -54,   -50,  -503,  -503,  -252,  -253,  -254,
  -505,  -393,  -390,  -389,  -505,  -503,  -505,  -258,  -505,  -505,
  -281,  -505,  -260,  -231,  -505,  -505,  -504,  -233,  -505,  -505,
  -396,  -395,  -505,  -505,  -273,  -505,   -94,  -505,   -91,   -92,
  -182,   -30,  -505,  -505,  -505,  -503,  -505,   -74,   -81,  -505,
   -67,  -315,  -491,  -490,  -319,  -452,  -505,  -505,   -13,   -12,
   -11,  -104,   -36,   -37,  -505,  -505,  -371,  -505,  -214,  -505,
    -7,  -502,  -505,  -503,  -203,  -189,  -184,  -204,  -188,  -505,
  -205,  -185,  -210,  -200,  -186,  -211,  -202,  -201,  -212,  -199,
  -213,  -195,  -206,  -187,  -207,  -196,  -197,  -190,  -198,  -183,
  -505,  -503,  -329,  -503,  -328,  -327,  -279,   -62,  -505,  -505,
  -287,   -15,   -16,   -17,   -18,   -19,  -505,  -230,  -494,  -494,
  -504,  -503,  -251,  -483,  -484,  -251,  -494,  -283,  -219,  -220,
  -498,  -497,  -494,  -222,  -498,   -31,  -261,  -173,   -23,  -505,
  -505,  -503,  -505,  -363,  -505,  -418,  -476,  -498,  -284,  -475,
  -400,  -385,   -33,   -32,   -24,  -505,  -387,  -175,   -25,  -505,
  -503,  -505,   -57,  -353,  -505,  -505,  -282,   -55,  -229,  -352,
  -228,  -505,  -505,  -505,  -487,  -280,  -505,  -503,  -483,  -484,
  -505,  -503,  -361,  -342,  -505,  -340,  -358,  -250,  -256,  -505,
  -505,   -40,  -505,  -504,  -394,  -392,  -487,  -280,  -505,  -483,
  -484,  -479,  -173,  -259,  -262,  -505,  -504,  -237,  -505,  -505,
  -478,  -505,  -398,  -311,  -505,  -503,  -505,   -93,   -91,   -92,
  -505,  -439,  -308,  -438,   -78,   -80,  -505,  -483,  -484,   -72,
  -503,  -505,  -465,  -505,  -505,  -470,  -456,  -470,  -463,  -470,
  -462,  -467,  -454,  -451,  -503,  -466,  -457,  -453,  -460,  -455,
  -452,  -494,   -10,  -505,  -191,  -192,  -503,  -503,  -276,  -505,
  -181,  -505,  -505,   -22,  -345,  -503,  -330,   -62,  -286,  -224,
  -505,  -505,  -505,  -505,  -505,  -503,   -49,  -349,   -48,  -348,
  -505,  -262,  -505,  -223,  -505,  -505,  -265,  -505,  -302,  -505,
  -505,  -332,  -296,  -333,  -331,  -299,  -505,  -411,  -408,  -409,
  -405,  -410,   -58,  -179,   -29,  -180,  -505,   -56,  -177,   -27,
  -178,   -28,  -282,  -505,   -51,  -503,  -505,  -341,  -503,  -505,
  -505,  -255,  -504,  -243,  -505,  -505,  -282,  -505,  -505,  -504,
  -235,  -505,  -504,  -505,   -95,   -91,   -92,  -505,  -441,  -505,
  -503,   -76,  -505,  -320,  -464,  -468,  -443,  -447,  -505,  -505,
  -449,  -505,  -505,  -450,  -505,  -494,  -505,  -105,  -503,  -503,
  -336,  -503,  -373,  -372,  -374,  -289,   -21,  -215,  -503,  -505,
  -505,  -334,  -225,  -503,  -503,  -226,  -505,  -494,  -505,  -278,
  -494,  -174,  -263,  -505,  -303,  -505,  -365,  -505,  -301,  -503,
  -503,  -407,  -176,   -26,  -305,  -503,  -505,  -343,  -505,  -257,
  -240,  -504,  -505,  -504,  -249,  -505,  -505,  -232,  -505,  -234,
  -312,  -282,  -505,  -505,  -316,  -452,  -470,  -470,  -469,  -458,
  -459,  -505,  -470,  -461,  -318,  -505,  -473,  -337,    -3,  -503,
  -378,  -505,  -505,  -376,  -505,  -505,  -293,  -505,  -294,  -221,
  -264,  -503,  -505,  -367,  -505,  -505,  -503,  -505,  -362,  -359,
  -239,  -505,  -504,  -245,  -505,  -504,  -504,  -503,  -440,  -309,
  -503,  -445,  -505,  -446,  -448,  -442,  -377,  -505,   -90,   -83,
  -505,  -375,  -503,  -346,  -503,  -227,  -503,  -505,  -297,  -300,
  -505,   -52,  -505,  -504,  -241,  -505,  -244,  -236,  -505,  -505,
  -470,  -505,  -503,  -505,   -89,  -371,  -503,  -369,  -368,  -364,
  -366,  -306,  -504,  -246,  -505,  -504,  -313,  -321,  -444,  -487,
   -88,  -505,  -483,  -484,  -370,  -335,  -242,  -505,  -247,   -84,
  -504,  -248 ]

clist = [
'137,109,250,522,250,217,137,119,217,157,217,117,209,328,167,623,138',
'636,147,258,483,383,138,267,147,624,117,320,499,251,515,259,272,391',
'597,133,308,501,140,368,137,133,562,566,152,672,532,310,355,675,322',
'590,323,803,100,795,138,417,147,238,129,148,121,217,750,137,151,447',
'431,99,338,739,335,346,797,133,137,802,305,657,363,330,659,320,362,126',
'369,382,307,570,758,137,387,568,347,633,380,160,324,602,775,117,561',
'208,434,265,506,330,509,351,513,312,769,137,354,319,430,337,770,560',
'137,144,526,826,529,154,329,144,720,138,322,147,412,713,100,137,407',
'344,644,349,837,165,610,100,420,308,421,435,133,339,611,388,329,699',
'481,270,429,590,352,117,748,144,386,698,803,385,695,765,879,117,117',
'669,741,812,268,348,275,127,390,437,149,680,541,540,719,13,735,796,870',
'260,269,808,670,799,2,270,436,345,1,,,,,774,,,,,,,623,,,714,,,,727,694',
'730,,733,,,,,,,,,,,,,144,,217,309,,,,,,338,,,,,,,,,,,530,,448,,,,,,',
',,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470',
'471,472,473,474,475,476,477,478,479,878,,308,,895,574,,,,,,137,,488',
',,,502,505,137,,556,,508,,450,,138,,147,512,309,517,,518,497,524,147',
'543,657,659,578,742,,,,133,,137,489,534,537,,538,133,309,590,498,491',
'492,493,494,363,590,,81,,,557,118,757,606,,137,495,,,81,,,496,,363,',
'623,,362,571,369,330,,,,137,840,535,420,137,539,582,,,137,537,587,573',
'137,841,843,330,363,,363,844,,557,,81,557,250,586,722,567,137,,217,542',
',550,,,,144,547,329,734,,,,330,500,,634,635,565,565,632,,,,640,682,',
'519,329,894,687,,7,270,,,,,,,,7,,519,7,,,7,,,,,,,,888,,,329,,590,821',
',,,650,653,,480,,,,,660,,,81,309,,663,,7,137,7,7,,137,,,,,7,137,7,,',
',,,137,81,,7,543,,793,7,877,852,,590,854,7,603,565,717,683,685,684,',
',,,688,690,689,691,7,,,,,7,,,550,,,550,,656,,696,658,137,703,,,119,',
',,117,,7,,363,137,710,,,,557,137,,,,137,,7,,,,217,,,,,693,,723,,,330',
',7,,,,250,550,,,7,565,217,,,736,,,,81,,,,81,,,137,,,,,747,,737,753,754',
'641,,,868,,,869,137,,329,,,674,,,760,674,761,137,,81,,137,756,,586,',
',,81,645,,,,,,81,,,772,,773,,,,,,,655,,740,744,,137,,784,,137,683,740',
'688,690,787,,137,789,,,667,740,,783,7,7,,,7,718,,,7,,137,805,,,,676',
'780,,,726,,,,,,,,,,,,,,817,,,819,,,519,,7,,,137,,792,,137,,7,,7,7,7',
'7,7,7,,,7,,830,137,833,,137,772,,836,,766,,7,,,815,,,,,810,,813,,,,',
',7,7,,7,7,,550,550,,674,81,,891,781,137,,,,,117,,,,137,864,7,137,866',
'867,790,,,,,,,,,,7,81,863,,,,7,,,,137,,,,363,137,883,,137,81,557,,,7',
',137,,,,,,,,,,896,7,137,898,81,,330,776,,,778,,7,,,137,,,901,,,,,81',
',7,,,,7,,,,,838,740,,,,,,,,,,,,118,,,807,329,5,,,740,104,,,7,814,130',
',,5,,,130,,,,158,,,,,,7,,,,824,825,,,,,827,,,,,,81,,,,7,,,,130,,130',
'5,,,81,,,,130,,130,,,7,,,,7,846,130,,,,130,7,7,,,,130,856,,,7,,860,',
',,,,,,158,130,,,,,130,,,,,,,,,,,,875,,876,,,,,7,,,130,,,,81,,,81,,,',
',7,,,5,,,,,,,,,,,7,,,81,413,130,,,,,,,,5,158,413,,,,,94,81,,,,,,,,,7',
'81,94,,,,,,,,,,,,306,,,,,,,,81,81,306,,19,,81,,108,,7,327,,,,,19,,,7',
'94,306,7,159,,,,,,,,,,,,,356,,,,81,,851,7,7,,,,,,,,81,,,,19,81,,130',
'130,,7,5,,,,5,81,,,81,7,7,,,,,,,,,,81,,81,,,,,,,,7,7,,,,159,7,5,,,,',
'94,,,,5,,130,130,130,130,130,5,,,130,,,,,,,,,,94,,,130,7,,,,,,,,19,',
',,7,,,130,130,7,130,130,,,,414,,,,,7,,,7,19,159,414,,,,,,130,,,7,,7',
',,,,,,,,130,,,,,,130,,,7,,,,442,443,,,,,,,,,130,,,,,,,,,,,,,130,,,,',
',,,94,,,130,94,,,,,,,,,,,,130,,,,5,,306,306,306,306,397,,,,,,,,,,19',
'94,,,19,406,,,,,94,,,,5,,,94,,,,,,306,,,306,,,,,,5,,,38,,19,,111,,,',
',,,19,38,,,,,5,19,161,,,,,195,,327,,,,,,,,,,5,,,,130,,,,,,,130,130,593',
',,38,,,,130,,,,104,,,,,,,,,,,,,631,,,,,,,,,,,,,639,,,,,130,,,161,,,',
',,,,,,,,5,,,,,,,,,,,94,,,5,,,,,,,,,,,,,,,,,38,,,,,,,,,,94,,,130,,195',
'19,,,,,516,,,38,161,195,,94,,,,,,,,,533,,,,,,,,130,19,,94,,,,,,5,,,5',
',,306,,,,19,,,94,,,,,,,,,569,,130,5,,,,,19,,581,,,,,584,,,,589,,5,,',
',,,19,677,,,5,130,,,,,,,,,,,,,,,,,,38,108,5,5,38,,,,5,,,94,,,,,,,,,',
',,,,94,,,,,,,,,,,,38,,,,,5,,847,,38,19,,,,,,38,5,,,,,5,,19,,,,,,,,,5',
'661,,5,,589,,,,,,666,,,,5,,5,661,,,,,306,,,94,,,94,,,,,,130,,,,,,,,',
',,,,,,,94,,306,,,,,,,,,19,702,,19,,,,94,,,,,,,709,,,94,,,712,,,,,19',
',,,,,,,,,,,,94,94,,,,19,94,,,,,,,,,19,,,38,,,,,,,,,,743,,,,,,,,19,19',
',,94,,19,,,584,,,38,,,,94,,,,762,94,,,516,,,,,,38,,94,,,94,,,,,19,,848',
',,,,94,,94,38,,19,,,,,19,,589,,,,,,,589,,19,38,,19,,,,,,,,,,,,19,800',
'19,,,,,,,,111,,,,,,,,,,,,,,,,,,,,,,,,,820,,,,823,,,,,,,,,,,,,,,832,',
'38,835,,,,,,,,,,,,,38,,,,,,,,,,,,,,,,,,,,,,,,661,,,,,,,,,584,,,589,',
',,,,,,,,,,,,,,,,,,,,,880,,,,,882,,,885,,,,38,,,38,,,,,,,,,,,,589,,,',
',,,,,,38,,,900,,,,,,,,,,,,,,,38,,,,,,,,,,38,,,,,,,,,,,,,,,,,,,,,38,38',
',,,,38,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,38,,849,,,,,,,,,,38,,,,,38,',
',,,,,,,,,38,,,38,,,,,,,,,,,,38,,38' ]
        racc_goto_table = arr = Array.new(2278, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'28,82,51,81,51,49,28,18,49,28,49,54,48,21,28,140,29,5,57,28,78,35,29',
'53,57,85,54,58,32,13,23,13,9,128,46,61,40,78,31,21,28,61,36,36,31,80',
'23,41,44,80,28,146,17,142,10,105,29,47,57,74,10,11,34,49,79,28,10,3',
'47,125,48,6,9,75,138,61,28,138,31,59,49,29,59,58,33,76,33,58,15,65,6',
'28,63,62,57,52,53,43,15,83,38,54,37,86,87,88,89,29,56,90,56,34,91,28',
'92,34,44,15,93,94,28,55,56,95,56,96,10,55,97,29,28,57,98,99,10,28,60',
'10,36,10,100,101,102,10,28,40,17,103,61,125,104,31,10,66,107,84,41,146',
'125,54,108,55,111,112,142,113,114,115,116,54,54,117,118,119,123,124',
'27,126,127,26,129,130,131,132,134,2,135,137,138,14,12,7,81,141,4,84',
'145,55,1,,,,,80,,,,,,,140,,,46,,,,139,36,139,,139,,,,,,,,,,,,,55,,49',
'2,,,,,,48,,,,,,,,,,,128,,28,,,,,,,,,28,28,28,28,28,28,28,28,28,28,28',
'28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,6,,40,,79,128,,,,,,28,',
'41,,,,33,33,28,,21,,53,,11,,29,,57,28,2,28,,17,29,9,57,58,59,59,21,23',
',,,61,,28,31,17,28,,17,61,2,146,31,15,15,15,15,49,146,,16,,,33,16,32',
'21,,28,11,,,16,,,10,,49,,140,,33,28,33,29,,,,28,85,15,28,28,15,28,,',
'28,28,60,57,28,139,139,29,49,,49,139,,33,,16,33,51,57,3,61,28,,49,34',
',10,,,,55,34,10,3,,,,29,55,,28,28,10,10,13,,,,28,35,,55,10,5,35,,39',
'84,,,,,,,,39,,55,39,,,39,,,,,,,,139,,,10,,146,78,,,,53,53,,2,,,,,53',
',,16,2,,53,,39,28,39,39,,28,,,,,39,28,39,,,,,,28,16,,39,58,,3,39,81',
'78,,146,78,39,84,10,21,28,28,17,,,,,28,28,17,17,39,,,,,39,,,10,,,10',
',34,,82,34,28,60,,,18,,,,54,,39,,49,28,60,,,,33,28,,,,28,,39,,,,49,',
',,,15,,48,,,29,,39,,,,51,10,,,39,10,49,,,53,,,,16,,,,16,,,28,,,,,28',
',13,33,33,2,,,3,,,3,28,,10,,,84,,,28,84,28,28,,16,,28,29,,57,,,,16,2',
',,,,,16,,,28,,17,,,,,,,2,,10,10,,28,,60,,28,28,10,28,28,60,,28,60,,',
'2,10,,57,39,39,,,39,84,,,39,,28,53,,,,2,61,,,84,,,,,,,,,,,,,,53,,,53',
',,55,,39,,,28,,15,,28,,39,,39,39,39,39,39,39,,,39,,60,28,60,,28,28,',
'28,,55,,39,,,15,,,,,10,,10,,,,,,39,39,,39,39,,10,10,,84,16,,21,55,28',
',,,,54,,,,28,60,39,28,60,60,84,,,,,,,,,,39,16,57,,,,39,,,,28,,,,49,28',
'60,,28,16,33,,,39,,28,,,,,,,,,,60,39,28,60,16,,29,2,,,2,,39,,,28,,,60',
',,,,16,,39,,,,39,,,,,84,10,,,,,,,,,,,,16,,,2,10,20,,,10,20,,,39,2,20',
',,20,,,20,,,,20,,,,,,39,,,,2,2,,,,,2,,,,,,16,,,,39,,,,20,,20,20,,,16',
',,,20,,20,,,39,,,,39,2,20,,,,20,39,39,,,,20,2,,,39,,2,,,,,,,,20,20,',
',,,20,,,,,,,,,,,,2,,2,,,,,39,,,20,,,,16,,,16,,,,,39,,,20,,,,,,,,,,,39',
',,16,20,20,,,,,,,,20,20,20,,,,,19,16,,,,,,,,,39,16,19,,,,,,,,,,,,25',
',,,,,,,16,16,25,,22,,16,,22,,39,25,,,,,22,,,39,19,25,39,22,,,,,,,,,',
',,,25,,,,16,,16,39,39,,,,,,,,16,,,,22,16,,20,20,,39,20,,,,20,16,,,16',
'39,39,,,,,,,,,,16,,16,,,,,,,,39,39,,,,22,39,20,,,,,19,,,,20,,20,20,20',
'20,20,20,,,20,,,,,,,,,,19,,,20,39,,,,,,,,22,,,,39,,,20,20,39,20,20,',
',,22,,,,,39,,,39,22,22,22,,,,,,20,,,39,,39,,,,,,,,,20,,,,,,20,,,39,',
',,25,25,,,,,,,,,20,,,,,,,,,,,,,20,,,,,,,,19,,,20,19,,,,,,,,,,,,20,,',
',20,,25,25,25,25,24,,,,,,,,,,22,19,,,22,24,,,,,19,,,,20,,,19,,,,,,25',
',,25,,,,,,20,,,45,,22,,45,,,,,,,22,45,,,,,20,22,45,,,,,45,,25,,,,,,',
',,,20,,,,20,,,,,,,20,20,25,,,45,,,,20,,,,20,,,,,,,,,,,,,25,,,,,,,,,',
',,,25,,,,,20,,,45,,,,,,,,,,,,20,,,,,,,,,,,19,,,20,,,,,,,,,,,,,,,,,45',
',,,,,,,,,19,,,20,,45,22,,,,,24,,,45,45,45,,19,,,,,,,,,24,,,,,,,,20,22',
',19,,,,,,20,,,20,,,25,,,,22,,,19,,,,,,,,,24,,20,20,,,,,22,,24,,,,,24',
',,,24,,20,,,,,,22,22,,,20,20,,,,,,,,,,,,,,,,,,45,22,20,20,45,,,,20,',
',19,,,,,,,,,,,,,,19,,,,,,,,,,,,45,,,,,20,,20,,45,22,,,,,,45,20,,,,,20',
',22,,,,,,,,,20,24,,20,,24,,,,,,24,,,,20,,20,24,,,,,25,,,19,,,19,,,,',
',20,,,,,,,,,,,,,,,,19,,25,,,,,,,,,22,24,,22,,,,19,,,,,,,24,,,19,,,24',
',,,,22,,,,,,,,,,,,,19,19,,,,22,19,,,,,,,,,22,,,45,,,,,,,,,,24,,,,,,',
',22,22,,,19,,22,,,24,,,45,,,,19,,,,24,19,,,24,,,,,,45,,19,,,19,,,,,22',
',22,,,,,19,,19,45,,22,,,,,22,,24,,,,,,,24,,22,45,,22,,,,,,,,,,,,22,24',
'22,,,,,,,,45,,,,,,,,,,,,,,,,,,,,,,,,,24,,,,24,,,,,,,,,,,,,,,24,,45,24',
',,,,,,,,,,,,45,,,,,,,,,,,,,,,,,,,,,,,,24,,,,,,,,,24,,,24,,,,,,,,,,,',
',,,,,,,,,,,24,,,,,24,,,24,,,,45,,,45,,,,,,,,,,,,24,,,,,,,,,,45,,,24',
',,,,,,,,,,,,,,45,,,,,,,,,,45,,,,,,,,,,,,,,,,,,,,,45,45,,,,,45,,,,,,',
',,,,,,,,,,,,,,,,,,,,,,,,,,,45,,45,,,,,,,,,,45,,,,,45,,,,,,,,,,,45,,',
'45,,,,,,,,,,,,45,,45' ]
        racc_goto_check = arr = Array.new(2278, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_goto_pointer = [
   nil,   198,   183,  -198,   194,  -429,  -565,  -548,   nil,   -10,
    50,    47,   148,     0,   158,    35,   354,    -9,     1,  1089,
   921,   -63,  1125,  -304,  1249,  1062,   -72,   132,   -11,     5,
   nil,    27,  -293,   -17,    55,  -100,  -343,  -282,  -594,   447,
   -18,    -7,   nil,    76,   -48,  1423,  -381,   -97,   -14,   -21,
   nil,   -27,  -346,   -16,     5,   110,  -223,     7,   -33,  -423,
   -11,    24,  -296,   -32,   nil,  -300,  -415,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    33,   -14,    77,   nil,  -287,  -581,
  -490,  -332,    -5,  -318,   113,  -410,    77,  -104,    68,  -221,
    18,  -560,    19,  -557,  -258,  -651,   107,  -474,   -21,  -460,
  -650,   119,  -289,   -62,  -284,  -668,   nil,  -149,  -484,   nil,
   nil,    39,  -403,    43,  -396,  -502,  -688,  -352,  -465,  -568,
   nil,   nil,   nil,   133,    86,    65,   167,    51,   -94,   164,
  -360,  -179,  -176,   nil,  -417,  -444,   nil,  -541,  -654,  -398,
  -420,  -535,  -678,   nil,   nil,   -24,  -357 ]

racc_goto_default = [
   nil,   nil,   446,   nil,   nil,   nil,   751,   nil,    42,   nil,
    49,    58,   336,   nil,   nil,   nil,   143,    86,    90,   145,
   156,   nil,   132,   nil,   134,    32,   nil,   nil,    46,    50,
    55,   nil,    66,   553,   nil,   nil,   nil,   nil,   nil,   105,
    12,   nil,    21,    24,    33,   135,   416,   nil,   245,   370,
   222,    65,   nil,   nil,    79,   331,   nil,   333,   548,   549,
   403,   583,   nil,   nil,   124,   nil,   nil,   402,    57,    62,
    68,    71,    75,    80,    85,   nil,   125,     8,   nil,   nil,
   nil,   nil,   nil,   nil,   485,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   304,   nil,   nil,   367,
   120,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    28,    35,    41,    45,   nil,   nil,   nil,   nil,   360,   nil,
   nil,   nil,   nil,   343,   nil,   614,   615,   617,   619,   nil,
   798,   626,   628,   612,   613,   nil,   142 ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 136, :_reduce_1,
  2, 133, :_reduce_2,
  4, 135, :_reduce_3,
  2, 134, :_reduce_4,
  1, 140, :_reduce_none,
  1, 140, :_reduce_none,
  3, 140, :_reduce_7,
  2, 140, :_reduce_8,
  0, 158, :_reduce_9,
  4, 143, :_reduce_10,
  3, 143, :_reduce_11,
  3, 143, :_reduce_12,
  3, 143, :_reduce_13,
  2, 143, :_reduce_14,
  3, 143, :_reduce_15,
  3, 143, :_reduce_16,
  3, 143, :_reduce_17,
  3, 143, :_reduce_18,
  3, 143, :_reduce_19,
  0, 159, :_reduce_20,
  5, 143, :_reduce_21,
  4, 143, :_reduce_22,
  3, 143, :_reduce_23,
  3, 143, :_reduce_24,
  3, 143, :_reduce_25,
  6, 143, :_reduce_26,
  5, 143, :_reduce_27,
  5, 143, :_reduce_28,
  5, 143, :_reduce_29,
  3, 143, :_reduce_30,
  3, 143, :_reduce_31,
  3, 143, :_reduce_32,
  3, 143, :_reduce_33,
  1, 143, :_reduce_none,
  1, 157, :_reduce_none,
  3, 157, :_reduce_36,
  3, 157, :_reduce_37,
  2, 157, :_reduce_38,
  2, 157, :_reduce_39,
  1, 157, :_reduce_none,
  1, 147, :_reduce_41,
  1, 149, :_reduce_none,
  1, 149, :_reduce_none,
  2, 149, :_reduce_44,
  2, 149, :_reduce_45,
  2, 149, :_reduce_46,
  1, 162, :_reduce_none,
  4, 162, :_reduce_48,
  4, 162, :_reduce_49,
  0, 169, :_reduce_50,
  0, 170, :_reduce_51,
  6, 167, :_reduce_52,
  2, 161, :_reduce_53,
  3, 161, :_reduce_54,
  4, 161, :_reduce_55,
  5, 161, :_reduce_56,
  4, 161, :_reduce_57,
  5, 161, :_reduce_58,
  2, 161, :_reduce_59,
  2, 161, :_reduce_60,
  1, 150, :_reduce_none,
  3, 150, :_reduce_62,
  1, 173, :_reduce_none,
  3, 173, :_reduce_64,
  1, 172, :_reduce_65,
  2, 172, :_reduce_66,
  3, 172, :_reduce_67,
  2, 172, :_reduce_68,
  2, 172, :_reduce_69,
  1, 172, :_reduce_70,
  1, 175, :_reduce_none,
  3, 175, :_reduce_72,
  2, 174, :_reduce_73,
  3, 174, :_reduce_74,
  1, 176, :_reduce_75,
  4, 176, :_reduce_76,
  3, 176, :_reduce_77,
  3, 176, :_reduce_78,
  3, 176, :_reduce_79,
  3, 176, :_reduce_80,
  2, 176, :_reduce_81,
  1, 176, :_reduce_82,
  1, 148, :_reduce_83,
  4, 148, :_reduce_84,
  3, 148, :_reduce_85,
  3, 148, :_reduce_86,
  3, 148, :_reduce_87,
  3, 148, :_reduce_88,
  2, 148, :_reduce_89,
  1, 148, :_reduce_90,
  1, 178, :_reduce_91,
  1, 178, :_reduce_none,
  2, 179, :_reduce_93,
  1, 179, :_reduce_94,
  3, 179, :_reduce_95,
  1, 180, :_reduce_none,
  1, 180, :_reduce_none,
  1, 180, :_reduce_none,
  1, 180, :_reduce_99,
  1, 180, :_reduce_100,
  1, 145, :_reduce_101,
  1, 145, :_reduce_102,
  1, 146, :_reduce_103,
  0, 184, :_reduce_104,
  4, 146, :_reduce_105,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 181, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  1, 182, :_reduce_none,
  3, 160, :_reduce_173,
  5, 160, :_reduce_174,
  3, 160, :_reduce_175,
  6, 160, :_reduce_176,
  5, 160, :_reduce_177,
  5, 160, :_reduce_178,
  5, 160, :_reduce_179,
  5, 160, :_reduce_180,
  4, 160, :_reduce_181,
  3, 160, :_reduce_182,
  3, 160, :_reduce_183,
  3, 160, :_reduce_184,
  3, 160, :_reduce_185,
  3, 160, :_reduce_186,
  3, 160, :_reduce_187,
  3, 160, :_reduce_188,
  3, 160, :_reduce_189,
  3, 160, :_reduce_190,
  4, 160, :_reduce_191,
  4, 160, :_reduce_192,
  2, 160, :_reduce_193,
  2, 160, :_reduce_194,
  3, 160, :_reduce_195,
  3, 160, :_reduce_196,
  3, 160, :_reduce_197,
  3, 160, :_reduce_198,
  3, 160, :_reduce_199,
  3, 160, :_reduce_200,
  3, 160, :_reduce_201,
  3, 160, :_reduce_202,
  3, 160, :_reduce_203,
  3, 160, :_reduce_204,
  3, 160, :_reduce_205,
  3, 160, :_reduce_206,
  3, 160, :_reduce_207,
  2, 160, :_reduce_208,
  2, 160, :_reduce_209,
  3, 160, :_reduce_210,
  3, 160, :_reduce_211,
  3, 160, :_reduce_212,
  3, 160, :_reduce_213,
  3, 160, :_reduce_214,
  5, 160, :_reduce_215,
  1, 160, :_reduce_none,
  1, 156, :_reduce_217,
  1, 153, :_reduce_none,
  2, 153, :_reduce_219,
  2, 153, :_reduce_220,
  5, 153, :_reduce_221,
  2, 153, :_reduce_222,
  3, 153, :_reduce_223,
  3, 190, :_reduce_224,
  4, 190, :_reduce_225,
  4, 190, :_reduce_226,
  6, 190, :_reduce_227,
  1, 191, :_reduce_none,
  1, 191, :_reduce_none,
  1, 163, :_reduce_230,
  2, 163, :_reduce_231,
  5, 163, :_reduce_232,
  2, 163, :_reduce_233,
  5, 163, :_reduce_234,
  4, 163, :_reduce_235,
  7, 163, :_reduce_236,
  3, 163, :_reduce_237,
  1, 163, :_reduce_none,
  4, 194, :_reduce_239,
  3, 194, :_reduce_240,
  5, 194, :_reduce_241,
  7, 194, :_reduce_242,
  2, 194, :_reduce_243,
  5, 194, :_reduce_244,
  4, 194, :_reduce_245,
  6, 194, :_reduce_246,
  7, 194, :_reduce_247,
  9, 194, :_reduce_248,
  3, 194, :_reduce_249,
  1, 194, :_reduce_none,
  0, 196, :_reduce_251,
  2, 166, :_reduce_252,
  1, 195, :_reduce_none,
  0, 197, :_reduce_254,
  3, 195, :_reduce_255,
  0, 198, :_reduce_256,
  4, 195, :_reduce_257,
  2, 193, :_reduce_258,
  2, 192, :_reduce_259,
  1, 192, :_reduce_none,
  1, 187, :_reduce_261,
  3, 187, :_reduce_262,
  3, 155, :_reduce_263,
  4, 155, :_reduce_264,
  2, 155, :_reduce_265,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 186, :_reduce_274,
  0, 220, :_reduce_275,
  4, 186, :_reduce_276,
  0, 221, :_reduce_277,
  5, 186, :_reduce_278,
  3, 186, :_reduce_279,
  3, 186, :_reduce_280,
  2, 186, :_reduce_281,
  4, 186, :_reduce_282,
  3, 186, :_reduce_283,
  3, 186, :_reduce_284,
  1, 186, :_reduce_285,
  4, 186, :_reduce_286,
  3, 186, :_reduce_287,
  1, 186, :_reduce_288,
  5, 186, :_reduce_289,
  2, 186, :_reduce_290,
  1, 186, :_reduce_none,
  2, 186, :_reduce_292,
  6, 186, :_reduce_293,
  6, 186, :_reduce_294,
  0, 222, :_reduce_295,
  0, 223, :_reduce_296,
  7, 186, :_reduce_297,
  0, 224, :_reduce_298,
  0, 225, :_reduce_299,
  7, 186, :_reduce_300,
  5, 186, :_reduce_301,
  4, 186, :_reduce_302,
  5, 186, :_reduce_303,
  0, 226, :_reduce_304,
  0, 227, :_reduce_305,
  9, 186, :_reduce_306,
  0, 228, :_reduce_307,
  0, 229, :_reduce_308,
  7, 186, :_reduce_309,
  0, 230, :_reduce_310,
  0, 231, :_reduce_311,
  0, 232, :_reduce_312,
  9, 186, :_reduce_313,
  0, 233, :_reduce_314,
  0, 234, :_reduce_315,
  6, 186, :_reduce_316,
  0, 235, :_reduce_317,
  6, 186, :_reduce_318,
  0, 236, :_reduce_319,
  0, 237, :_reduce_320,
  9, 186, :_reduce_321,
  1, 186, :_reduce_322,
  1, 186, :_reduce_323,
  1, 186, :_reduce_324,
  1, 186, :_reduce_325,
  1, 152, :_reduce_326,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  2, 210, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 212, :_reduce_none,
  1, 211, :_reduce_none,
  5, 211, :_reduce_335,
  1, 138, :_reduce_none,
  2, 138, :_reduce_337,
  1, 214, :_reduce_none,
  1, 214, :_reduce_339,
  1, 168, :_reduce_none,
  2, 168, :_reduce_341,
  1, 168, :_reduce_342,
  3, 168, :_reduce_343,
  0, 239, :_reduce_344,
  0, 240, :_reduce_345,
  6, 238, :_reduce_346,
  2, 164, :_reduce_347,
  4, 164, :_reduce_348,
  4, 164, :_reduce_349,
  0, 242, :_reduce_350,
  3, 209, :_reduce_351,
  4, 209, :_reduce_352,
  4, 209, :_reduce_353,
  3, 209, :_reduce_354,
  2, 209, :_reduce_355,
  1, 209, :_reduce_356,
  0, 243, :_reduce_357,
  0, 244, :_reduce_358,
  6, 208, :_reduce_359,
  0, 245, :_reduce_360,
  0, 246, :_reduce_361,
  6, 208, :_reduce_362,
  0, 249, :_reduce_363,
  6, 213, :_reduce_364,
  1, 247, :_reduce_none,
  4, 247, :_reduce_366,
  2, 247, :_reduce_367,
  1, 248, :_reduce_none,
  1, 248, :_reduce_none,
  6, 137, :_reduce_370,
  0, 137, :_reduce_371,
  1, 250, :_reduce_372,
  1, 250, :_reduce_none,
  1, 250, :_reduce_none,
  2, 251, :_reduce_375,
  1, 251, :_reduce_none,
  2, 139, :_reduce_377,
  1, 139, :_reduce_none,
  1, 200, :_reduce_379,
  1, 200, :_reduce_380,
  1, 200, :_reduce_none,
  1, 201, :_reduce_382,
  1, 254, :_reduce_none,
  2, 254, :_reduce_384,
  3, 255, :_reduce_385,
  1, 255, :_reduce_386,
  3, 202, :_reduce_387,
  3, 203, :_reduce_388,
  3, 204, :_reduce_389,
  3, 204, :_reduce_390,
  1, 258, :_reduce_391,
  3, 258, :_reduce_392,
  1, 259, :_reduce_none,
  2, 259, :_reduce_394,
  3, 205, :_reduce_395,
  3, 205, :_reduce_396,
  1, 261, :_reduce_397,
  3, 261, :_reduce_398,
  1, 256, :_reduce_399,
  2, 256, :_reduce_400,
  1, 257, :_reduce_401,
  2, 257, :_reduce_402,
  1, 260, :_reduce_403,
  0, 263, :_reduce_404,
  3, 260, :_reduce_405,
  0, 264, :_reduce_406,
  4, 260, :_reduce_407,
  1, 262, :_reduce_408,
  1, 262, :_reduce_409,
  1, 262, :_reduce_410,
  1, 262, :_reduce_none,
  2, 183, :_reduce_412,
  1, 183, :_reduce_413,
  1, 265, :_reduce_none,
  1, 265, :_reduce_none,
  1, 265, :_reduce_none,
  1, 265, :_reduce_none,
  3, 253, :_reduce_418,
  1, 252, :_reduce_none,
  1, 252, :_reduce_none,
  2, 252, :_reduce_421,
  2, 252, :_reduce_422,
  1, 177, :_reduce_none,
  1, 177, :_reduce_none,
  1, 177, :_reduce_none,
  1, 177, :_reduce_none,
  1, 177, :_reduce_none,
  1, 177, :_reduce_428,
  1, 177, :_reduce_429,
  1, 177, :_reduce_430,
  1, 177, :_reduce_431,
  1, 177, :_reduce_432,
  1, 177, :_reduce_433,
  1, 206, :_reduce_434,
  1, 151, :_reduce_435,
  1, 154, :_reduce_436,
  1, 154, :_reduce_437,
  1, 215, :_reduce_438,
  0, 266, :_reduce_439,
  4, 215, :_reduce_440,
  2, 215, :_reduce_441,
  4, 217, :_reduce_442,
  2, 217, :_reduce_443,
  6, 267, :_reduce_444,
  4, 267, :_reduce_445,
  4, 267, :_reduce_446,
  2, 267, :_reduce_447,
  4, 267, :_reduce_448,
  2, 267, :_reduce_449,
  2, 267, :_reduce_450,
  1, 267, :_reduce_451,
  0, 267, :_reduce_452,
  1, 273, :_reduce_453,
  1, 273, :_reduce_454,
  1, 273, :_reduce_455,
  1, 273, :_reduce_456,
  1, 268, :_reduce_457,
  3, 268, :_reduce_458,
  3, 274, :_reduce_459,
  1, 269, :_reduce_460,
  3, 269, :_reduce_461,
  1, 275, :_reduce_none,
  1, 275, :_reduce_none,
  2, 270, :_reduce_464,
  1, 270, :_reduce_465,
  1, 276, :_reduce_none,
  1, 276, :_reduce_none,
  2, 272, :_reduce_468,
  2, 271, :_reduce_469,
  0, 271, :_reduce_470,
  1, 218, :_reduce_none,
  0, 277, :_reduce_472,
  5, 218, :_reduce_473,
  1, 207, :_reduce_474,
  2, 207, :_reduce_475,
  2, 207, :_reduce_476,
  1, 189, :_reduce_none,
  3, 189, :_reduce_478,
  3, 278, :_reduce_479,
  1, 171, :_reduce_none,
  1, 171, :_reduce_none,
  1, 171, :_reduce_none,
  1, 165, :_reduce_none,
  1, 165, :_reduce_none,
  1, 165, :_reduce_none,
  1, 165, :_reduce_none,
  1, 241, :_reduce_none,
  1, 241, :_reduce_none,
  1, 241, :_reduce_none,
  1, 219, :_reduce_none,
  1, 219, :_reduce_none,
  0, 141, :_reduce_none,
  1, 141, :_reduce_none,
  0, 185, :_reduce_none,
  1, 185, :_reduce_none,
  0, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 188, :_reduce_none,
  1, 216, :_reduce_499,
  1, 216, :_reduce_none,
  1, 144, :_reduce_none,
  2, 144, :_reduce_502,
  0, 142, :_reduce_503,
  0, 199, :_reduce_504 ]

racc_reduce_n = 505

racc_shift_n = 902

racc_token_table = {
  false => 0,
  :error => 1,
  :kCLASS => 2,
  :kMODULE => 3,
  :kDEF => 4,
  :kUNDEF => 5,
  :kBEGIN => 6,
  :kRESCUE => 7,
  :kENSURE => 8,
  :kEND => 9,
  :kIF => 10,
  :kUNLESS => 11,
  :kTHEN => 12,
  :kELSIF => 13,
  :kELSE => 14,
  :kCASE => 15,
  :kWHEN => 16,
  :kWHILE => 17,
  :kUNTIL => 18,
  :kFOR => 19,
  :kBREAK => 20,
  :kNEXT => 21,
  :kREDO => 22,
  :kRETRY => 23,
  :kIN => 24,
  :kDO => 25,
  :kDO_COND => 26,
  :kDO_BLOCK => 27,
  :kRETURN => 28,
  :kYIELD => 29,
  :kSUPER => 30,
  :kSELF => 31,
  :kNIL => 32,
  :kTRUE => 33,
  :kFALSE => 34,
  :kAND => 35,
  :kOR => 36,
  :kNOT => 37,
  :kIF_MOD => 38,
  :kUNLESS_MOD => 39,
  :kWHILE_MOD => 40,
  :kUNTIL_MOD => 41,
  :kRESCUE_MOD => 42,
  :kALIAS => 43,
  :kDEFINED => 44,
  :klBEGIN => 45,
  :klEND => 46,
  :k__LINE__ => 47,
  :k__FILE__ => 48,
  :tIDENTIFIER => 49,
  :tFID => 50,
  :tGVAR => 51,
  :tIVAR => 52,
  :tCONSTANT => 53,
  :tCVAR => 54,
  :tNTH_REF => 55,
  :tBACK_REF => 56,
  :tSTRING_CONTENT => 57,
  :tINTEGER => 58,
  :tFLOAT => 59,
  :tREGEXP_END => 60,
  :tUPLUS => 61,
  :tUMINUS => 62,
  :tUMINUS_NUM => 63,
  :tPOW => 64,
  :tCMP => 65,
  :tEQ => 66,
  :tEQQ => 67,
  :tNEQ => 68,
  :tGEQ => 69,
  :tLEQ => 70,
  :tANDOP => 71,
  :tOROP => 72,
  :tMATCH => 73,
  :tNMATCH => 74,
  :tDOT => 75,
  :tDOT2 => 76,
  :tDOT3 => 77,
  :tAREF => 78,
  :tASET => 79,
  :tLSHFT => 80,
  :tRSHFT => 81,
  :tCOLON2 => 82,
  :tCOLON3 => 83,
  :tOP_ASGN => 84,
  :tASSOC => 85,
  :tLPAREN => 86,
  :tLPAREN2 => 87,
  :tRPAREN => 88,
  :tLPAREN_ARG => 89,
  :tLBRACK => 90,
  :tRBRACK => 91,
  :tLBRACE => 92,
  :tLBRACE_ARG => 93,
  :tSTAR => 94,
  :tSTAR2 => 95,
  :tAMPER => 96,
  :tAMPER2 => 97,
  :tTILDE => 98,
  :tPERCENT => 99,
  :tDIVIDE => 100,
  :tPLUS => 101,
  :tMINUS => 102,
  :tLT => 103,
  :tGT => 104,
  :tPIPE => 105,
  :tBANG => 106,
  :tCARET => 107,
  :tLCURLY => 108,
  :tRCURLY => 109,
  :tBACK_REF2 => 110,
  :tSYMBEG => 111,
  :tSTRING_BEG => 112,
  :tXSTRING_BEG => 113,
  :tREGEXP_BEG => 114,
  :tWORDS_BEG => 115,
  :tAWORDS_BEG => 116,
  :tSTRING_DBEG => 117,
  :tSTRING_DVAR => 118,
  :tSTRING_END => 119,
  :tSTRING => 120,
  :tSYMBOL => 121,
  :tLAST_TOKEN => 122,
  "?" => 123,
  ":" => 124,
  "=" => 125,
  :tLOWEST => 126,
  "[" => 127,
  "," => 128,
  " " => 129,
  "\n" => 130,
  ";" => 131 }

racc_nt_base = 132

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kCLASS",
  "kMODULE",
  "kDEF",
  "kUNDEF",
  "kBEGIN",
  "kRESCUE",
  "kENSURE",
  "kEND",
  "kIF",
  "kUNLESS",
  "kTHEN",
  "kELSIF",
  "kELSE",
  "kCASE",
  "kWHEN",
  "kWHILE",
  "kUNTIL",
  "kFOR",
  "kBREAK",
  "kNEXT",
  "kREDO",
  "kRETRY",
  "kIN",
  "kDO",
  "kDO_COND",
  "kDO_BLOCK",
  "kRETURN",
  "kYIELD",
  "kSUPER",
  "kSELF",
  "kNIL",
  "kTRUE",
  "kFALSE",
  "kAND",
  "kOR",
  "kNOT",
  "kIF_MOD",
  "kUNLESS_MOD",
  "kWHILE_MOD",
  "kUNTIL_MOD",
  "kRESCUE_MOD",
  "kALIAS",
  "kDEFINED",
  "klBEGIN",
  "klEND",
  "k__LINE__",
  "k__FILE__",
  "tIDENTIFIER",
  "tFID",
  "tGVAR",
  "tIVAR",
  "tCONSTANT",
  "tCVAR",
  "tNTH_REF",
  "tBACK_REF",
  "tSTRING_CONTENT",
  "tINTEGER",
  "tFLOAT",
  "tREGEXP_END",
  "tUPLUS",
  "tUMINUS",
  "tUMINUS_NUM",
  "tPOW",
  "tCMP",
  "tEQ",
  "tEQQ",
  "tNEQ",
  "tGEQ",
  "tLEQ",
  "tANDOP",
  "tOROP",
  "tMATCH",
  "tNMATCH",
  "tDOT",
  "tDOT2",
  "tDOT3",
  "tAREF",
  "tASET",
  "tLSHFT",
  "tRSHFT",
  "tCOLON2",
  "tCOLON3",
  "tOP_ASGN",
  "tASSOC",
  "tLPAREN",
  "tLPAREN2",
  "tRPAREN",
  "tLPAREN_ARG",
  "tLBRACK",
  "tRBRACK",
  "tLBRACE",
  "tLBRACE_ARG",
  "tSTAR",
  "tSTAR2",
  "tAMPER",
  "tAMPER2",
  "tTILDE",
  "tPERCENT",
  "tDIVIDE",
  "tPLUS",
  "tMINUS",
  "tLT",
  "tGT",
  "tPIPE",
  "tBANG",
  "tCARET",
  "tLCURLY",
  "tRCURLY",
  "tBACK_REF2",
  "tSYMBEG",
  "tSTRING_BEG",
  "tXSTRING_BEG",
  "tREGEXP_BEG",
  "tWORDS_BEG",
  "tAWORDS_BEG",
  "tSTRING_DBEG",
  "tSTRING_DVAR",
  "tSTRING_END",
  "tSTRING",
  "tSYMBOL",
  "tLAST_TOKEN",
  "\"?\"",
  "\":\"",
  "\"=\"",
  "tLOWEST",
  "\"[\"",
  "\",\"",
  "\" \"",
  "\"\\n\"",
  "\";\"",
  "$start",
  "program",
  "compstmt",
  "bodystmt",
  "@1",
  "opt_rescue",
  "opt_else",
  "opt_ensure",
  "stmts",
  "opt_terms",
  "none",
  "stmt",
  "terms",
  "fitem",
  "undef_list",
  "expr_value",
  "lhs",
  "command_call",
  "mlhs",
  "var_lhs",
  "primary_value",
  "aref_args",
  "backref",
  "mrhs",
  "arg_value",
  "expr",
  "@2",
  "@3",
  "arg",
  "command",
  "block_command",
  "call_args",
  "block_call",
  "operation2",
  "command_args",
  "cmd_brace_block",
  "opt_block_var",
  "@4",
  "@5",
  "operation",
  "mlhs_basic",
  "mlhs_entry",
  "mlhs_head",
  "mlhs_item",
  "mlhs_node",
  "variable",
  "cname",
  "cpath",
  "fname",
  "op",
  "reswords",
  "symbol",
  "@6",
  "opt_nl",
  "primary",
  "args",
  "trailer",
  "assocs",
  "paren_args",
  "opt_paren_args",
  "opt_block_arg",
  "block_arg",
  "call_args2",
  "open_args",
  "@7",
  "@8",
  "@9",
  "none_block_pass",
  "literal",
  "strings",
  "xstring",
  "regexp",
  "words",
  "awords",
  "var_ref",
  "assoc_list",
  "brace_block",
  "method_call",
  "then",
  "if_tail",
  "do",
  "case_body",
  "block_var",
  "superclass",
  "term",
  "f_arglist",
  "singleton",
  "dot_or_colon",
  "@10",
  "@11",
  "@12",
  "@13",
  "@14",
  "@15",
  "@16",
  "@17",
  "@18",
  "@19",
  "@20",
  "@21",
  "@22",
  "@23",
  "@24",
  "@25",
  "@26",
  "@27",
  "do_block",
  "@28",
  "@29",
  "operation3",
  "@30",
  "@31",
  "@32",
  "@33",
  "@34",
  "when_args",
  "cases",
  "@35",
  "exc_list",
  "exc_var",
  "numeric",
  "dsym",
  "string",
  "string1",
  "string_contents",
  "xstring_contents",
  "word_list",
  "word",
  "string_content",
  "qword_list",
  "string_dvar",
  "@36",
  "@37",
  "sym",
  "@38",
  "f_args",
  "f_arg",
  "f_optarg",
  "f_rest_arg",
  "opt_f_block_arg",
  "f_block_arg",
  "f_norm_arg",
  "f_opt",
  "restarg_mark",
  "blkarg_mark",
  "@39",
  "assoc" ]

Racc_debug_parser = true

##### State transition tables end #####

# reduce 0 omitted

def _reduce_1(val, _values, result)
                      self.lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_2(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_3(val, _values, result)
                      result = new_body val
                    
    result
end

def _reduce_4(val, _values, result)
                      result = new_compstmt val
                    
    result
end

# reduce 5 omitted

# reduce 6 omitted

def _reduce_7(val, _values, result)
                      result = self.block_append(val[0], val[2])
                    
    result
end

def _reduce_8(val, _values, result)
                      result = val[1];
                    
    result
end

def _reduce_9(val, _values, result)
                      lexer.lex_state = :expr_fname
                      result = self.lexer.lineno
                    
    result
end

def _reduce_10(val, _values, result)
                      result = s(:alias, val[1], val[3]).line(val[2])
                    
    result
end

def _reduce_11(val, _values, result)
                      result = s(:valias, val[1].to_sym, val[2].to_sym)
                    
    result
end

def _reduce_12(val, _values, result)
                      result = s(:valias, val[1].to_sym, :"$#{val[2]}")
                    
    result
end

def _reduce_13(val, _values, result)
                      yyerror("can't make alias for the number variables");
                    
    result
end

def _reduce_14(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_15(val, _values, result)
                      result = new_if val[2], val[0], nil
                    
    result
end

def _reduce_16(val, _values, result)
                      result = new_if val[2], nil, val[0]
                    
    result
end

def _reduce_17(val, _values, result)
                      result = new_while val[0], val[2], true
                    
    result
end

def _reduce_18(val, _values, result)
                      result = new_until val[0], val[2], true
                    
    result
end

def _reduce_19(val, _values, result)
                      result = s(:rescue, val[0], s(:resbody, s(:array), val[2]))
                    
    result
end

def _reduce_20(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        # yyerror("BEGIN in method"); HACK
                      end
                      self.env.extend;
                    
    result
end

def _reduce_21(val, _values, result)
                      result = new_iter s(:preexe), nil, val[3] # TODO: add test?
                      result = nil # TODO: since it isn't supposed to go in the AST
                    
    result
end

def _reduce_22(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        # yyerror("END in method; use at_exit"); HACK
                      end
                      result = new_iter s(:postexe), nil, val[2]
                    
    result
end

def _reduce_23(val, _values, result)
                      result = self.node_assign(val[0], val[2])
                    
    result
end

def _reduce_24(val, _values, result)
                      result = new_masgn val[0], val[2], :wrap
                    
    result
end

def _reduce_25(val, _values, result)
                      result = new_op_asgn val
                    
    result
end

def _reduce_26(val, _values, result)
                      result = s(:op_asgn1, val[0], val[2], val[4].to_sym, val[5])
                    
    result
end

def _reduce_27(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2], val[3]);
                    
    result
end

def _reduce_28(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2], val[3]);
                    
    result
end

def _reduce_29(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2], val[3]);
                    
    result
end

def _reduce_30(val, _values, result)
                      self.backref_assign_error(val[0]);
                    
    result
end

def _reduce_31(val, _values, result)
                      result = self.node_assign(val[0], s(:svalue, val[2]))
                    
    result
end

def _reduce_32(val, _values, result)
                      result = new_masgn val[0], val[2], :wrap
                    
    result
end

def _reduce_33(val, _values, result)
                      result = new_masgn val[0], val[2]
                    
    result
end

# reduce 34 omitted

# reduce 35 omitted

def _reduce_36(val, _values, result)
                      result = logop(:and, val[0], val[2])
                    
    result
end

def _reduce_37(val, _values, result)
                      result = logop(:or, val[0], val[2])
                    
    result
end

def _reduce_38(val, _values, result)
                      result = s(:not, val[1])
                    
    result
end

def _reduce_39(val, _values, result)
                      result = s(:not, val[1])
                    
    result
end

# reduce 40 omitted

def _reduce_41(val, _values, result)
                      result = value_expr(val[0])
                    
    result
end

# reduce 42 omitted

# reduce 43 omitted

def _reduce_44(val, _values, result)
                      result = s(:return, ret_args(val[1]))
                    
    result
end

def _reduce_45(val, _values, result)
                      result = s(:break, ret_args(val[1]))
                    
    result
end

def _reduce_46(val, _values, result)
                      result = s(:next, ret_args(val[1]))
                    
    result
end

# reduce 47 omitted

def _reduce_48(val, _values, result)
                      result = new_call val[0], val[2], val[3]
                    
    result
end

def _reduce_49(val, _values, result)
                      result = new_call val[0], val[2], val[3]
                    
    result
end

def _reduce_50(val, _values, result)
                      self.env.extend(:dynamic)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_51(val, _values, result)
                      result = self.env.dynamic.keys
                    
    result
end

def _reduce_52(val, _values, result)
                      result = new_iter nil, val[2], val[4]
                      self.env.unextend
                    
    result
end

def _reduce_53(val, _values, result)
                      result = new_call nil, val[0].to_sym, val[1]
                    
    result
end

def _reduce_54(val, _values, result)
                      result = new_call nil, val[0].to_sym, val[1]
                      if val[2] then
                        if result[0] == :block_pass then
                          raise "both block arg and actual block given"
                        end
                        result, operation = val[2], result
                        result.insert 1, operation
                      end
                    
    result
end

def _reduce_55(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_56(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_57(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_58(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                      if val[4] then
                        if result[0] == :block_pass then # REFACTOR
                          raise "both block arg and actual block given"
                        end
                        val[2] << result
                        result = val[2]
                      end
                    
    result
end

def _reduce_59(val, _values, result)
                      result = new_super val[1]
                    
    result
end

def _reduce_60(val, _values, result)
                      result = new_yield val[1]
                    
    result
end

# reduce 61 omitted

def _reduce_62(val, _values, result)
                      result = val[1];
                    
    result
end

# reduce 63 omitted

def _reduce_64(val, _values, result)
                      result = s(:masgn, s(:array, val[1]));
                    
    result
end

def _reduce_65(val, _values, result)
                      result = s(:masgn, val[0]);
                    
    result
end

def _reduce_66(val, _values, result)
                      result = s(:masgn, val[0] << val[1].compact);
                    
    result
end

def _reduce_67(val, _values, result)
                      result = s(:masgn, val[0] << s(:splat, val[2]));
                    
    result
end

def _reduce_68(val, _values, result)
                      result = s(:masgn, val[0] << s(:splat))
                    
    result
end

def _reduce_69(val, _values, result)
                      result = s(:masgn, s(:array, s(:splat, val[1])))
                    
    result
end

def _reduce_70(val, _values, result)
                      result = s(:masgn, s(:array, s(:splat)))
                    
    result
end

# reduce 71 omitted

def _reduce_72(val, _values, result)
                      result = val[1];
                    
    result
end

def _reduce_73(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_74(val, _values, result)
                      result = val[0] << val[1].compact
                    
    result
end

def _reduce_75(val, _values, result)
                      result = self.assignable(val[0])
                    
    result
end

def _reduce_76(val, _values, result)
                      result = self.aryset(val[0], val[2]);
                    
    result
end

def _reduce_77(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=", s(:arglist));
                    
    result
end

def _reduce_78(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=", s(:arglist));
                    
    result
end

def _reduce_79(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=", s(:arglist));
                    
    result
end

def _reduce_80(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        yyerror("dynamic constant assignment");
                      end

                      result = s(:const, s(:colon2, val[0], val[2].to_sym), nil)
                    
    result
end

def _reduce_81(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        yyerror("dynamic constant assignment");
                      end

                      result = s(:const, nil, s(:colon3, val[1].to_sym))
                    
    result
end

def _reduce_82(val, _values, result)
                      self.backref_assign_error(val[0]);
                    
    result
end

def _reduce_83(val, _values, result)
                      result = self.assignable(val[0])
                    
    result
end

def _reduce_84(val, _values, result)
                      result = self.aryset(val[0], val[2]);
                    
    result
end

def _reduce_85(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_86(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_87(val, _values, result)
                      result = s(:attrasgn, val[0], :"#{val[2]}=")
                    
    result
end

def _reduce_88(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        yyerror("dynamic constant assignment")
                      end

                      result = s(:const, s(:colon2, val[0], val[2].to_sym))
                    
    result
end

def _reduce_89(val, _values, result)
                      if (self.in_def || self.in_single > 0) then
                        yyerror("dynamic constant assignment");
                      end

                      result = s(:const, s(:colon3, val[1].to_sym))
                    
    result
end

def _reduce_90(val, _values, result)
                      self.backref_assign_error(val[0]);
                    
    result
end

def _reduce_91(val, _values, result)
                      yyerror("class/module name must be CONSTANT");
                    
    result
end

# reduce 92 omitted

def _reduce_93(val, _values, result)
                      result = s(:colon3, val[1].to_sym)
                    
    result
end

def _reduce_94(val, _values, result)
                      result = val[0].to_sym
                    
    result
end

def _reduce_95(val, _values, result)
                      result = s(:colon2, val[0], val[2].to_sym);
                    
    result
end

# reduce 96 omitted

# reduce 97 omitted

# reduce 98 omitted

def _reduce_99(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[0];
                    
    result
end

def _reduce_100(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[0];
                    
    result
end

def _reduce_101(val, _values, result)
 result = s(:lit, val[0].to_sym) 
    result
end

def _reduce_102(val, _values, result)
 result = s(:lit, val[0]) 
    result
end

def _reduce_103(val, _values, result)
                      result = new_undef val[0]
                    
    result
end

def _reduce_104(val, _values, result)
                      lexer.lex_state = :expr_fname
                    
    result
end

def _reduce_105(val, _values, result)
                      result = new_undef val[0], val[3]
                    
    result
end

# reduce 106 omitted

# reduce 107 omitted

# reduce 108 omitted

# reduce 109 omitted

# reduce 110 omitted

# reduce 111 omitted

# reduce 112 omitted

# reduce 113 omitted

# reduce 114 omitted

# reduce 115 omitted

# reduce 116 omitted

# reduce 117 omitted

# reduce 118 omitted

# reduce 119 omitted

# reduce 120 omitted

# reduce 121 omitted

# reduce 122 omitted

# reduce 123 omitted

# reduce 124 omitted

# reduce 125 omitted

# reduce 126 omitted

# reduce 127 omitted

# reduce 128 omitted

# reduce 129 omitted

# reduce 130 omitted

# reduce 131 omitted

# reduce 132 omitted

# reduce 133 omitted

# reduce 134 omitted

# reduce 135 omitted

# reduce 136 omitted

# reduce 137 omitted

# reduce 138 omitted

# reduce 139 omitted

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

# reduce 146 omitted

# reduce 147 omitted

# reduce 148 omitted

# reduce 149 omitted

# reduce 150 omitted

# reduce 151 omitted

# reduce 152 omitted

# reduce 153 omitted

# reduce 154 omitted

# reduce 155 omitted

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

# reduce 159 omitted

# reduce 160 omitted

# reduce 161 omitted

# reduce 162 omitted

# reduce 163 omitted

# reduce 164 omitted

# reduce 165 omitted

# reduce 166 omitted

# reduce 167 omitted

# reduce 168 omitted

# reduce 169 omitted

# reduce 170 omitted

# reduce 171 omitted

# reduce 172 omitted

def _reduce_173(val, _values, result)
                      result = self.node_assign(val[0], val[2])
                    
    result
end

def _reduce_174(val, _values, result)
                      result = self.node_assign(val[0],
                        s(:rescue, val[2], s(:resbody, s(:array), val[4])))
                      # result.line = val[0].line
                    
    result
end

def _reduce_175(val, _values, result)
                      result = new_op_asgn val
                    
    result
end

def _reduce_176(val, _values, result)
                      result = s(:op_asgn1, val[0], val[2], val[4].to_sym, val[5]);
                      val[2][0] = :arglist
                    
    result
end

def _reduce_177(val, _values, result)
                      result = s(:op_asgn2, val[0], :"#{val[2]}=", val[3].to_sym, val[4]);
                    
    result
end

def _reduce_178(val, _values, result)
                      result = s(:op_asgn2, val[0], :"#{val[2]}=", val[3].to_sym, val[4])
                    
    result
end

def _reduce_179(val, _values, result)
                      result = s(:op_asgn, val[0], val[4], val[2], val[3]);
                    
    result
end

def _reduce_180(val, _values, result)
                      yyerror("constant re-assignment");
                    
    result
end

def _reduce_181(val, _values, result)
                      yyerror("constant re-assignment");
                    
    result
end

def _reduce_182(val, _values, result)
                      self.backref_assign_error(val[0]);
                    
    result
end

def _reduce_183(val, _values, result)
                      v1, v2 = val[0], val[2]
                      if v1.node_type == :lit and v2.node_type == :lit and Fixnum === v1.last and Fixnum === v2.last then
                        result = s(:lit, (v1.last)..(v2.last))
                      else
                        result = s(:dot2, v1, v2)
                      end
                    
    result
end

def _reduce_184(val, _values, result)
                      v1, v2 = val[0], val[2]
                      if v1.node_type == :lit and v2.node_type == :lit and Fixnum === v1.last and Fixnum === v2.last then
                        result = s(:lit, (v1.last)...(v2.last))
                      else
                        result = s(:dot3, v1, v2)
                      end
                    
    result
end

def _reduce_185(val, _values, result)
                      result = new_call val[0], :+, s(:arglist, val[2])
                    
    result
end

def _reduce_186(val, _values, result)
                      result = new_call val[0], :-, s(:arglist, val[2])
                    
    result
end

def _reduce_187(val, _values, result)
                      result = new_call val[0], :*, s(:arglist, val[2])
                    
    result
end

def _reduce_188(val, _values, result)
                      result = new_call val[0], :"/", s(:arglist, val[2])
                    
    result
end

def _reduce_189(val, _values, result)
                      result = new_call val[0], :%, s(:arglist, val[2])
                    
    result
end

def _reduce_190(val, _values, result)
                      result = new_call val[0], :**, s(:arglist, val[2])
                    
    result
end

def _reduce_191(val, _values, result)
                      result = new_call(new_call(s(:lit, val[1]), :"**", s(:arglist, val[3])), :"-@", s(:arglist))
                    
    result
end

def _reduce_192(val, _values, result)
                      result = new_call(new_call(s(:lit, val[1]), :"**", s(:arglist, val[3])), :"-@", s(:arglist));
                    
    result
end

def _reduce_193(val, _values, result)
                      if val[1][0] == :lit then
                        result = val[1]
                      else
                        result = new_call val[1], :"+@", s(:arglist)
                      end
                    
    result
end

def _reduce_194(val, _values, result)
                      result = new_call val[1], :"-@", s(:arglist)
                    
    result
end

def _reduce_195(val, _values, result)
                      result = new_call val[0], :"|", s(:arglist, val[2])
                    
    result
end

def _reduce_196(val, _values, result)
                      result = new_call val[0], :"^", s(:arglist, val[2])
                    
    result
end

def _reduce_197(val, _values, result)
                      result = new_call val[0], :"&", s(:arglist, val[2])
                    
    result
end

def _reduce_198(val, _values, result)
                      result = new_call val[0], :"<=>", s(:arglist, val[2])
                    
    result
end

def _reduce_199(val, _values, result)
                      result = new_call val[0], :">", s(:arglist, val[2])
                    
    result
end

def _reduce_200(val, _values, result)
                      result = new_call val[0], :">=", s(:arglist, val[2])
                    
    result
end

def _reduce_201(val, _values, result)
                      result = new_call val[0], :"<", s(:arglist, val[2])
                    
    result
end

def _reduce_202(val, _values, result)
                      result = new_call val[0], :"<=", s(:arglist, val[2])
                    
    result
end

def _reduce_203(val, _values, result)
                      result = new_call val[0], :"==", s(:arglist, val[2])
                    
    result
end

def _reduce_204(val, _values, result)
                      result = new_call val[0], :"===", s(:arglist, val[2])
                    
    result
end

def _reduce_205(val, _values, result)
                      val[0] = value_expr val[0] # TODO: port call_op and clean these
                      val[2] = value_expr val[2]
                      result = s(:not, new_call(val[0], :"==", s(:arglist, val[2])))
                    
    result
end

def _reduce_206(val, _values, result)
                      result = self.get_match_node(val[0], val[2])
                    
    result
end

def _reduce_207(val, _values, result)
                      result = s(:not, self.get_match_node(val[0], val[2]))
                    
    result
end

def _reduce_208(val, _values, result)
                      result = s(:not, val[1])
                    
    result
end

def _reduce_209(val, _values, result)
                      val[2] = value_expr val[2]
                      result = new_call val[1], :"~", s(:arglist)
                    
    result
end

def _reduce_210(val, _values, result)
                      val[0] = value_expr val[0]
                      val[2] = value_expr val[2]
                      result = new_call val[0], :"\<\<", s(:arglist, val[2])
                    
    result
end

def _reduce_211(val, _values, result)
                      val[0] = value_expr val[0]
                      val[2] = value_expr val[2]
                      result = new_call val[0], :">>", s(:arglist, val[2])
                    
    result
end

def _reduce_212(val, _values, result)
                      result = logop(:and, val[0], val[2])
                    
    result
end

def _reduce_213(val, _values, result)
                      result = logop(:or, val[0], val[2])
                    
    result
end

def _reduce_214(val, _values, result)
                      result = s(:defined, val[2]);
                    
    result
end

def _reduce_215(val, _values, result)
                      result = s(:if, val[0], val[2], val[4]);
                    
    result
end

# reduce 216 omitted

def _reduce_217(val, _values, result)
                      result = value_expr(val[0])
                    
    result
end

# reduce 218 omitted

def _reduce_219(val, _values, result)
                      warning("parenthesize argument(s) for future version");
                      result = s(:array, val[0]);
                    
    result
end

def _reduce_220(val, _values, result)
                      result = val[0];
                    
    result
end

def _reduce_221(val, _values, result)
                      result = self.arg_concat(val[0], val[3])
                    
    result
end

def _reduce_222(val, _values, result)
                      result = s(:array, s(:hash, *val[0].values))
                    
    result
end

def _reduce_223(val, _values, result)
                      result = s(:splat, val[1])
                      result.paren = true
                    
    result
end

def _reduce_224(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_225(val, _values, result)
                      result = val[1];
                    
    result
end

def _reduce_226(val, _values, result)
                      warning("parenthesize argument(s) for future version");
                      result = s(:array, val[1]);
                    
    result
end

def _reduce_227(val, _values, result)
                      warning("parenthesize argument(s) for future version");
                      result = val[1].add(val[3]);
                    
    result
end

# reduce 228 omitted

# reduce 229 omitted

def _reduce_230(val, _values, result)
                      warning("parenthesize argument(s) for future version");
                      result = s(:array, val[0])
                    
    result
end

def _reduce_231(val, _values, result)
                      result = self.arg_blk_pass(val[0], val[1]);
                    
    result
end

def _reduce_232(val, _values, result)
                      result = self.arg_concat(val[0], val[3]);
                      result = self.arg_blk_pass(result, val[4]);
                    
    result
end

def _reduce_233(val, _values, result)
                      result = s(:array, s(:hash, *val[0].values))
                      result = self.arg_blk_pass(result, val[1]);
                    
    result
end

def _reduce_234(val, _values, result)
                      result = self.arg_concat(s(:array, s(:hash, *val[0].values)), val[3])
                      result = self.arg_blk_pass(result, val[4]);
                    
    result
end

def _reduce_235(val, _values, result)
                      result = val[0] << s(:hash, *val[2].values)
                      result = self.arg_blk_pass(result, val[3]);
                    
    result
end

def _reduce_236(val, _values, result)
                      val[0] << s(:hash, *val[2].values)
                      result = self.arg_concat(val[0], val[5])
                      result = self.arg_blk_pass(result, val[6]);
                    
    result
end

def _reduce_237(val, _values, result)
                      result = self.arg_blk_pass(s(:splat, val[1]), val[2])
                    
    result
end

# reduce 238 omitted

def _reduce_239(val, _values, result)
                      args = self.list_prepend(val[0], val[2])
                      result = self.arg_blk_pass(args, val[3])
                    
    result
end

def _reduce_240(val, _values, result)
                      result = self.arg_blk_pass(val[0], val[2]);
                    
    result
end

def _reduce_241(val, _values, result)
                      result = self.arg_concat(s(:array, val[0]), val[3]);
                      result = self.arg_blk_pass(result, val[4]);
                    
    result
end

def _reduce_242(val, _values, result)
                      result = self.arg_concat(s(:array, val[0], s(:hash, *val[2].values)), val[5])
                      result = self.arg_blk_pass(result, val[6]);
                    
    result
end

def _reduce_243(val, _values, result)
                      result = s(:array, s(:hash, *val[0].values));
                      result = self.arg_blk_pass(result, val[1]);
                    
    result
end

def _reduce_244(val, _values, result)
                      result = s(:array, s(:hash, *val[0].values), val[3])
                      result = self.arg_blk_pass(result, val[4])
                    
    result
end

def _reduce_245(val, _values, result)
                      result = s(:array, val[0], s(:hash, *val[2].values))
                      result = self.arg_blk_pass(result, val[3])
                    
    result
end

def _reduce_246(val, _values, result)
                      result = s(:array, val[0]).add_all(val[2]).add(s(:hash, *val[4].values));
                      result = self.arg_blk_pass(result, val[5]);
                    
    result
end

def _reduce_247(val, _values, result)
                      result = self.arg_concat(s(:array, val[0]).add(s(:hash, *val[2].values)), val[5]);
                      result = self.arg_blk_pass(result, val[6]);
                    
    result
end

def _reduce_248(val, _values, result)
                      result = self.arg_concat(s(:array, val[0]).add_all(val[2]).add(s(:hash, *val[4].values)), val[7]);
                      result = self.arg_blk_pass(result, val[8]);
                    
    result
end

def _reduce_249(val, _values, result)
                      result = self.arg_blk_pass(s(:splat, val[1]), val[2]);
                    
    result
end

# reduce 250 omitted

def _reduce_251(val, _values, result)
                      result = lexer.cmdarg.stack.dup
                      lexer.cmdarg.push true
                    
    result
end

def _reduce_252(val, _values, result)
                      lexer.cmdarg.stack.replace val[0]
                      result = val[1]
                    
    result
end

# reduce 253 omitted

def _reduce_254(val, _values, result)
                      lexer.lex_state = :expr_endarg
                    
    result
end

def _reduce_255(val, _values, result)
                      warning("don't put space before argument parentheses");
                      result = nil;
                    
    result
end

def _reduce_256(val, _values, result)
                      lexer.lex_state = :expr_endarg
                    
    result
end

def _reduce_257(val, _values, result)
                      warning("don't put space before argument parentheses");
                      result = val[1];
                    
    result
end

def _reduce_258(val, _values, result)
                      result = s(:block_pass, val[1]);
                    
    result
end

def _reduce_259(val, _values, result)
                      result = val[1];
                    
    result
end

# reduce 260 omitted

def _reduce_261(val, _values, result)
                      result = s(:array, val[0])
                    
    result
end

def _reduce_262(val, _values, result)
                      result = self.list_append(val[0], val[2])
                    
    result
end

def _reduce_263(val, _values, result)
                      result = val[0] << val[2]
                    
    result
end

def _reduce_264(val, _values, result)
                      result = self.arg_concat(val[0], val[3])
                    
    result
end

def _reduce_265(val, _values, result)
                      result = s(:splat, val[1])
                    
    result
end

# reduce 266 omitted

# reduce 267 omitted

# reduce 268 omitted

# reduce 269 omitted

# reduce 270 omitted

# reduce 271 omitted

# reduce 272 omitted

# reduce 273 omitted

def _reduce_274(val, _values, result)
                      result = new_call nil, val[0].to_sym
                    
    result
end

def _reduce_275(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_276(val, _values, result)
                      unless val[2] then
                        result = s(:nil)
                      else
                        result = s(:begin, val[2])
                      end

                      result.line = val[1]
                    
    result
end

def _reduce_277(val, _values, result)
                      lexer.lex_state = :expr_endarg
                    
    result
end

def _reduce_278(val, _values, result)
                      warning("(...) interpreted as grouped expression");
                      result = val[1];
                    
    result
end

def _reduce_279(val, _values, result)
                      result = val[1] || s(:nil)
                      result.paren = true
                    
    result
end

def _reduce_280(val, _values, result)
                      result = s(:colon2, val[0], val[2].to_sym)
                    
    result
end

def _reduce_281(val, _values, result)
                      result = s(:colon3, val[1].to_sym)
                    
    result
end

def _reduce_282(val, _values, result)
                      result = new_aref val
                    
    result
end

def _reduce_283(val, _values, result)
                      result = val[1] || s(:array)
                    
    result
end

def _reduce_284(val, _values, result)
                      result = s(:hash, *val[1].values)
                    
    result
end

def _reduce_285(val, _values, result)
                      result = s(:return)
                    
    result
end

def _reduce_286(val, _values, result)
                      result = new_yield val[2]
                    
    result
end

def _reduce_287(val, _values, result)
                      result = new_yield
                    
    result
end

def _reduce_288(val, _values, result)
                      result = new_yield
                    
    result
end

def _reduce_289(val, _values, result)
                      result = s(:defined, val[3]);
                    
    result
end

def _reduce_290(val, _values, result)
                      oper, iter = val[0], val[1]
                      call = new_call(nil, oper.to_sym)
                      iter.insert 1, call
                      result = iter
                      call.line ||= iter.line
                    
    result
end

# reduce 291 omitted

def _reduce_292(val, _values, result)
                      call, iter = val[0], val[1]
                      iter.insert 1, call
                      result = iter
                    
    result
end

def _reduce_293(val, _values, result)
                      result = new_if val[1], val[3], val[4]
                    
    result
end

def _reduce_294(val, _values, result)
                      result = new_if val[1], val[4], val[3]
                    
    result
end

def _reduce_295(val, _values, result)
                      lexer.cond.push true
                    
    result
end

def _reduce_296(val, _values, result)
                      lexer.cond.pop
                    
    result
end

def _reduce_297(val, _values, result)
                      result = new_while val[5], val[2], true
                    
    result
end

def _reduce_298(val, _values, result)
                      lexer.cond.push true
                    
    result
end

def _reduce_299(val, _values, result)
                      lexer.cond.pop
                    
    result
end

def _reduce_300(val, _values, result)
                      result = new_until val[5], val[2], true
                    
    result
end

def _reduce_301(val, _values, result)
                      result = new_case val[1], val[3]
                    
    result
end

def _reduce_302(val, _values, result)
                      result = new_case nil, val[2]
                    
    result
end

def _reduce_303(val, _values, result)
                      result = new_case nil, val[3]
                    
    result
end

def _reduce_304(val, _values, result)
                      lexer.cond.push true
                    
    result
end

def _reduce_305(val, _values, result)
                      lexer.cond.pop
                    
    result
end

def _reduce_306(val, _values, result)
                      result = new_for val[4], val[1], val[7]
                    
    result
end

def _reduce_307(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_308(val, _values, result)
                      self.comments.push self.lexer.comments
                      if (self.in_def || self.in_single > 0) then
                        yyerror("class definition in method body");
                      end
                      self.env.extend
                    
    result
end

def _reduce_309(val, _values, result)
                      result = new_class val
                      self.env.unextend
                    
    result
end

def _reduce_310(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_311(val, _values, result)
                      result = self.in_def
                      self.in_def = false
                    
    result
end

def _reduce_312(val, _values, result)
                      result = self.in_single
                      self.in_single = 0
                      self.env.extend
                    
    result
end

def _reduce_313(val, _values, result)
                      result = new_sclass val
                      self.env.unextend
                    
    result
end

def _reduce_314(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_315(val, _values, result)
                      self.comments.push self.lexer.comments
                      yyerror("module definition in method body") if
                        self.in_def or self.in_single > 0

                      self.env.extend;
                    
    result
end

def _reduce_316(val, _values, result)
                      result = new_module val
                      self.env.unextend;
                    
    result
end

def _reduce_317(val, _values, result)
                      self.comments.push self.lexer.comments
                      self.in_def = true
                      self.env.extend
                      result = self.lexer.lineno
                    
    result
end

def _reduce_318(val, _values, result)
                      result = new_defn val
                      self.env.unextend
                      self.in_def = false
                    
    result
end

def _reduce_319(val, _values, result)
                      self.comments.push self.lexer.comments
                      lexer.lex_state = :expr_fname
                    
    result
end

def _reduce_320(val, _values, result)
                      self.in_single += 1
                      self.env.extend;
                      lexer.lex_state = :expr_end # force for args
                    
    result
end

def _reduce_321(val, _values, result)
                      result = new_defs val

                      self.env.unextend;
                      self.in_single -= 1
                    
    result
end

def _reduce_322(val, _values, result)
                      result = s(:break)
                    
    result
end

def _reduce_323(val, _values, result)
                      result = s(:next)
                    
    result
end

def _reduce_324(val, _values, result)
                      result = s(:redo)
                    
    result
end

def _reduce_325(val, _values, result)
                      result = s(:retry)
                    
    result
end

def _reduce_326(val, _values, result)
                      result = value_expr(val[0])
                    
    result
end

# reduce 327 omitted

# reduce 328 omitted

# reduce 329 omitted

# reduce 330 omitted

# reduce 331 omitted

# reduce 332 omitted

# reduce 333 omitted

# reduce 334 omitted

def _reduce_335(val, _values, result)
                      result = s(:if, val[1], val[3], val[4]);
                    
    result
end

# reduce 336 omitted

def _reduce_337(val, _values, result)
                      result = val[1];
                    
    result
end

# reduce 338 omitted

def _reduce_339(val, _values, result)
                      val[0].delete_at 1 if val[0][1].nil? # HACK
                    
    result
end

# reduce 340 omitted

def _reduce_341(val, _values, result)
                      result = 0
                    
    result
end

def _reduce_342(val, _values, result)
                      result = 0
                    
    result
end

def _reduce_343(val, _values, result)
                      result = val[1];
                    
    result
end

def _reduce_344(val, _values, result)
                      self.env.extend :dynamic
                    
    result
end

def _reduce_345(val, _values, result)
                      result = self.env.dynamic.keys
                    
    result
end

def _reduce_346(val, _values, result)
                      vars   = val[2]
                      body   = val[4]
                      result = new_iter nil, vars, body

                      self.env.unextend
                    
    result
end

def _reduce_347(val, _values, result)
                      raise SyntaxError, "Both block arg and actual block given." if
                        val[0] && val[0][0] == :blockpass

                      result = val[1]
                      result.insert 1, val[0]
                    
    result
end

def _reduce_348(val, _values, result)
                      result = new_call val[0], val[2], val[3]
                    
    result
end

def _reduce_349(val, _values, result)
                      result = new_call val[0], val[2], val[3]
                    
    result
end

def _reduce_350(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_351(val, _values, result)
                      result = new_call nil, val[0].to_sym, val[2]
                    
    result
end

def _reduce_352(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_353(val, _values, result)
                      result = new_call val[0], val[2].to_sym, val[3]
                    
    result
end

def _reduce_354(val, _values, result)
                      result = new_call val[0], val[2].to_sym
                    
    result
end

def _reduce_355(val, _values, result)
                      result = new_super val[1]
                    
    result
end

def _reduce_356(val, _values, result)
                      result = s(:zsuper)
                    
    result
end

def _reduce_357(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno
                    
    result
end

def _reduce_358(val, _values, result)
                      result = self.env.dynamic.keys
                    
    result
end

def _reduce_359(val, _values, result)
                      # REFACTOR
                      args   = val[2]
                      body   = val[4]
                      result = new_iter nil, args, body
                      self.env.unextend
                      result.line = val[1]
                    
    result
end

def _reduce_360(val, _values, result)
                      self.env.extend :dynamic
                      result = self.lexer.lineno
                    
    result
end

def _reduce_361(val, _values, result)
                      result = self.env.dynamic.keys
                    
    result
end

def _reduce_362(val, _values, result)
                      args = val[2]
                      body = val[4]
                      result = new_iter nil, args, body
                      self.env.unextend
                      result.line = val[1]
                    
    result
end

def _reduce_363(val, _values, result)
                      result = self.lexer.lineno
                    
    result
end

def _reduce_364(val, _values, result)
                      result = s(:when, val[2], val[4])
                      result.line = val[1]
                      result << val[5] if val[5]
                    
    result
end

# reduce 365 omitted

def _reduce_366(val, _values, result)
                      result = self.list_append(val[0], s(:when, val[3], nil))
                    
    result
end

def _reduce_367(val, _values, result)
                      result = s(:array, s(:when, val[1], nil));
                    
    result
end

# reduce 368 omitted

# reduce 369 omitted

def _reduce_370(val, _values, result)
                      klasses, var, body, rest = val[1], val[2], val[4], val[5]

                      klasses ||= s(:array)
                      klasses << node_assign(var, s(:gvar, :"$!")) if var

                      result = s(:resbody, klasses, body)
                      result << rest if rest # UGH, rewritten above
                    
    result
end

def _reduce_371(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_372(val, _values, result)
                      result = s(:array, val[0]);
                    
    result
end

# reduce 373 omitted

# reduce 374 omitted

def _reduce_375(val, _values, result)
                      result = val[1];
                    
    result
end

# reduce 376 omitted

def _reduce_377(val, _values, result)
                      if (val[1] != nil) then
                        result = val[1];
                      else
                        result = s(:nil)
                      end
                    
    result
end

# reduce 378 omitted

def _reduce_379(val, _values, result)
 result = s(:lit, val[0]) 
    result
end

def _reduce_380(val, _values, result)
 result = s(:lit, val[0]) 
    result
end

# reduce 381 omitted

def _reduce_382(val, _values, result)
                      val[0] = s(:dstr, val[0].value) if val[0][0] == :evstr
                      result = val[0];
                    
    result
end

# reduce 383 omitted

def _reduce_384(val, _values, result)
                      result = self.literal_concat(val[0], val[1]);
                    
    result
end

def _reduce_385(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_386(val, _values, result)
                      result = s(:str, val[0])
                    
    result
end

def _reduce_387(val, _values, result)
                      result = new_xstring val[1]
                    
    result
end

def _reduce_388(val, _values, result)
                      result = new_regexp val
                    
    result
end

def _reduce_389(val, _values, result)
                      result = s(:array);
                    
    result
end

def _reduce_390(val, _values, result)
                      result = val[1];
                    
    result
end

def _reduce_391(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_392(val, _values, result)
                      word = val[1][0] == :evstr ? s(:dstr, '', val[1]) : val[1]
                      result = val[0] << word
                    
    result
end

# reduce 393 omitted

def _reduce_394(val, _values, result)
                      result = self.literal_concat(val[0], val[1]);
                    
    result
end

def _reduce_395(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_396(val, _values, result)
                      result = val[1]
                    
    result
end

def _reduce_397(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_398(val, _values, result)
                      result = val[0] << s(:str, val[1])
                    
    result
end

def _reduce_399(val, _values, result)
                      result = s(:str, "")
                    
    result
end

def _reduce_400(val, _values, result)
                      result = literal_concat(val[0], val[1])
                    
    result
end

def _reduce_401(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_402(val, _values, result)
                      result = literal_concat(val[0], val[1])
                    
    result
end

def _reduce_403(val, _values, result)
                      result = s(:str, val[0])
                    
    result
end

def _reduce_404(val, _values, result)
                      result = lexer.lex_strterm;
                      lexer.lex_strterm = nil
                      lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_405(val, _values, result)
                      lexer.lex_strterm = val[1]
                      result = s(:evstr, val[2]);
                    
    result
end

def _reduce_406(val, _values, result)
                      result = lexer.lex_strterm;
                      lexer.lex_strterm = nil
                      lexer.lex_state = :expr_beg
                      lexer.cond.push false
                      lexer.cmdarg.push false
                    
    result
end

def _reduce_407(val, _values, result)
                      lexer.lex_strterm = val[1]
                      lexer.cond.lexpop
                      lexer.cmdarg.lexpop

                      case val[2]
                      when Sexp then
                        case val[2][0]
                        when :str, :dstr, :evstr then
                          result = val[2]
                        else
                          result = s(:evstr, val[2])
                        end
                      when nil then
                        result = s(:evstr)
                      else
                        raise "unknown rescue body: #{val[2].inspect}"
                      end
                    
    result
end

def _reduce_408(val, _values, result)
 result = s(:gvar, val[0].to_sym) 
    result
end

def _reduce_409(val, _values, result)
 result = s(:ivar, val[0].to_sym) 
    result
end

def _reduce_410(val, _values, result)
 result = s(:cvar, val[0].to_sym) 
    result
end

# reduce 411 omitted

def _reduce_412(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[1].to_sym
                    
    result
end

def _reduce_413(val, _values, result)
                      result = val[0].to_sym
                    
    result
end

# reduce 414 omitted

# reduce 415 omitted

# reduce 416 omitted

# reduce 417 omitted

def _reduce_418(val, _values, result)
                      lexer.lex_state = :expr_end
                      result = val[1]

                      yyerror("empty symbol literal") if
                        result.nil? or result.empty?

                      case result[0]
                      when :dstr then
                        result[0] = :dsym
                      when :str then
                        result = s(:lit, result.last.intern)
                      else
                        result = s(:dsym, '', result)
                      end
                    
    result
end

# reduce 419 omitted

# reduce 420 omitted

def _reduce_421(val, _values, result)
                      result = -val[1] # TODO: pt_testcase
                    
    result
end

def _reduce_422(val, _values, result)
                      result = -val[1] # TODO: pt_testcase
                    
    result
end

# reduce 423 omitted

# reduce 424 omitted

# reduce 425 omitted

# reduce 426 omitted

# reduce 427 omitted

def _reduce_428(val, _values, result)
 result = :nil        
    result
end

def _reduce_429(val, _values, result)
 result = :self       
    result
end

def _reduce_430(val, _values, result)
 result = :true       
    result
end

def _reduce_431(val, _values, result)
 result = :false      
    result
end

def _reduce_432(val, _values, result)
 result = :"__FILE__" 
    result
end

def _reduce_433(val, _values, result)
 result = :"__LINE__" 
    result
end

def _reduce_434(val, _values, result)
                      result = self.gettable(val[0])
                    
    result
end

def _reduce_435(val, _values, result)
                      result = self.assignable(val[0]);
                    
    result
end

def _reduce_436(val, _values, result)
 result = s(:nth_ref,  val[0]) 
    result
end

def _reduce_437(val, _values, result)
 result = s(:back_ref, val[0]) 
    result
end

def _reduce_438(val, _values, result)
                      result = nil
                    
    result
end

def _reduce_439(val, _values, result)
                      lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_440(val, _values, result)
                      result = val[2];
                    
    result
end

def _reduce_441(val, _values, result)
                      yyerrok;
                      result = nil;
                    
    result
end

def _reduce_442(val, _values, result)
                      result = val[1];
                      lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_443(val, _values, result)
                      result = val[0];
                    
    result
end

def _reduce_444(val, _values, result)
                      result = args val[0], val[2], val[4], val[5]
                    
    result
end

def _reduce_445(val, _values, result)
                      result = args val[0], val[2],    nil, val[3]
                    
    result
end

def _reduce_446(val, _values, result)
                      result = args val[0],    nil, val[2], val[3]
                    
    result
end

def _reduce_447(val, _values, result)
                      result = args val[0],    nil,    nil, val[1]
                    
    result
end

def _reduce_448(val, _values, result)
                      result = args    nil, val[0], val[2], val[3]
                    
    result
end

def _reduce_449(val, _values, result)
                      result = args    nil, val[0],    nil, val[1]
                    
    result
end

def _reduce_450(val, _values, result)
                      result = args    nil,    nil, val[0], val[1]
                    
    result
end

def _reduce_451(val, _values, result)
                      result = args    nil,    nil,    nil, val[0]
                    
    result
end

def _reduce_452(val, _values, result)
                      result = args    nil,    nil,    nil,    nil
                    
    result
end

def _reduce_453(val, _values, result)
                      yyerror "formal argument cannot be a constant: #{val[0]}"
                    
    result
end

def _reduce_454(val, _values, result)
                      yyerror("formal argument cannot be an instance variable");
                    
    result
end

def _reduce_455(val, _values, result)
                      yyerror("formal argument cannot be a class variable");
                    
    result
end

def _reduce_456(val, _values, result)
                      identifier = val[0].to_sym
                      self.env[identifier] = :lvar

                      result = val[0];
                    
    result
end

def _reduce_457(val, _values, result)
                      result = s(:args)
                      result << val[0].to_sym
                    
    result
end

def _reduce_458(val, _values, result)
                      val[0] << val[2].to_sym
                      result = val[0]
                    
    result
end

def _reduce_459(val, _values, result)
                      result = self.assignable(val[0], val[2]);
                      # TODO: detect duplicate names
                    
    result
end

def _reduce_460(val, _values, result)
                      result = s(:block, val[0])
                    
    result
end

def _reduce_461(val, _values, result)
                      result = self.append_to_block(val[0], val[2]);
                    
    result
end

# reduce 462 omitted

# reduce 463 omitted

def _reduce_464(val, _values, result)
                      # TODO: differs from parse.y - needs tests
                      name = val[1].to_sym
                      self.assignable(name)
                      result = :"*#{name}"
                    
    result
end

def _reduce_465(val, _values, result)
                      name = :"*"
                      self.env[name] = :lvar
                      result = name
                    
    result
end

# reduce 466 omitted

# reduce 467 omitted

def _reduce_468(val, _values, result)
                      identifier = val[1].to_sym

                      self.env[identifier] = :lvar
                      result = s(:block_arg, identifier.to_sym)
                    
    result
end

def _reduce_469(val, _values, result)
                      result = val[1];
                    
    result
end

def _reduce_470(val, _values, result)
                      result = nil;
                    
    result
end

# reduce 471 omitted

def _reduce_472(val, _values, result)
                      lexer.lex_state = :expr_beg
                    
    result
end

def _reduce_473(val, _values, result)
                      result = val[2]
                      yyerror("Can't define single method for literals.") if
                        result[0] == :lit
                    
    result
end

def _reduce_474(val, _values, result)
                      result = s(:array)
                    
    result
end

def _reduce_475(val, _values, result)
                      result = val[0];
                    
    result
end

def _reduce_476(val, _values, result)
                      size = val[0].size
                      if (size % 2 != 1) then # != 1 because of leading :array
                        yyerror("Odd number (#{size}) list for Hash. #{val[0].inspect}");
                      end
                      result = val[0];
                    
    result
end

# reduce 477 omitted

def _reduce_478(val, _values, result)
                      list = val[0].dup
                      more = val[2][1..-1]
                      list.push(*more) unless more.empty?
                      result = list
                    
    result
end

def _reduce_479(val, _values, result)
                      result = s(:array, val[0], val[2])
                    
    result
end

# reduce 480 omitted

# reduce 481 omitted

# reduce 482 omitted

# reduce 483 omitted

# reduce 484 omitted

# reduce 485 omitted

# reduce 486 omitted

# reduce 487 omitted

# reduce 488 omitted

# reduce 489 omitted

# reduce 490 omitted

# reduce 491 omitted

# reduce 492 omitted

# reduce 493 omitted

# reduce 494 omitted

# reduce 495 omitted

# reduce 496 omitted

# reduce 497 omitted

# reduce 498 omitted

def _reduce_499(val, _values, result)
 yyerrok 
    result
end

# reduce 500 omitted

# reduce 501 omitted

def _reduce_502(val, _values, result)
 yyerrok 
    result
end

def _reduce_503(val, _values, result)
 result = nil 
    result
end

def _reduce_504(val, _values, result)
 result = nil 
    result
end

def _reduce_none(val, _values, result)
  val[0]
end

end   # class RubyParser
