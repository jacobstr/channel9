############################################################
# This file is imported from a different project.
# DO NOT make modifications in this repo.
# File a patch instead and assign it to Ryan Davis
############################################################

#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.5
# from Racc grammer file "".
#

require 'racc/parser.rb'
class RubyParser < Racc::Parser


require 'ruby_lexer'
##### State transition tables begin ###

clist = [
'-280,392,336,336,639,97,570,-280,-280,-280,-87,637,452,-280,-280,613',
'-280,752,151,152,-85,370,685,562,-427,151,152,-431,575,733,639,-427',
'576,461,-431,-280,-280,637,-280,-280,-280,-280,-280,496,-90,494,-87',
'-82,614,-86,-85,-89,-64,684,-81,666,-84,282,-84,-76,-90,-87,461,393',
'-280,-280,-280,-280,-280,-280,-280,-280,-280,-280,-280,-280,-280,-280',
'719,711,-280,-280,-280,282,657,338,338,666,-280,666,-72,-87,-85,336',
'461,-280,461,-280,731,-280,-280,-280,-280,-280,-280,-280,-501,-280,571',
'-280,461,282,-79,-501,-501,-501,729,-88,-501,-501,-501,-280,-501,-88',
'-481,-280,-80,-83,-280,-280,-85,-85,-501,247,249,743,-85,-85,394,-84',
'-90,-501,-501,462,-501,-501,-501,-501,-501,247,249,664,-77,613,745,-350',
'-87,247,249,-86,-76,-501,-87,-87,351,-86,-86,353,-501,-501,-501,351',
'462,-501,-501,-501,338,-501,247,249,-482,-501,-89,664,-86,664,614,-501',
'-501,247,249,247,249,307,-501,351,-501,-501,-88,-501,-501,-501,-501',
'-501,462,723,462,351,-83,-281,247,249,247,249,749,-501,-281,372,711',
'-80,462,-90,663,-430,354,355,247,249,-501,-75,-430,354,355,351,-501',
'-501,-501,-485,351,359,360,545,-82,-501,-485,-485,-485,-481,307,-501',
'-485,-485,-79,-485,279,354,355,515,728,-281,279,-87,-485,-89,-79,-86',
'531,354,355,532,-501,-77,-485,-485,-432,-485,-485,-485,-485,-485,-273',
'-432,613,-501,-81,386,-78,-273,452,-501,-501,531,-433,354,355,368,151',
'152,354,355,507,-485,-485,-485,-485,-485,-485,-485,-485,-485,-485,-485',
'-485,-485,-485,614,-79,-485,-485,-485,613,656,-281,707,-432,-485,496',
'-89,494,-281,-273,-83,-485,-79,-485,-77,-485,-485,-485,-485,-485,-485',
'-485,279,-485,-485,-485,706,410,-426,863,-79,-77,614,-79,408,-426,862',
'-485,782,-86,765,-485,-78,385,-485,-485,15,19,25,-77,34,-281,-77,275',
'50,59,704,258,261,77,702,86,90,5,8,13,21,26,725,711,660,-433,46,53,56',
'60,63,69,74,861,770,93,-282,587,590,592,595,561,36,-282,561,45,48,55',
'61,64,70,75,78,82,88,383,6,11,-273,24,29,33,382,-85,-83,-273,-77,-75',
'-428,-429,-280,-432,390,-84,701,-428,-429,-280,-432,389,380,122,-482',
'493,126,494,-282,68,73,378,81,-421,782,-424,302,711,17,505,-421,365',
'-424,301,253,254,57,381,364,376,-273,79,83,89,3,7,12,15,19,25,31,34',
'-280,-432,388,50,59,699,247,249,77,279,86,90,5,8,13,21,26,587,590,592',
'595,46,53,56,60,63,69,74,404,363,93,374,510,279,494,403,28,36,40,43',
'45,48,55,61,64,70,75,78,82,88,-280,6,11,-326,24,29,33,-280,279,504,-326',
'505,-482,579,275,-282,-281,341,258,261,578,373,-282,-281,340,774,38',
'419,381,51,247,249,68,73,420,81,775,91,686,275,117,17,421,258,261,263',
'266,416,682,57,-280,414,415,-326,79,83,89,3,7,12,-481,-481,-481,577',
'-481,-282,-281,339,-481,-481,725,711,418,-481,785,-481,-481,-481,-481',
'-481,-481,-481,247,249,151,152,-481,-481,-481,-481,-481,-481,-481,279',
'671,673,282,675,82,88,247,249,-481,151,152,-481,-481,-481,-481,-481',
'-481,-481,-481,-481,-481,-280,-481,-481,787,-481,-481,-481,-280,454',
'275,592,595,-482,258,261,263,266,288,289,290,291,292,247,249,151,152',
'-481,683,791,-481,-481,794,-481,-481,-261,-481,372,-481,372,-481,796',
'-481,288,289,290,291,292,797,586,-481,-280,594,597,599,-481,-481,-481',
'-481,-481,-481,-482,-482,-482,679,-482,799,-86,369,-482,-482,247,249',
'372,-482,561,-482,-482,-482,-482,-482,-482,-482,247,249,307,307,-482',
'-482,-482,-482,-482,-482,-482,587,590,592,595,288,289,290,291,292,-482',
'286,465,-482,-482,-482,-482,-482,-482,-482,-482,-482,-482,807,-482,-482',
'307,-482,-482,-482,279,-503,-503,-503,-503,265,268,-262,-63,-503,-503',
'467,810,307,307,304,264,267,362,-482,657,282,-482,-482,677,-482,-482',
'282,-482,307,-482,275,-482,278,-482,258,261,263,266,269,271,273,-482',
'277,498,418,358,-482,-482,-482,-482,-482,-482,10,15,19,25,31,34,-88',
'655,350,50,59,505,824,735,77,827,86,90,5,8,13,21,26,702,-479,702,704',
'46,53,56,60,63,69,74,830,649,93,-261,512,838,330,841,28,36,40,43,45',
'48,55,61,64,70,75,78,82,88,843,6,11,320,24,29,33,279,312,846,282,643',
'849,850,640,851,293,853,-424,282,286,286,284,264,267,-424,38,635,282',
'51,-479,860,68,73,634,81,307,91,275,531,278,17,258,261,263,266,620,-72',
'273,57,277,-479,618,561,79,83,89,3,7,12,10,15,19,25,31,34,561,83,-424',
'50,59,617,874,875,77,876,86,90,5,8,13,21,26,877,-485,702,608,46,53,56',
'60,63,69,74,451,279,93,279,279,279,887,608,28,36,40,43,45,48,55,61,64',
'70,75,78,82,88,146,6,11,890,24,29,33,279,145,606,143,115,561,561,561',
'568,95,561,-485,,,,,264,267,-485,38,,,298,-481,,68,73,,81,,91,275,,278',
'17,258,261,263,266,,,273,57,277,-485,,,79,83,89,3,7,12,10,15,19,25,31',
'34,,,-485,50,59,,,,77,,86,90,5,8,13,21,26,,-478,,,46,53,56,60,63,69',
'74,,,93,,,,,,28,36,40,43,45,48,55,61,64,70,75,78,82,88,,6,11,,24,29',
'33,279,280,257,260,262,265,268,,,274,276,-421,,,,,264,267,-421,38,,',
'51,-478,,68,73,,81,,91,275,,278,17,258,261,263,266,269,271,273,57,277',
'-478,,,79,83,89,3,7,12,10,15,19,25,31,34,,,-421,50,59,,,,77,,86,90,5',
'8,13,21,26,,-485,,,46,53,56,60,63,69,74,,,93,,,,,,28,36,40,43,45,48',
'55,61,64,70,75,78,82,88,,6,11,,24,29,33,279,,,,,,,,,,,-485,,,,,264,267',
'-485,38,,,51,-481,,68,73,,81,,91,275,,278,17,258,261,263,266,,,273,57',
'277,-485,,,79,83,89,3,7,12,10,15,19,25,31,34,,,-485,50,59,,,,77,,86',
'90,5,8,13,21,26,,,,,46,53,56,60,63,69,74,,,93,,,,,,28,36,40,43,45,48',
'55,61,64,70,75,78,82,88,,6,11,,24,29,33,279,,,,,,,,,,,,,,,,264,267,',
'38,,,51,,,68,73,,81,,91,275,,278,17,258,261,263,266,,,273,57,277,,,',
'79,83,89,3,7,12,10,15,19,25,31,34,,,,50,59,,,,77,,86,90,5,8,13,21,26',
',,,,46,53,56,60,63,69,74,,,93,,,,,,28,36,40,43,45,48,55,61,64,70,75',
'78,82,88,,6,11,,24,29,33,279,280,257,260,262,265,268,270,,274,276,,',
',,,264,267,,38,,,51,,,68,73,,81,,91,275,,278,17,258,261,263,266,269',
'271,273,57,277,,,,79,83,89,3,7,12,10,15,19,25,31,34,,,,50,59,,,,77,',
'86,90,5,8,13,21,26,,,,,46,53,56,60,63,69,74,,,93,,,,,,28,36,40,43,45',
'48,55,61,64,70,75,78,82,88,,6,11,,24,29,33,279,280,257,260,262,265,268',
'270,272,274,276,,-503,-503,,,264,267,,38,,,51,,,68,73,,81,,91,275,,278',
'17,258,261,263,266,269,271,273,57,277,,,,79,83,89,3,7,12,10,15,19,25',
'31,34,,,,50,59,,,,77,,86,90,5,8,13,21,26,,,,,46,53,56,60,63,69,74,,',
'93,,,,,,28,36,40,43,45,48,55,61,64,70,75,78,82,88,,6,11,,24,29,33,279',
'-503,-503,-503,-503,265,268,,,-503,-503,,,,,,264,267,,38,,,51,,,68,73',
',81,,91,275,,278,17,258,261,263,266,269,271,273,57,277,,,,79,83,89,3',
'7,12,10,15,19,25,31,34,,,,50,59,,,,77,,86,90,5,8,13,21,26,,,,,46,53',
'56,60,63,69,74,,,93,,,,,,28,36,40,43,45,48,55,61,64,70,75,78,82,88,',
'6,11,,24,29,33,279,-503,-503,-503,-503,265,268,,,-503,-503,,,,,,264',
'267,,38,,,51,,,68,73,,81,,91,275,,278,17,258,261,263,266,269,271,273',
'57,277,,,,79,83,89,3,7,12,10,15,19,25,31,34,,,,50,59,,,,77,,86,90,5',
'8,13,21,26,,,,,46,53,56,60,63,69,74,,,93,,,,,,28,36,40,43,45,48,55,61',
'64,70,75,78,82,88,,6,11,,24,29,33,279,-503,-503,-503,-503,265,268,,',
'-503,-503,,,,,,264,267,,38,,,51,,,68,73,,81,,91,275,,278,17,258,261',
'263,266,269,271,273,57,277,,,,79,83,89,3,7,12,10,15,19,25,31,34,,,,50',
'59,,,,77,,86,90,5,8,13,21,26,,,,,46,53,56,60,63,69,74,,,93,,,,,,28,36',
'40,43,45,48,55,61,64,70,75,78,82,88,,6,11,,24,29,33,279,-503,-503,-503',
'-503,265,268,,,-503,-503,,,,,,264,267,,38,,,51,,,68,73,,81,,91,275,',
'278,17,258,261,263,266,269,271,273,57,277,,,,79,83,89,3,7,12,10,15,19',
'25,31,34,,,,50,59,,,,77,,86,90,5,8,13,21,26,,,,,46,53,56,60,63,69,74',
',,93,,,,,,28,36,40,43,45,48,55,61,64,70,75,78,82,88,,6,11,,24,29,33',
'279,280,257,260,262,265,268,270,272,274,276,,-503,-503,,,264,267,,38',
',,51,,,68,73,,81,,91,275,,278,17,258,261,263,266,269,271,273,57,277',
',,,79,83,89,3,7,12,10,15,19,25,31,34,,,,50,59,,,,77,,86,90,5,8,13,21',
'26,,,,,46,53,56,60,63,69,74,,,93,,,,,,28,36,40,43,45,48,55,61,64,70',
'75,78,82,88,,6,11,,24,29,33,279,-503,-503,-503,-503,265,268,,,-503,-503',
',,,,,264,267,,38,,,51,,,68,73,,81,,91,275,,278,17,258,261,263,266,269',
'271,273,57,277,,,,79,83,89,3,7,12,10,15,19,25,31,34,,,,50,59,,,,77,',
'86,90,5,8,13,21,26,,,,,46,53,56,60,63,69,74,,,93,,,,,,28,36,40,43,45',
'48,55,61,64,70,75,78,82,88,,6,11,,24,29,33,279,,,,,,,,,,,,,,,,264,267',
',38,,,298,,,68,73,,81,,91,275,,,17,258,261,263,266,,,,57,,,,,79,83,89',
'3,7,12,10,15,19,25,31,34,,,,50,59,,,,77,,86,90,5,8,13,21,26,,,,,46,53',
'56,60,63,69,74,,,93,,,,,,28,36,40,43,45,48,55,61,64,70,75,78,82,88,',
'6,11,,24,29,33,279,,,,,,,,,,,,,,,,264,267,,38,,,298,,,68,73,,81,,91',
'275,,278,17,258,261,263,266,,,,57,,,,,79,83,89,3,7,12,10,15,19,25,31',
'34,,,,50,59,,,,77,,86,90,5,8,13,21,26,,,,,46,53,56,60,63,69,74,,,93',
',,,,,28,36,40,43,45,48,55,61,64,70,75,78,82,88,,6,11,,24,29,33,279,',
',,,,,,,,,,,,,,264,267,,38,,,51,,,68,73,,81,,91,275,,278,17,258,261,263',
'266,,,,57,,,,,79,83,89,3,7,12,10,15,19,25,31,34,,,,50,59,,,,77,,86,90',
'5,8,13,21,26,,,,,46,53,56,60,63,69,74,,,93,,,,,,28,36,40,43,45,48,55',
'61,64,70,75,78,82,88,,6,11,,24,29,33,,,,,,,,,,,,,,,,,,,,38,,,51,,,68',
'73,,81,,91,,,,17,,,,,,,,57,,,,,79,83,89,3,7,12,10,15,19,25,31,34,,,',
'50,59,,,,77,,86,90,5,8,13,21,26,,,,,46,53,56,60,63,69,74,,,93,,,,,,28',
'36,40,43,45,48,55,61,64,70,75,78,82,88,,6,11,,24,29,33,,,,,,,,,,,,,',
',,,,,,38,,,51,,,68,73,,81,,91,,,,17,,,,,,,,57,,,,,79,83,89,3,7,12,10',
'15,19,25,31,34,,,,50,59,,,,77,,86,90,5,8,13,21,26,,,,,46,53,56,60,63',
'69,74,,,93,,,,,,28,36,40,43,45,48,55,61,64,70,75,78,82,88,,6,11,,24',
'29,33,,,,,,,,,,,,,,,,,,,,38,,,51,,,68,73,,81,,91,,,,17,,,,,,,,57,,,',
',79,83,89,3,7,12,10,15,19,25,31,34,,,,50,59,,,,77,,86,90,5,8,13,21,26',
',,,,46,53,56,60,63,69,74,,,93,,,,,,28,36,40,43,45,48,55,61,64,70,75',
'78,82,88,,6,11,,24,29,33,,,,,,,,,,,,,,,,,,,,38,,,51,,,68,73,,81,,91',
',,,17,,,,,,,,57,,,,,79,83,89,3,7,12,10,15,19,25,31,34,,,,50,59,,,,77',
',86,90,5,8,13,21,26,,,,,46,53,56,60,63,69,74,,,93,,,,,,28,36,40,43,45',
'48,55,61,64,70,75,78,82,88,,6,11,,24,29,33,,,,,,,,,,,,,,,,,,,,38,,,51',
',,68,73,,81,,91,,,,17,,,,,,,,57,,,,,79,83,89,3,7,12,10,15,19,25,31,34',
',,,50,59,,,,77,,86,90,5,8,13,21,26,,,,,46,53,56,60,63,69,74,,,93,,,',
',,28,36,40,43,45,48,55,61,64,70,75,78,82,88,,6,11,,24,29,33,,,,,,,,',
',,,,,,,,,,,38,,,51,,,68,73,,81,,91,,,,17,,,,,,,,57,,,,,79,83,89,3,7',
'12,10,15,19,25,31,34,,,,50,59,,,,77,,86,90,5,8,13,21,26,,,,,46,53,56',
'60,63,69,74,,,93,,,,,,28,36,40,43,45,48,55,61,64,70,75,78,82,88,,6,11',
',24,29,33,,,,,,,,,,,,,,,,,,,,38,,,51,,,68,73,,81,,91,,,,17,,,,,,,,57',
',,,,79,83,89,3,7,12,10,15,19,25,31,34,,,,50,59,,,,77,,86,90,5,8,13,21',
'26,,,,,46,53,56,60,63,69,74,,,93,,,,,,28,36,40,43,45,48,55,61,64,70',
'75,78,82,88,,6,11,,24,29,33,,,,,,,,,,,,,,,,,,,,38,,,51,,,68,73,,81,',
'91,,,,17,,,,,,,,57,,,,,79,83,89,3,7,12,10,15,19,25,31,34,,,,50,59,,',
',77,,86,90,5,8,13,21,26,,,,,46,53,56,60,63,69,74,,,93,,,,,,28,36,40',
'43,45,48,55,61,64,70,75,78,82,88,,6,11,,24,29,33,,,,,,,,,,,,,,,,,,,',
'38,,,51,,,68,73,,81,,91,,,,17,,,,,,,,57,,,,,79,83,89,3,7,12,10,15,19',
'25,31,34,,,,50,59,,,,77,,86,90,5,8,13,21,26,,,,,46,53,56,60,63,69,74',
',,93,,,,,,28,36,40,43,45,48,55,61,64,70,75,78,82,88,,6,11,,24,29,33',
',,,,,,,,,,,,,,,,,,,38,,,51,,,68,73,,81,,91,,,,17,,,,,,,,57,,,,,79,83',
'89,3,7,12,10,15,19,25,31,34,,,,50,59,,,,77,,86,90,5,8,13,21,26,,,,,46',
'53,56,60,63,69,74,,,93,,,,,,28,36,40,43,45,48,55,61,64,70,75,78,82,88',
',6,11,,24,29,33,,,,,,,,,,,,,,,,,,,,38,,,51,,,68,73,,81,,91,,,,17,,,',
',,,,57,,,,,79,83,89,3,7,12,10,15,19,25,31,34,,,,50,59,,,,77,,86,90,5',
'8,13,21,26,,,,,46,53,56,60,63,69,74,,,93,,,,,,28,36,40,43,45,48,55,61',
'64,70,75,78,82,88,,6,11,,24,29,33,,,,,,,,,,,,,,,,,,,,38,,,51,,,68,73',
',81,,91,,,,17,,,,,,,,57,,,,,79,83,89,3,7,12,10,15,19,25,31,34,,,,50',
'59,,,,77,,86,90,5,8,13,21,26,,,,,46,53,56,60,63,69,74,,,93,,,,,,28,36',
'40,43,45,48,55,61,64,70,75,78,82,88,,6,11,,24,29,33,,,,,,,,,,,,,,,,',
',,,38,,,51,,,68,73,,81,,91,,,,17,,,,,,,586,57,,594,597,599,79,83,89',
'3,7,12,15,19,25,,34,,,,50,59,,,,77,,86,90,5,99,100,21,26,,,,,106,107',
'108,60,63,69,74,587,590,592,595,,,,,,36,,,45,48,55,61,64,70,75,78,82',
'88,,6,11,,24,29,33,,,,,,,,,,,,,,,,,,,,122,,,126,,,68,73,,81,,,,,,17',
',,,,,,,127,,,,,79,83,89,3,7,12,15,19,25,,34,,,,50,59,,,,77,,86,90,5',
'99,100,21,26,,,,,106,107,108,60,63,69,74,,,,,,,,,,36,,,45,48,55,61,64',
'70,75,78,82,88,,6,11,,24,29,33,,,,,,,,,,,,,,,,,,,,122,,,126,,,68,73',
',81,,,,,,17,,,,,,,,127,,,,,79,83,89,3,7,12,15,19,25,,34,,,,50,59,,,',
'77,,86,90,5,99,100,21,26,,,,,106,107,108,60,63,69,74,,,,,,,,,,36,,,45',
'48,55,61,64,70,75,78,82,88,,6,11,,24,29,33,,,,,,,,,,,,,,,,,,,,122,,',
'126,,,68,73,,81,,,,,,17,,,,,,,,127,,,,,79,83,89,3,7,12,15,19,25,,34',
',,,50,59,,,,77,,86,90,5,99,100,21,26,,,,,106,107,108,60,63,69,74,,,',
',,,,,642,104,,,45,48,55,61,64,70,75,78,82,88,,6,11,,,,103,,279,280,257',
'260,262,265,268,270,272,274,276,,281,259,,,264,267,834,,,126,,,68,73',
',81,,,,275,,278,,258,261,263,266,269,271,273,,277,,,79,83,89,3,7,12',
'-479,-479,-479,,-479,256,,,-479,-479,-217,,,-479,,-479,-479,-479,-479',
'-479,-479,-479,,-479,,,-479,-479,-479,-479,-479,-479,-479,,,,,,,,,,-479',
',,-479,-479,-479,-479,-479,-479,-479,-479,-479,-479,,-479,-479,,-479',
'-479,-479,,,,,,,,,,,,,,,,,,,,-479,,,-479,-479,,-479,-479,,-479,,-479',
',-479,,-479,,,,,,,,-479,,-479,,,-479,-479,-479,-479,-479,-479,15,19',
'25,,34,,,,50,59,,,,77,,86,90,5,99,100,21,26,,,,,106,53,56,60,63,69,74',
',,,,,,,,,36,,,45,48,55,61,64,70,75,78,82,88,,6,11,,24,29,33,,,,,,,,',
',,,,,,,,,,,122,,,126,,,68,73,,81,,319,,,,17,,,,,,,,127,,,,,79,83,89',
'3,7,12,15,19,25,,34,,,,50,59,,,,77,,86,90,5,99,100,21,26,,,,,106,107',
'108,60,63,69,74,,,,,,,,,642,104,,,45,48,55,61,64,70,75,78,82,88,,6,11',
',,,103,,279,280,257,260,262,265,268,270,272,274,276,,281,259,,,264,267',
'137,,,126,,,68,73,,81,,,,275,,278,,258,261,263,266,269,271,273,,277',
',,79,83,89,3,7,12,15,19,25,,34,256,,,50,59,,,,77,,86,90,5,8,13,21,26',
',,,,46,53,56,60,63,69,74,,,93,,,,,,,36,,,45,48,55,61,64,70,75,78,82',
'88,,6,11,,24,29,33,,,,,,,,,,,,,,,,,,,,122,,,126,,,68,73,,81,,,,,,17',
',,,,,,,57,,,,,79,83,89,3,7,12,15,19,25,,34,,,,50,59,,,,77,,86,90,5,99',
'100,21,26,,,,,106,107,108,60,63,69,74,,,,,,,,,,36,,,45,48,55,61,64,70',
'75,78,82,88,,6,11,,24,29,33,,,,,,,,,,,,,,,,,,,,122,,,126,,,68,73,,81',
',,,,,17,,,,,,,,127,,,,,79,83,89,3,7,12,15,19,25,,34,,,,50,59,,,,77,',
'86,90,5,99,100,21,26,,,,,106,107,108,60,63,69,74,,,,,,,,,,36,,,45,48',
'55,61,64,70,75,78,82,88,,6,11,,24,29,33,,,,,,,,,,,,,,,,,,,,122,,,126',
',,68,73,,81,,,,,,17,,,,,,,,127,,,,,79,83,89,3,7,12,15,19,25,,34,,,,50',
'59,,,,77,,86,90,5,8,13,21,26,,,,,46,53,56,60,63,69,74,,,,,,,,,,36,,',
'45,48,55,61,64,70,75,78,82,88,,6,11,,24,29,33,,,,,,,,,,,,,,,,,,,,122',
',,126,,,68,73,,81,,,,,,17,,,,,,,,127,,,,,79,83,89,3,7,12,15,19,25,,34',
',,,50,59,,,,77,,86,90,5,8,13,21,26,,,,,46,53,56,60,63,69,74,,,93,,,',
',,,36,,,45,48,55,61,64,70,75,78,82,88,,6,11,,24,29,33,,,,,,,,,,,,,,',
',,,,,122,,,126,,,68,73,,81,,,,,,17,,,,,,,,57,,,,,79,83,89,3,7,12,15',
'19,25,,34,,,,50,59,,,,77,,86,90,5,8,13,21,26,,,,,46,53,56,60,63,69,74',
',,93,,,,,,,36,,,45,48,55,61,64,70,75,78,82,88,,6,11,,24,29,33,,,,,,',
',,,,,,,,,,,,,122,,,126,,,68,73,,81,,,,,,17,,,,,,,,57,,,,,79,83,89,3',
'7,12,15,19,25,,34,,,,50,59,,,,77,,86,90,5,99,100,21,26,,,,,106,107,108',
'60,63,69,74,,,,,,,,,,36,,,45,48,55,61,64,70,75,78,82,88,,6,11,,24,29',
'33,,,,,,,,,,,,,,,,,,,,122,,,126,,,68,73,,81,,,,,,17,,,,,,,,127,,,,,79',
'83,89,3,7,12,15,19,25,,34,,,,50,59,,,,77,,86,90,5,99,100,21,26,,,,,106',
'107,108,60,63,69,74,,,,,,,,,,36,,,45,48,55,61,64,70,75,78,82,88,,6,11',
',24,29,33,,,,,,,,,,,,,,,,,,,,122,,,126,,,68,73,,81,,,,,,17,,,,,,,,127',
',,,,79,83,89,3,7,12,15,19,25,,34,,,,50,59,,,,77,,86,90,5,8,13,21,26',
',,,,46,53,56,60,63,69,74,,,,,,,,,,36,,,45,48,55,61,64,70,75,78,82,88',
',6,11,,24,29,33,,,,,,,,,,,,,,,,,,,,122,,,126,,,68,73,,81,,,,,,17,,,',
',,,,127,,,,,79,83,89,3,7,12,15,19,25,,34,,,,50,59,,,,77,,86,90,5,99',
'100,21,26,,,,,106,107,108,60,63,69,74,,,,,,,,,,36,,,45,48,55,61,64,70',
'75,78,82,88,,6,11,,24,29,33,,,,,,,,,,,,,,,,,,,,122,,,126,,,68,73,,81',
',847,,,,17,,,,,,,,127,,,,,79,83,89,3,7,12,-480,-480,-480,,-480,,,,-480',
'-480,,,,-480,,-480,-480,-480,-480,-480,-480,-480,,-480,,,-480,-480,-480',
'-480,-480,-480,-480,,,,,,,,,,-480,,,-480,-480,-480,-480,-480,-480,-480',
'-480,-480,-480,,-480,-480,,-480,-480,-480,,,,,,,,,,,,,,,,,,,,-480,,',
'-480,-480,,-480,-480,,-480,,-480,,-480,,-480,,,,,,,,-480,,-480,,,-480',
'-480,-480,-480,-480,-480,15,19,25,,34,,,,50,59,,,,77,,86,90,5,99,100',
'21,26,,,,,106,107,108,60,63,69,74,,,,,,,,,,36,,,45,48,55,61,64,70,75',
'78,82,88,,6,11,,24,29,33,,,,,,,,,,,,,,,,,,,,122,,,126,,,68,73,,81,,',
',,,17,,,,,,,,127,,,,,79,83,89,3,7,12,15,19,25,,34,,,,50,59,,,,77,,86',
'90,5,8,13,21,26,,,,,46,53,56,60,63,69,74,,,93,,,,,,,36,,,45,48,55,61',
'64,70,75,78,82,88,,6,11,,24,29,33,,,,,,,,,,,,,,,,,,,,122,,,126,,,68',
'73,,81,,,,,,17,,,,,,,,57,,,,,79,83,89,3,7,12,15,19,25,,34,,,,50,59,',
',,77,,86,90,5,99,100,21,26,,,,,106,107,108,60,63,69,74,,,,,,,,,,36,',
',45,48,55,61,64,70,75,78,82,88,,6,11,,24,29,33,,,,,,,,,,,,,,,,,,,,122',
',,126,,,68,73,,81,,,,,,17,,,,,,,,127,,,,,79,83,89,3,7,12,15,19,25,,34',
',,,50,59,,,,77,,86,90,5,99,100,21,26,,,,,106,107,108,60,63,69,74,,,',
',,,,,,36,,,45,48,55,61,64,70,75,78,82,88,,6,11,,24,29,33,,,,,,,,,,,',
',,,,,,,,122,,,126,,,68,73,,81,,804,,117,,17,,,,,,,,127,,,,,79,83,89',
'3,7,12,15,19,25,,34,,,,50,59,,,,77,,86,90,5,99,100,21,26,,,,,106,107',
'108,60,63,69,74,,,,,,,,,,36,,,45,48,55,61,64,70,75,78,82,88,,6,11,,24',
'29,33,,,,,,,,,,,,,,,,,,,,122,,,126,,,68,73,,81,,803,,117,,17,,,,,,,',
'127,,,,,79,83,89,3,7,12,15,19,25,,34,,,,50,59,,,,77,,86,90,5,8,13,21',
'26,,,,,46,53,56,60,63,69,74,,,93,,,,,,,36,,,45,48,55,61,64,70,75,78',
'82,88,,6,11,,24,29,33,,,,,,,,,,,,,,,,,,,,122,,,126,,,68,73,,81,,,,,',
'17,,,,,,,,57,,,,,79,83,89,3,7,12,15,19,25,,34,,,,50,59,,,,77,,86,90',
'5,99,100,21,26,,,,,106,107,108,60,63,69,74,,,,,,,,,,36,,,45,48,55,61',
'64,70,75,78,82,88,,6,11,,24,29,33,,,,,,,,,,,,,,,,,,,,122,,,126,,,68',
'73,,81,,,,,,17,,,,,,,,127,,,,,79,83,89,3,7,12,15,19,25,,34,,,,50,59',
',,,77,,86,90,5,8,13,21,26,,,,,46,53,56,60,63,69,74,,,,,,,,,,36,,,45',
'48,55,61,64,70,75,78,82,88,,6,11,,24,29,33,,,,,,,,,,,,,,,,,,,,122,,',
'126,,,68,73,,81,,,,,,17,,,,,,,,127,,,,,79,83,89,3,7,12,-251,-251,-251',
',-251,,,,-251,-251,,,,-251,,-251,-251,-251,-251,-251,-251,-251,,,,,-251',
'-251,-251,-251,-251,-251,-251,,,,,,,,,,-251,,,-251,-251,-251,-251,-251',
'-251,-251,-251,-251,-251,,-251,-251,,-251,-251,-251,,,,,,,,,,,,,,,,',
',,,-251,,,-251,307,,-251,-251,,-251,,-251,,-251,,-251,,,,,,,,-251,,',
',,-251,-251,-251,-251,-251,-251,15,19,25,,34,,,,50,59,,,,77,,86,90,5',
'99,100,21,26,,,,,106,107,108,60,63,69,74,,,,,,,,,,36,,,45,48,55,61,64',
'70,75,78,82,88,,6,11,,24,29,33,,,,,,,,,,,,,,,,,,,,122,,,126,,,68,73',
',81,,,,,,17,,,,,,,,127,,,,,79,83,89,3,7,12,-478,-478,-478,,-478,,,,-478',
'-478,,,,-478,,-478,-478,-478,-478,-478,-478,-478,,-478,,,-478,-478,-478',
'-478,-478,-478,-478,,,,,,,,,,-478,,,-478,-478,-478,-478,-478,-478,-478',
'-478,-478,-478,,-478,-478,,-478,-478,-478,,,,,,,,,,,,,,,,,,,,-478,,',
'-478,-478,,-478,-478,,-478,,-478,,-478,,-478,,,,,,,,-478,,-478,,,-478',
'-478,-478,-478,-478,-478,-251,-251,-251,,-251,,,,-251,-251,,,,-251,',
'-251,-251,-251,-251,-251,-251,-251,,,,,-251,-251,-251,-251,-251,-251',
'-251,,,,,,,,,,-251,,,-251,-251,-251,-251,-251,-251,-251,-251,-251,-251',
',-251,-251,,-251,-251,-251,,,,,,,,,,,,,,,,,,,,-251,,,-251,304,,-251',
'-251,,-251,,-251,,-251,,-251,,,,,,,,-251,,,,,-251,-251,-251,-251,-251',
'-251,15,19,25,,34,,,,50,59,,,,77,,86,90,5,99,100,21,26,,,,,106,107,108',
'60,63,69,74,,,,,,,,,,36,,,45,48,55,61,64,70,75,78,82,88,,6,11,,24,29',
'33,,,,,,,,,,,,,,,,,,,,122,,,126,,,68,73,,81,,,,,,17,,,,,,,,127,,,,,79',
'83,89,3,7,12,15,19,25,,34,,,,50,59,,,,77,,86,90,5,8,13,21,26,,,,,46',
'53,56,60,63,69,74,,,93,,,,,,,36,,,45,48,55,61,64,70,75,78,82,88,,6,11',
',24,29,33,,,,,,,,,,,,,,,,,,,,122,,,126,,,68,73,,81,,,,,,17,,,,,,,,57',
',,,,79,83,89,3,7,12,15,19,25,,34,,,,50,59,,,,77,,86,90,5,99,100,21,26',
',,,,106,107,108,60,63,69,74,,,,,,,,,,36,,,45,48,55,61,64,70,75,78,82',
'88,,6,11,,24,29,33,,,,,,,,,,,,,,,,,,,,122,,,126,,,68,73,,81,,,,,,17',
',,,,,,,127,,,,,79,83,89,3,7,12,15,19,25,,34,,,,50,59,,,,77,,86,90,5',
'99,100,21,26,,,,,106,107,108,60,63,69,74,,,,,,,,,,36,,,45,48,55,61,64',
'70,75,78,82,88,,6,11,,24,29,33,,,,,,,,,,,,,,,,,,,,122,,,126,,,68,73',
',81,,,,,,17,,,,,,,,127,,,,,79,83,89,3,7,12,15,19,25,,34,,,,50,59,,,',
'77,,86,90,5,99,100,21,26,,,,,106,107,108,60,63,69,74,,,,,,,,,,36,,,45',
'48,55,61,64,70,75,78,82,88,,6,11,,24,29,33,,,,,,,,,,,,,,,,,,,,122,,',
'126,,,68,73,,81,,,,,,17,,,,,,,,127,,,,,79,83,89,3,7,12,15,19,25,,34',
',,,50,59,,,,77,,86,90,5,99,100,21,26,,,,,106,107,108,60,63,69,74,,,',
',,,,,,36,,,45,48,55,61,64,70,75,78,82,88,,6,11,,24,29,33,,,,,,,,,,,',
',,,,,,,,122,,,126,,,68,73,,81,,767,,117,,17,,,,,,,,127,,,,,79,83,89',
'3,7,12,15,19,25,,34,,,,50,59,,,,77,,86,90,5,99,100,21,26,,,,,106,107',
'108,60,63,69,74,,,,,,,,,,36,,,45,48,55,61,64,70,75,78,82,88,,6,11,,24',
'29,33,,,,,,,,,,,,,,,,,,,,122,,,126,,,68,73,,81,,,,,,17,,,,,,,,127,,',
',,79,83,89,3,7,12,15,19,25,,34,,,,50,59,,,,77,,86,90,5,8,13,21,26,,',
',,46,53,56,60,63,69,74,,,93,,,,,,,36,,,45,48,55,61,64,70,75,78,82,88',
',6,11,,24,29,33,,,,,,,,,,,,,,,,,,,,122,,,126,,,68,73,,81,,,,,,17,,,',
',,,,57,,,,,79,83,89,3,7,12,15,19,25,,34,,,,50,59,,,,77,,86,90,5,99,100',
'21,26,,,,,106,53,56,60,63,69,74,,,,,,,,,,36,,,45,48,55,61,64,70,75,78',
'82,88,,6,11,,24,29,33,,,,,,,,,,,,,,,,,,,,122,,,126,,,68,73,,81,,319',
',,,17,,,,,,,,127,,,,,79,83,89,3,7,12,15,19,25,,34,,,,50,59,,,,77,,86',
'90,5,8,13,21,26,,,,,46,53,56,60,63,69,74,,,,,,,,,,36,,,45,48,55,61,64',
'70,75,78,82,88,,6,11,,24,29,33,,,,,,,,,,,,,,,,,,,,122,,,126,,,68,73',
',81,,,,,,17,,,,,,,,127,,,,,79,83,89,3,7,12,15,19,25,,34,,,,50,59,,,',
'77,,86,90,5,99,100,21,26,,,,,106,53,56,60,63,69,74,,,,,,,,,,36,,,45',
'48,55,61,64,70,75,78,82,88,,6,11,,24,29,33,,,,,,,,,,,,,,,,,,,,122,,',
'126,,,68,73,,81,,133,,117,,17,,,,,,,,127,,,,,79,83,89,3,7,12,15,19,25',
',34,,,,50,59,,,,77,,86,90,5,8,13,21,26,,,,,46,53,56,60,63,69,74,,,93',
',,,,,,36,,,45,48,55,61,64,70,75,78,82,88,,6,11,,24,29,33,,,,,,,,,,,',
',,,,,,,,122,,,126,,,68,73,,81,,,,,,17,,,,,,,,57,,,,,79,83,89,3,7,12',
'15,19,25,,34,,,,50,59,,,,77,,86,90,5,99,100,21,26,,,,,106,107,108,60',
'63,69,74,,,,,,,,,,36,,,45,48,55,61,64,70,75,78,82,88,,6,11,,24,29,33',
',,,,,,,,,,,,,,,,,,,122,,,126,,,68,73,,81,,,,,,17,,,,,,,,127,,,,,79,83',
'89,3,7,12,15,19,25,,34,,,,50,59,,,,77,,86,90,5,99,100,21,26,,,,,106',
'107,108,60,63,69,74,,,,,,,,,,104,,,45,48,55,61,64,70,75,78,82,88,,6',
'11,,,,103,,279,280,257,260,262,265,268,270,272,274,276,,281,259,,,264',
'267,137,,,126,,,68,73,,81,,,,275,,278,,258,261,263,266,269,271,273,',
'277,,,79,83,89,3,7,12,15,19,25,,34,256,,,50,59,,,282,77,,86,90,5,8,13',
'21,26,,,,,46,53,56,60,63,69,74,,,,,,,,,,36,,,45,48,55,61,64,70,75,78',
'82,88,,6,11,,24,29,33,,,,,,,,,,,,,,,,,,,,122,,,126,,,68,73,,81,,,,,',
'17,,,,,,,,127,,,,,79,83,89,3,7,12,15,19,25,,34,,,,50,59,,,,77,,86,90',
'5,99,100,21,26,,,,,106,107,108,60,63,69,74,,,,,,,,,,36,,,45,48,55,61',
'64,70,75,78,82,88,,6,11,,24,29,33,,,,,,,,,,,,,,,,,,,,122,,,126,,,68',
'73,,81,,748,,,,17,,,,,,,,127,,,,,79,83,89,3,7,12,15,19,25,,34,,,,50',
'59,,,,77,,86,90,5,99,100,21,26,,,,,106,107,108,60,63,69,74,,,,,,,,,',
'36,,,45,48,55,61,64,70,75,78,82,88,,6,11,,24,29,33,,,,,,,,,,,,,,,,,',
',,122,,,126,,,68,73,,81,,,,,,17,,,,,,,,127,,,,,79,83,89,3,7,12,15,19',
'25,,34,,,,50,59,,,,77,,86,90,5,99,100,21,26,,,,,106,107,108,60,63,69',
'74,,,,,,,,,,104,,,45,48,398,61,64,70,402,78,82,88,,6,11,,,,103,,279',
'280,257,260,262,265,268,270,272,274,276,,281,259,,,264,267,399,,,126',
',,68,73,,81,,,,275,,278,,258,261,263,266,269,271,273,,277,,,79,83,89',
'3,7,12,15,19,25,,34,256,,,50,59,,,282,77,,86,90,5,99,100,21,26,,,,,106',
'107,108,60,63,69,74,,,,,,,,,,36,,,45,48,55,61,64,70,75,78,82,88,,6,11',
',24,29,33,,,,,,,,,,,,,,,,,,,,122,,,126,,,68,73,,81,,742,,,,17,,,,,,',
',127,,,,,79,83,89,3,7,12,15,19,25,,34,,,,50,59,,,,77,,86,90,5,99,100',
'21,26,,,,,106,107,108,60,63,69,74,,,,,,,,,,104,,,45,48,398,61,64,70',
'402,78,82,88,,6,11,,,,103,,279,280,257,260,262,265,268,270,272,274,276',
',281,259,,,264,267,399,,,126,,,68,73,,81,,,,275,,278,,258,261,263,266',
'269,271,273,,277,,,79,83,89,3,7,12,15,19,25,,34,256,,,50,59,561,,,77',
',86,90,5,8,13,21,26,,,,,46,53,56,60,63,69,74,,,93,,,,,,,36,,,45,48,55',
'61,64,70,75,78,82,88,,6,11,,24,29,33,,,,,,,,,,,,,,,,,,,,122,,,126,,',
'68,73,,81,,,,,,17,,,,,,,,57,,,,,79,83,89,3,7,12,15,19,25,,34,,,,50,59',
',,,77,,86,90,5,8,13,21,26,,,,,46,53,56,60,63,69,74,,,93,,,,,,,36,,,45',
'48,55,61,64,70,75,78,82,88,,6,11,,24,29,33,,,,,,,,,,,,,,,,,,,,122,,',
'126,,,68,73,,81,,,,,,17,,,,,,,,57,,,,,79,83,89,3,7,12,15,19,25,,34,',
',,50,59,,,,77,,86,90,5,99,100,21,26,,,,,106,107,108,60,63,69,74,,,,',
',,,,,36,,,45,48,55,61,64,70,75,78,82,88,,6,11,,24,29,33,,,,,,,,,,,,',
',,,,,,,122,,,126,,,68,73,,81,,,,,,17,,,,,,,,127,,,,,79,83,89,3,7,12',
'15,19,25,,34,,,,50,59,,,,77,,86,90,5,99,100,21,26,,,,,106,53,56,60,63',
'69,74,,,,,,,,,,36,,,45,48,55,61,64,70,75,78,82,88,,6,11,,24,29,33,,',
',,,,,,,,,,,,,,,,,122,,,126,,,68,73,,81,,551,,117,,17,,,,,,,,127,,,,',
'79,83,89,3,7,12,15,19,25,,34,,,,50,59,,,,77,,86,90,5,99,100,21,26,,',
',,106,107,108,60,63,69,74,,,,,,,,,,36,,,45,48,55,61,64,70,75,78,82,88',
',6,11,,24,29,33,,,,,,,,,,,,,,,,,,,,122,,,126,,,68,73,,81,,,,,,17,,,',
',,,,127,,,,,79,83,89,3,7,12,15,19,25,,34,,,,50,59,,,,77,,86,90,5,99',
'100,21,26,,,,,106,107,108,60,63,69,74,,,,,,,,,,104,,,45,48,55,61,64',
'70,75,78,82,88,,6,11,,586,,103,594,597,599,,,,,,,,,,,,,,,,,105,,,51',
',,68,73,,81,,91,,,,,600,,,,,,722,587,590,592,595,,79,83,89,3,7,12,15',
'19,25,,34,,,,50,59,,,,77,,86,90,5,99,100,21,26,,,,,106,107,108,60,63',
'69,74,,,,,,,,,,36,,,45,48,55,61,64,70,75,78,82,88,,6,11,,24,29,33,,',
',,,,,,,,,,,,,,,,,122,,,126,,,68,73,,81,,,,,,17,,,,,,,,127,,,,,79,83',
'89,3,7,12,15,19,25,,34,,,,50,59,,,,77,,86,90,5,99,100,21,26,,,,,106',
'107,108,60,63,69,74,,,,,,,,,,36,,,45,48,55,61,64,70,75,78,82,88,,6,11',
',24,29,33,,,,,,,,,,,,,,,,,,,,122,,,126,,,68,73,,81,,490,,,,17,,,,,,',
',127,,,,,79,83,89,3,7,12,15,19,25,,34,,,,50,59,,,,77,,86,90,5,99,100',
'21,26,,,,,106,107,108,60,63,69,74,,,,,,,,,,36,,,45,48,55,61,64,70,75',
'78,82,88,,6,11,,24,29,33,,,,,,,,,,,,,,,,,,,,122,,,126,,,68,73,,81,,554',
',117,,17,,,,,,,,127,,,,,79,83,89,3,7,12,15,19,25,,34,,,,50,59,,,,77',
',86,90,5,99,100,21,26,,,,,106,53,56,60,63,69,74,,,,,,,,,,36,,,45,48',
'55,61,64,70,75,78,82,88,,6,11,,24,29,33,,,,,,,,,,,,,,,,,,,,122,,,126',
',,68,73,,81,,133,,117,,17,,,,,,,,127,,,,,79,83,89,3,7,12,15,19,25,,34',
',,,50,59,,,,77,,86,90,5,99,100,21,26,,,,,106,107,108,60,63,69,74,,,',
',,,,,,36,,,45,48,55,61,64,70,75,78,82,88,,6,11,,24,29,33,,,,,,,,,,,',
',,,,,,,,122,,,126,,,68,73,,81,,,,,,17,,,,,,,,127,,,,,79,83,89,3,7,12',
'15,19,25,,34,,,,50,59,,,,77,,86,90,5,99,100,21,26,,,,,106,107,108,60',
'63,69,74,,,,,,,,,,36,,,45,48,55,61,64,70,75,78,82,88,,6,11,,24,29,33',
',,,,,,,,,,,,,,,,,,,122,,,126,,,68,73,,81,,866,,117,,17,,,,,,,,127,,',
',,79,83,89,3,7,12,15,19,25,,34,,,,50,59,,,,77,,86,90,5,99,100,21,26',
',,,,106,107,108,60,63,69,74,,,,,,,,,,36,,,45,48,55,61,64,70,75,78,82',
'88,,6,11,,24,29,33,,,,,,,,,,,,,,,,,,,,122,,,126,,,68,73,,81,,551,,117',
',17,,,,,,,,127,,,,,79,83,89,3,7,12,15,19,25,,34,,,,50,59,,,,77,,86,90',
'5,99,100,21,26,,,,,106,53,56,60,63,69,74,,,,,,,,,,36,,,45,48,55,61,64',
'70,75,78,82,88,,6,11,,24,29,33,,,,,,,,,,,,,,,,,,,,122,,,126,,,68,73',
',81,,319,,,,17,,,,,,,,127,,,,,79,83,89,3,7,12,15,19,25,,34,,,,50,59',
',,,77,,86,90,5,99,100,21,26,,,,,106,107,108,60,63,69,74,,,,,,,,,,36',
',,45,48,55,61,64,70,75,78,82,88,,6,11,,24,29,33,,,,,,,,,,,,,,,,,,,,122',
',,126,,,68,73,,81,,,,,,17,,,,,,,,127,,,,,79,83,89,3,7,12,15,19,25,,34',
',,,50,59,,,,77,,86,90,5,99,100,21,26,,,,,106,107,108,60,63,69,74,,,',
',,,,,,36,,,45,48,55,61,64,70,75,78,82,88,,6,11,,24,29,33,,,,,,,,,,,',
',,,,,,,,122,,,126,,,68,73,,81,,,,,,17,,,,,,,,127,,,,,79,83,89,3,7,12',
'15,19,25,,34,,,,50,59,,,,77,,86,90,5,99,100,21,26,,,,,106,107,108,60',
'63,69,74,,,,,,,,,,36,,,45,48,55,61,64,70,75,78,82,88,,6,11,,24,29,33',
',,,,,,,,,,,,,,,,,,,122,,,126,,,68,73,,81,,,,,,17,,,,,,,,127,,,,,79,83',
'89,3,7,12,15,19,25,,34,,,,50,59,,,,77,,86,90,5,99,100,21,26,,,,,106',
'107,108,60,63,69,74,,,,,,,,,,36,,,45,48,55,61,64,70,75,78,82,88,,6,11',
',24,29,33,,,,,,,,,,,,,,,,,,,,122,,,126,,,68,73,,81,,867,,117,,17,,,',
',,,,127,,,,,79,83,89,3,7,12,15,19,25,,34,,,,50,59,,,,77,,86,90,5,99',
'100,21,26,,,,,106,107,108,60,63,69,74,,,,,,,,,,36,,,45,48,55,61,64,70',
'75,78,82,88,,6,11,,24,29,33,,,,,,,,,,,,,,,,,,,,122,,,126,,,68,73,,81',
',,,,,17,,,,,,,,127,,,,,79,83,89,3,7,12,15,19,25,,34,,,,50,59,,,,77,',
'86,90,5,99,100,21,26,,,,,106,107,108,60,63,69,74,,,,,,,,,,36,,,45,48',
'55,61,64,70,75,78,82,88,,6,11,,24,29,33,,,,,,,,,,,,,,,,,,,,122,,,126',
',,68,73,,81,,,,,,17,,,,,,,,127,,,,,79,83,89,3,7,12,15,19,25,,34,,,,50',
'59,,,,77,,86,90,5,99,100,21,26,,,,,106,107,108,60,63,69,74,,,,,,,,,',
'36,,,45,48,55,61,64,70,75,78,82,88,,6,11,,24,29,33,,,,,,,,,,,,,,,,,',
',,122,,,126,,,68,73,,81,,,,,,17,,,,,,,,127,,,,,79,83,89,3,7,12,15,19',
'25,,34,,,,50,59,,,,77,,86,90,5,99,100,21,26,,,,,106,107,108,60,63,69',
'74,,,,,,,,,,36,,,45,48,55,61,64,70,75,78,82,88,,6,11,,24,29,33,,,,,',
',,,,,,,,,,,,,,122,,,126,,,68,73,,81,,,,,,17,,,,,,,,127,,,,,79,83,89',
'3,7,12,15,19,25,,34,,,,50,59,,,,77,,86,90,5,99,100,21,26,,,,,106,107',
'108,60,63,69,74,,,,,,,,,,36,,,45,48,55,61,64,70,75,78,82,88,,6,11,,24',
'29,33,,,,,,,,,,,,,,,,,,,,122,,,126,,,68,73,,81,,,,,,17,,,,,,,,127,,',
',,79,83,89,3,7,12,15,19,25,,34,,,,50,59,,,,77,,86,90,5,99,100,21,26',
',,,,106,107,108,60,63,69,74,,,,,,,,,,36,,,45,48,55,61,64,70,75,78,82',
'88,,6,11,,24,29,33,,,,,,,,,,,,,,,,,,,,122,,,126,,,68,73,,81,,,,,,17',
',,,,,,,127,,,,,79,83,89,3,7,12,15,19,25,,34,,,,50,59,,,,77,,86,90,5',
'99,100,21,26,,,,,106,107,108,60,63,69,74,,,,,,,,,,36,,,45,48,55,61,64',
'70,75,78,82,88,,6,11,,24,29,33,,,,,,,,,,,,,,,,,,,,122,,,126,,,68,73',
',81,,,,,,17,,,,,,,,127,,,,,79,83,89,3,7,12,15,19,25,,34,,,,50,59,,,',
'77,,86,90,5,99,100,21,26,,,,,106,107,108,60,63,69,74,,,,,,,,,,36,,,45',
'48,55,61,64,70,75,78,82,88,,6,11,,24,29,33,,,,,,,,,,,,,,,,,,,,122,,',
'126,,,68,73,,81,,,,,,17,,,,,,,,127,,,,,79,83,89,3,7,12,15,19,25,,34',
',,,50,59,,,,77,,86,90,5,99,100,21,26,,,,,106,107,108,60,63,69,74,,,',
',,,,,,36,,,45,48,55,61,64,70,75,78,82,88,,6,11,,24,29,33,,,,,,,,,,,',
',,,,,,,,122,,,126,,,68,73,,81,,,,,,17,,,,,,,,127,,,,,79,83,89,3,7,12',
'15,19,25,,34,,,,50,59,,,,77,,86,90,5,99,100,21,26,,,,,106,107,108,60',
'63,69,74,,,,,,,,,,36,,,45,48,55,61,64,70,75,78,82,88,,6,11,,24,29,33',
',,,,,,,,,,,,,,,,,,,122,,,126,,,68,73,,81,,,,,,17,,,,,,,,127,,,,,79,83',
'89,3,7,12,15,19,25,,34,,,,50,59,,,,77,,86,90,5,99,100,21,26,,,,,106',
'107,108,60,63,69,74,,,,,,,,,,36,,,45,48,55,61,64,70,75,78,82,88,,6,11',
',24,29,33,,,,,,,,,,,,,,,,,,,,122,,,126,,,68,73,,81,,,,,,17,,,,,,,,127',
',,,,79,83,89,3,7,12,15,19,25,,34,,,,50,59,,,,77,,86,90,5,99,100,21,26',
',,,,106,107,108,60,63,69,74,,,,,,,,,,36,,,45,48,55,61,64,70,75,78,82',
'88,,6,11,,24,29,33,,,,,,,,,,,,,,,,,,,,122,,,126,,,68,73,,81,,,,,,17',
',,,,,,,127,,,,,79,83,89,3,7,12,15,19,25,,34,,,,50,59,,,,77,,86,90,5',
'99,100,21,26,,,,,106,107,108,60,63,69,74,,,,,,,,,,36,,,45,48,55,61,64',
'70,75,78,82,88,,6,11,,24,29,33,,,,,,,,,,,,,,,,,,,,122,,,126,,,68,73',
',81,,,,,,17,,,,,,,,127,,,,,79,83,89,3,7,12,15,19,25,,34,,,,50,59,,,',
'77,,86,90,5,99,100,21,26,,,,,106,107,108,60,63,69,74,,,,,,,,,,36,,,45',
'48,55,61,64,70,75,78,82,88,,6,11,,24,29,33,,,,,,,,,,,,,,,,,,,,122,,',
'126,,,68,73,,81,,,,,,17,,,,,,,,127,,,,,79,83,89,3,7,12,15,19,25,,34',
',,,50,59,,,,77,,86,90,5,99,100,21,26,,,,,106,107,108,60,63,69,74,,,',
',,,,,,36,,,45,48,55,61,64,70,75,78,82,88,,6,11,,24,29,33,,,,,,,,,,,',
',,,,,,,,122,,,126,,,68,73,,81,,,,,,17,,,,,,,,127,,,,,79,83,89,3,7,12',
'15,19,25,,34,,,,50,59,,,,77,,86,90,5,99,100,21,26,,,,,106,107,108,60',
'63,69,74,,,,,,,,,,36,,,45,48,55,61,64,70,75,78,82,88,,6,11,,24,29,33',
',,,,,,,,,,,,,,,,,,,122,,,126,,,68,73,,81,,,,,,17,,,,,,,,127,,,,,79,83',
'89,3,7,12,15,19,25,,34,,,,50,59,,,,77,,86,90,5,99,100,21,26,,,,,106',
'107,108,60,63,69,74,,,,,,,,,,36,,,45,48,55,61,64,70,75,78,82,88,,6,11',
',24,29,33,,,,,,,,,,,,,,,,,,,,122,,,126,,,68,73,,81,,,,,,17,,,,,,,,127',
',,,,79,83,89,3,7,12,15,19,25,,34,,,,50,59,,,,77,,86,90,5,99,100,21,26',
',,,,106,107,108,60,63,69,74,,,,,,,,,,36,,,45,48,55,61,64,70,75,78,82',
'88,,6,11,,24,29,33,,,,,,,,,,,,,,,,,,,,122,,,126,,,68,73,,81,,,,,,17',
',,,,,,,127,,,,,79,83,89,3,7,12,15,19,25,,34,,,,50,59,,,,77,,86,90,5',
'99,100,21,26,,,,,106,107,108,60,63,69,74,,,,,,,,,,36,,,45,48,55,61,64',
'70,75,78,82,88,,6,11,,24,29,33,,,,,,,,,,,,,,,,,,,,122,,,126,,,68,73',
',81,,,,,,17,,,,,,,,127,,,,,79,83,89,3,7,12,15,19,25,,34,,,,50,59,,,',
'77,,86,90,5,99,100,21,26,,,,,106,107,108,60,63,69,74,,,,,,,,,,36,,,45',
'48,55,61,64,70,75,78,82,88,,6,11,,24,29,33,,,,,,,,,,,,,,,,,,,,122,,',
'126,,,68,73,,81,,,,,,17,,,,,,,,127,,,,,79,83,89,3,7,12,15,19,25,,34',
',,,50,59,,,,77,,86,90,5,99,100,21,26,,,,,106,107,108,60,63,69,74,,,',
',,,,,,36,,,45,48,55,61,64,70,75,78,82,88,,6,11,,24,29,33,,,,,,,,,,,',
',,,,,,,,122,,,126,,,68,73,,81,,,,,,17,,,,,,,,127,,,,,79,83,89,3,7,12',
'15,19,25,,34,,,,50,59,,,,77,,86,90,5,99,100,21,26,,,,,106,107,108,60',
'63,69,74,,,,,,,,,,36,,,45,48,55,61,64,70,75,78,82,88,,6,11,,24,29,33',
',,,,,,,,,,,,,,,,,,,122,,,126,,,68,73,,81,,,,,,17,,,,,,,,127,,,,,79,83',
'89,3,7,12,15,19,25,,34,,,,50,59,,,,77,,86,90,5,99,100,21,26,,,,,106',
'107,108,60,63,69,74,,,,,,,,,,36,,,45,48,55,61,64,70,75,78,82,88,,6,11',
',24,29,33,,,,,,,,,,,,,,,,,,,,122,,,126,,,68,73,,81,,,,,,17,,,,,,,,127',
',,,,79,83,89,3,7,12,15,19,25,,34,,,,50,59,,,,77,,86,90,5,99,100,21,26',
',,,,106,107,108,60,63,69,74,,,,,,,,,,36,,,45,48,55,61,64,70,75,78,82',
'88,,6,11,,24,29,33,,,,,,,,,,,,,,,,,,,,122,,,126,,,68,73,,81,,,,,,17',
',,,,,,,127,,,,,79,83,89,3,7,12,15,19,25,,34,,,,50,59,,,,77,,86,90,5',
'99,100,21,26,,,,,106,107,108,60,63,69,74,,,,,,,,,,36,,,45,48,55,61,64',
'70,75,78,82,88,,6,11,,24,29,33,,,,,,,,,,,,,,,,,,,,122,,,126,,,68,73',
',81,,,,,,17,,,,,,,,127,,,,,79,83,89,3,7,12,15,19,25,,34,,,,50,59,,,',
'77,,86,90,5,99,100,21,26,,,,,106,107,108,60,63,69,74,,,,,,,,,,36,,,45',
'48,55,61,64,70,75,78,82,88,,6,11,,24,29,33,,,,,,,,,,,,,,,,,,,,122,,',
'126,,,68,73,,81,,,,,,17,,,,,,,,127,,,,,79,83,89,3,7,12,15,19,25,,34',
',,,50,59,,,,77,,86,90,5,99,100,21,26,,,,,106,107,108,60,63,69,74,,,',
',,,,,,36,,,45,48,55,61,64,70,75,78,82,88,,6,11,,24,29,33,,,,,,,,,,,',
',,,,,,,,122,,,126,,,68,73,,81,,,,,,17,,,,,,,,127,,,,,79,83,89,3,7,12',
'15,19,25,,34,,,,50,59,,,,77,,86,90,5,99,100,21,26,,,,,106,107,108,60',
'63,69,74,,,,,,,,,,36,,,45,48,55,61,64,70,75,78,82,88,,6,11,,24,29,33',
',,,,,,,,,,,,,,,,,,,122,,,126,451,,68,73,,81,,,,,,17,,,,,,,,127,,,,,79',
'83,89,3,7,12,15,19,25,,34,,,,50,59,,,,77,,86,90,5,99,100,21,26,,,,,106',
'107,108,60,63,69,74,,,,,,,,,,36,,,45,48,55,61,64,70,75,78,82,88,,6,11',
',24,29,33,,,,,,,,,,,,,,,,,,,,122,,,126,,,68,73,,81,,,,,,17,,,,,,,,127',
',,,,79,83,89,3,7,12,15,19,25,,34,,,,50,59,,,,77,,86,90,5,99,100,21,26',
',,,,106,107,108,60,63,69,74,,,,,,,,,,36,,,45,48,55,61,64,70,75,78,82',
'88,,6,11,,24,29,33,,,,,,,,,,,,,,,,,,,,122,,,126,,,68,73,,81,,,,,,17',
',,,,,,,127,,,,,79,83,89,3,7,12,15,19,25,,34,,,,50,59,,,,77,,86,90,5',
'8,13,21,26,,,,,46,53,56,60,63,69,74,,,93,,,,,,,36,,,45,48,55,61,64,70',
'75,78,82,88,,6,11,,24,29,33,,,,,,,,,,,,,,,,,,,,122,,,126,,,68,73,,81',
',,,,,17,,,,,,,,57,,,,,79,83,89,3,7,12,15,19,25,,34,,,,50,59,,,,77,,86',
'90,5,8,13,21,26,,,,,46,53,56,60,63,69,74,,,93,,,,,,,36,,,45,48,55,61',
'64,70,75,78,82,88,,6,11,,24,29,33,,,,,,,,,,,,,,,,,,,,122,,,126,,,68',
'73,,81,,,,,,17,,,,,,,,57,,,,,79,83,89,3,7,12,15,19,25,,34,,,,50,59,',
',,77,,86,90,5,8,13,21,26,,,,,46,53,56,60,63,69,74,,,93,,,,,,,36,,,45',
'48,55,61,64,70,75,78,82,88,,6,11,,24,29,33,,,,,,,,,,,,,,,,,,,,122,,',
'126,,,68,73,,81,,,,,,17,,,,,,,,57,,,,,79,83,89,3,7,12,15,19,25,,34,',
',,50,59,,,,77,,86,90,5,8,13,21,26,,,,,46,53,56,60,63,69,74,,,93,,,,',
',,36,,,45,48,55,61,64,70,75,78,82,88,,6,11,,24,29,33,,,,,,,,,,,,,,,',
',,,,122,,,126,,,68,73,,81,,,,,,17,,,,,,,,57,,,,,79,83,89,3,7,12,15,19',
'25,31,34,,,,50,59,,,,77,,86,90,5,8,13,21,26,,,,,46,53,56,60,63,69,74',
',,93,,,,,,28,36,40,43,45,48,55,61,64,70,75,78,82,88,,6,11,,24,29,33',
',,,,,,,,,,,,,,,,,,,38,,,51,,,68,73,,81,,91,,,,17,,,,,,,,57,,,,,79,83',
'89,3,7,12,15,19,25,,34,,,,50,59,,,,77,,86,90,5,99,100,21,26,,,,,106',
'107,108,60,63,69,74,,,,,,,,,,36,,,45,48,55,61,64,70,75,78,82,88,,6,11',
',24,29,33,,,,,,,,,,,,,,,,,,,,122,,,126,,,68,73,,81,,,,,,17,,,,,,,,127',
',,,,79,83,89,3,7,12,15,19,25,,34,,,,50,59,,,,77,,86,90,5,99,100,21,26',
',,,,106,107,108,60,63,69,74,,,,,,,,,,36,,,45,48,55,61,64,70,75,78,82',
'88,,6,11,,24,29,33,,,,,,,,,,,,,,,,,,,,122,,,126,,,68,73,,81,,,,,,17',
',,,,,,,127,,,,,79,83,89,3,7,12,15,19,25,,34,,,,50,59,,,,77,,86,90,5',
'8,13,21,26,,,,,46,53,56,60,63,69,74,,,93,,,,,,,36,,,45,48,55,61,64,70',
'75,78,82,88,,6,11,,24,29,33,,,,,,,,,,,,,,,,,,,,122,,,126,,,68,73,,81',
',,,,,17,,,,,,,,57,,,,,79,83,89,3,7,12,15,19,25,,34,,,,50,59,,,,77,,86',
'90,5,99,100,21,26,,,,,106,53,56,60,63,69,74,,,,,,,,,,36,,,45,48,55,61',
'64,70,75,78,82,88,,6,11,,24,29,33,,,,,,,,,,,,,,,,,,,,122,,,126,,,68',
'73,,81,,319,,,,17,,,,,,,,127,,,,,79,83,89,3,7,12,15,19,25,,34,,,,50',
'59,,,,77,,86,90,5,99,100,21,26,,,,,106,107,108,60,63,69,74,,,,,,,,,',
'36,,,45,48,55,61,64,70,75,78,82,88,,6,11,,24,29,33,,,,,,,,,,,,,,,,,',
',,122,,,126,,,68,73,,81,,,,,,17,,,,,,,,127,,,,,79,83,89,3,7,12,15,19',
'25,,34,,,,50,59,,,,77,,86,90,5,99,100,21,26,,,,,106,53,56,60,63,69,74',
',,,,,,,,,36,,,45,48,55,61,64,70,75,78,82,88,,6,11,,24,29,33,,,,,,,,',
',,,,,,,,,,,122,,,126,,,68,73,,81,,319,,,,17,,,,,,,,127,,,,,79,83,89',
'3,7,12,15,19,25,,34,,,,50,59,,,,77,,86,90,5,99,100,21,26,,,,,106,107',
'108,60,63,69,74,,,,,,,,,,36,,,45,48,55,61,64,70,75,78,82,88,,6,11,,24',
'29,33,,,,,,,,,,,,,,,,,,,,122,,,126,,,68,73,,81,,,,,,17,,,,,,,,127,,',
',,79,83,89,3,7,12,15,19,25,,34,,,,50,59,,,,77,,86,90,5,99,100,21,26',
',,,,106,107,108,60,63,69,74,,,,,,,,,,36,,,45,48,55,61,64,70,75,78,82',
'88,,6,11,,24,29,33,,,,,,,,,,,,,,,,,,,,122,,,126,,,68,73,,81,,891,,117',
',17,,,,,,,,127,,,,,79,83,89,3,7,12,15,19,25,,34,,,,50,59,,,,77,,86,90',
'5,8,13,21,26,,,,,46,53,56,60,63,69,74,,,93,,,,,,,36,,,45,48,55,61,64',
'70,75,78,82,88,,6,11,,24,29,33,,,,,,,,,,,,,,,,,,,,122,,,126,,,68,73',
',81,,,,,,17,,,,,,,,57,,,,,79,83,89,3,7,12,15,19,25,,34,,,,50,59,,,,77',
',86,90,5,99,100,21,26,,,,,106,53,56,60,63,69,74,,,,,,,,,,36,,,45,48',
'55,61,64,70,75,78,82,88,,6,11,,24,29,33,,,,,,,,,,,,,,,,,,,,122,,,126',
',,476,73,,81,,133,,117,,17,,,,,,,,127,,,,,79,83,89,3,7,12,15,19,25,',
'34,,,,50,59,,,,77,,86,90,5,99,100,21,26,,,,,106,53,56,60,63,69,74,,',
',,,,,,,36,,,45,48,55,61,64,70,75,78,82,88,,6,11,,24,29,33,,,,,,,,,,',
',,,,,,,,,122,,,126,,478,68,73,,81,,133,,117,,17,,,,,,,,127,,,,,79,83',
'89,3,7,12,15,19,25,,34,,,,50,59,,,,77,,86,90,5,99,100,21,26,,,,,106',
'53,56,60,63,69,74,,,,,,,,,,36,,,45,48,55,61,64,70,75,78,82,88,,6,11',
',24,29,33,,,,,,,,,,,,,,,,,,,,122,,,126,,,68,73,,81,,133,,117,,17,,,',
',,,,127,,,,,79,83,89,3,7,12,15,19,25,,34,,,,50,59,,,,77,,86,90,5,99',
'100,21,26,,,,,106,53,56,60,63,69,74,,,,,,,,,,36,,,45,48,55,61,64,70',
'75,78,82,88,,6,11,,24,29,33,,,,,,,,,,,,,,,,,,,,122,,,126,,,68,73,,81',
',319,,,,17,,,,,,,,127,,,,,79,83,89,3,7,12,15,19,25,,34,,,,50,59,,,,77',
',86,90,5,8,13,21,26,,,,,46,53,56,60,63,69,74,,,,,,,,,,36,,,45,48,55',
'61,64,70,75,78,82,88,,6,11,,24,29,33,,,,,,,,,,,,,,,,,,,,122,,,126,,',
'68,73,,81,,490,,,,17,,,,,,,,127,,,,,79,83,89,3,7,12,15,19,25,,34,,,',
'50,59,,,,77,,86,90,5,99,100,21,26,,,,,106,107,108,60,63,69,74,,,,,,',
',,,36,,,45,48,55,61,64,70,75,78,82,88,,6,11,,24,29,33,,,,,,,,,,,,,,',
',,,,,122,,,126,,,68,73,,81,,,,,,17,,,,,,,,127,,,,,79,83,89,3,7,12,15',
'19,25,,34,,,,50,59,,,,77,,86,90,5,8,13,21,26,,,,,46,53,56,60,63,69,74',
',,93,,,,,,,36,,,45,48,55,61,64,70,75,78,82,88,,6,11,,24,29,33,,,,,,',
',,,,,,,,,,,,,122,,,126,,,68,73,,81,,,,,,17,,,,,,,,57,,,,,79,83,89,3',
'7,12,15,19,25,,34,,,,50,59,,,,77,,86,90,5,99,100,21,26,,,,,106,107,108',
'60,63,69,74,,,,,,,,,,104,,,45,48,55,61,64,70,75,78,82,88,,6,11,,,,103',
',279,280,257,260,262,265,268,270,272,274,276,,281,259,,,264,267,105',
',,51,,,68,73,,81,,91,,275,,278,,258,261,263,266,269,271,273,,277,,,79',
'83,89,3,7,12,-251,-251,-251,,-251,256,609,,-251,-251,,,,-251,,-251,-251',
'-251,-251,-251,-251,-251,,,,,-251,-251,-251,-251,-251,-251,-251,,,,',
',,,,,-251,,,-251,-251,-251,-251,-251,-251,-251,-251,-251,-251,,-251',
'-251,,-251,-251,-251,,,,,,,,,,,,,,,,,,,,-251,,,-251,307,,-251,-251,',
'-251,,-251,,-251,,-251,,,,,,,,-251,,,,,-251,-251,-251,-251,-251,-251',
'15,19,25,,34,,,,50,59,,,,77,,86,90,5,99,100,21,26,,,,,106,107,108,60',
'63,69,74,,,,,,,,,,36,,,45,48,55,61,64,70,75,78,82,88,,6,11,,24,29,33',
',,,,,,,,,,,,,,,,,,,122,,,126,,,68,73,,81,,,,,,17,,,,,,,,127,,,,,79,83',
'89,3,7,12,15,19,25,,34,,,,50,59,,,,77,,86,90,5,99,100,21,26,,,,,106',
'107,108,60,63,69,74,,,,,,,,,,36,,,45,48,55,61,64,70,75,78,82,88,,6,11',
',24,29,33,,,,,,,,,,,,,,,,,,,,122,,,126,,,68,73,,81,,,,,,17,,,,,,,,127',
',,,,79,83,89,3,7,12,15,19,25,,34,,,,50,59,,,,77,,86,90,5,8,13,21,26',
',,,,46,53,56,60,63,69,74,,,,,,,,,,36,,,45,48,55,61,64,70,75,78,82,88',
',6,11,,24,29,33,,,,,,,,,,,,,,,,,,,,122,,,126,,,68,73,,81,,490,,,,17',
',,,,,,,127,,,,,79,83,89,3,7,12,-483,-483,-483,,-483,,,,-483,-483,,,',
'-483,,-483,-483,-483,-483,-483,-483,-483,,,,,-483,-483,-483,-483,-483',
'-483,-483,,,,,,,,,,-483,,,-483,-483,-483,-483,-483,-483,-483,-483,-483',
'-483,,-483,-483,,-483,-483,-483,,,,,,,,,,,,,,,,,,,,-483,,,-483,-483',
',-483,-483,,-483,,-483,,-483,,-483,,,,,,,,-483,,,,,-483,-483,-483,-483',
'-483,-483,15,19,25,,34,,,,50,59,,,,77,,86,90,5,99,100,21,26,,,,,106',
'107,108,60,63,69,74,,,,,,,,,,36,,,45,48,55,61,64,70,75,78,82,88,,6,11',
',24,29,33,,,,,,,,,,,,,,,,,,,,122,,,126,,,68,73,,81,,,,,,17,,,,,,,,127',
',,,,79,83,89,3,7,12,-484,-484,-484,,-484,,,,-484,-484,,,,-484,,-484',
'-484,-484,-484,-484,-484,-484,,,,,-484,-484,-484,-484,-484,-484,-484',
',,,,,,,,,-484,,,-484,-484,-484,-484,-484,-484,-484,-484,-484,-484,,-484',
'-484,,-484,-484,-484,,,,,,,,,,,,,,,,,,,,-484,,,-484,-484,,-484,-484',
',-484,,-484,,-484,,-484,,,,,,,,-484,,,,,-484,-484,-484,-484,-484,-484',
'15,19,25,,34,,,,50,59,,,,77,,86,90,5,99,100,21,26,,,,,106,107,108,60',
'63,69,74,,,,,,,,,,36,,,45,48,55,61,64,70,75,78,82,88,,6,11,,24,29,33',
',,,,,,,,,,,,,,,,,,,122,,,126,,,68,73,,81,,,,,,17,,,,,,,,127,,,,,79,83',
'89,3,7,12,15,19,25,,34,,,,50,59,,,,77,,86,90,5,8,13,21,26,,,,,46,53',
'56,60,63,69,74,,,,,,,,,,36,,,45,48,55,61,64,70,75,78,82,88,,6,11,,24',
'29,33,,,,,,,,,,,,,,,,,,,,122,,,126,,,68,73,,81,,,,,,17,,,,,,,,127,,',
',,79,83,89,3,7,12,15,19,25,,34,,,,50,59,,,,77,,86,90,5,99,100,21,26',
',,,,106,53,56,60,63,69,74,,,,,,,,,,36,,,45,48,55,61,64,70,75,78,82,88',
',6,11,,24,29,33,,,,,,,,,,,,,,,,,,,,122,,,126,,,68,73,,81,,133,,117,',
'17,,,,,,,,127,,,,,79,83,89,3,7,12,15,19,25,,34,,,,50,59,,,,77,,86,90',
'5,99,100,21,26,,,,,106,107,108,60,63,69,74,,,,,,,,,,36,,,45,48,55,61',
'64,70,75,78,82,88,,6,11,,24,29,33,,,,,,,,,,,,,,,,,,,,122,,,126,,,68',
'73,,81,,,,,,17,,,,,,,,127,,,,,79,83,89,3,7,12,15,19,25,,34,,,,50,59',
',,,77,,86,90,5,99,100,21,26,,,,,106,107,108,60,63,69,74,,,,,,,,,,36',
',,45,48,55,61,64,70,75,78,82,88,,6,11,,24,29,33,,,,,,,,,,,,,,,,,,,,122',
',,126,,,68,73,,81,,647,,,,17,,,,,,,,127,,,,,79,83,89,3,7,12,15,19,25',
',34,,,,50,59,,,,77,,86,90,5,99,100,21,26,,,,,106,107,108,60,63,69,74',
',,,,,,,,,36,,,45,48,55,61,64,70,75,78,82,88,,6,11,,24,29,33,,,,,,,,',
',,,,,,,,,,,122,,,126,,,68,73,,81,,,,,,17,,,,,,,,127,,,,,79,83,89,3,7',
'12,15,19,25,,34,,,,50,59,,,,77,,86,90,5,99,100,21,26,,,,,106,53,56,60',
'63,69,74,,,,,,,,,,36,,,45,48,55,61,64,70,75,78,82,88,,6,11,,24,29,33',
',,,,,,,,,,,,,,,,,,,122,,,126,,,68,73,,81,,319,,,,17,,,,,,,,127,,,,,79',
'83,89,3,7,12,15,19,25,31,34,,,,50,59,,,,77,,86,90,5,8,13,21,26,,,,,46',
'53,56,60,63,69,74,,,93,,,,,,28,36,40,43,45,48,55,61,64,70,75,78,82,88',
',6,11,,24,29,33,,,,,,,,,,,,,,,,,,,,38,,,51,,,68,73,,81,,91,,,,17,,,',
',,,,57,,,,,79,83,89,3,7,12,15,19,25,,34,,,,50,59,,,,77,,86,90,5,8,13',
'21,26,,,,,46,53,56,60,63,69,74,,,93,,,,,,,36,,,45,48,55,61,64,70,75',
'78,82,88,,6,11,,24,29,33,,,,,,,,,,,,,,,,,,,,122,,,126,,,68,73,,81,,633',
',117,,17,,,,,,,,57,,,,,79,83,89,3,7,12,15,19,25,,34,,,,50,59,,,,77,',
'86,90,5,8,13,21,26,,,,,46,53,56,60,63,69,74,,,93,,,,,,,36,,,45,48,55',
'61,64,70,75,78,82,88,,6,11,,24,29,33,,,,,,,,,,,,,,,,,,,,122,,,126,,',
'68,73,,81,,,,,,17,,,,,,,,57,,,,,79,83,89,3,7,12,15,19,25,,34,,,,50,59',
',,,77,,86,90,5,99,100,21,26,,,,,106,107,108,60,63,69,74,,,,,,,,,,104',
',,45,48,55,61,64,70,75,78,82,88,,6,11,,,,103,,279,280,257,260,262,265',
'268,270,272,274,276,,281,259,,,264,267,137,,,138,,,68,73,,81,,140,,275',
',278,,258,261,263,266,269,271,273,,277,,,79,83,89,3,7,12,15,19,25,,34',
'256,,,50,59,,,,77,,86,90,5,8,13,21,26,,,,,46,53,56,60,63,69,74,,,,,',
',,,,36,,,45,48,55,61,64,70,75,78,82,88,,6,11,,24,29,33,,,,,,,,,,,,,',
',,,,,,122,,,126,,,68,73,,81,,,,,,17,,,,,,,,127,,,,,79,83,89,3,7,12,162',
'166,172,178,182,189,193,197,,,214,217,219,222,226,,,155,158,160,168',
'174,180,183,,,198,203,208,238,239,241,243,227,228,230,154,157,159,164',
'170,176,185,191,196,233,235,237,212,,,242,,,,,,,,171,177,,188,192,202',
'206,,213,216,,,225,,,,,163,167,173,179,,,,,,,,,,,,,229,156,,161,165',
'175,181,184,190,194,199,204,,211,,,224,244,162,166,172,178,182,189,193',
'197,,,214,217,219,222,226,,,155,158,160,168,174,180,183,,,198,203,208',
'238,239,241,243,227,228,230,154,157,159,164,170,176,185,191,196,233',
'235,237,212,,,242,,,,,,,,171,177,,188,192,202,206,,213,216,,,225,,,',
',163,167,173,179,,,,,,,,,,,,,229,156,,161,165,175,181,184,190,194,199',
'204,,211,,,224,244,162,166,172,178,182,189,193,197,,,214,217,219,222',
'226,,,155,158,160,168,174,180,183,,,198,203,208,238,239,241,243,227',
'228,230,154,157,159,164,170,176,185,191,196,233,235,237,212,240,,242',
',,,,,,,171,177,,188,192,202,206,,213,216,,,225,,,,,163,167,173,179,',
',,,,,,,,,,,229,156,,161,165,175,181,184,190,194,199,204,,211,,,224,244',
'162,166,172,178,182,189,193,197,,,214,217,219,222,226,,,155,158,160',
'168,174,180,183,,,198,203,208,238,239,241,243,227,228,230,154,157,159',
'164,170,176,185,191,196,233,235,237,212,,,242,,,,,,,,171,177,,188,192',
'202,206,,213,216,,,225,,,,,163,167,173,179,,,,,,,,,,,,,229,156,,161',
'165,175,181,184,190,194,199,204,,211,,,224,244,162,166,172,178,182,189',
'193,197,,,214,217,219,222,226,,,155,158,160,168,174,180,183,,,198,203',
'208,238,239,241,243,227,228,230,154,157,159,164,170,176,185,191,196',
'233,235,237,212,,,242,,,,,,,,171,177,,188,192,202,206,,213,216,,,225',
',,,,163,167,173,179,,,,,,,,,,,,,229,156,,161,165,175,181,184,190,194',
'199,204,,211,,,224,162,166,172,178,182,189,193,197,,,214,217,219,222',
'226,,,155,158,160,168,174,180,183,,,198,203,208,238,239,241,243,227',
'228,230,154,157,159,164,170,176,185,191,196,233,235,237,212,326,327',
'242,328,,,,,,,171,177,,188,192,202,206,,213,216,,,225,,,,,163,167,173',
'179,,,,,,,,,,,,,229,156,,161,165,175,181,184,190,194,199,204,,211,,',
'224,162,166,172,178,182,189,193,197,,,214,217,219,222,226,,,155,158',
'160,168,174,180,183,,,198,203,208,210,215,220,223,227,228,230,154,157',
'159,164,170,176,185,191,196,201,205,209,212,64,70,221,78,,,,,,,171,177',
',188,192,202,206,,213,216,,,225,,,,,163,167,173,179,,,,,,207,,,,,,,229',
'156,,161,165,175,181,184,190,194,199,204,,211,,,224,162,166,172,178',
'182,189,193,197,,,214,217,219,222,226,,,155,158,160,168,174,180,183',
',,198,203,208,238,239,241,243,227,228,230,154,157,159,164,170,176,185',
'191,196,233,235,237,212,326,327,242,328,,,,,,,171,177,,188,192,202,206',
',213,216,,,225,,,,,163,167,173,179,,,,,,,586,,,594,597,599,229,156,',
'161,165,175,181,184,190,194,199,204,,211,,,224,279,280,257,260,262,265',
'268,270,272,274,276,,281,259,,600,264,267,,,,-217,587,590,592,595,,',
',,,275,,278,,258,261,263,266,269,271,273,,277,,,,,541,470,,,543,,,,',
'256,,,171,177,-217,188,192,202,206,,213,216,,,225,,,,,163,167,173,179',
',,,,,,,,,,,,229,156,,161,165,175,181,184,190,194,199,204,,211,469,470',
'224,,471,,,,,,,,171,177,,188,192,202,206,,213,216,,,225,,,,,163,167',
'173,179,,,,,,,,,,,,,229,156,,161,165,175,181,184,190,194,199,204,,211',
'520,521,224,,523,,,,,,,,171,177,,188,192,202,206,,213,216,,,225,,,,',
'163,167,173,179,,,,,,,,,,,,,229,156,,161,165,175,181,184,190,194,199',
'204,,211,556,521,224,,557,,,,,,,,171,177,,188,192,202,206,,213,216,',
',225,,,,,163,167,173,179,,,,,,,,,,,,,229,156,,161,165,175,181,184,190',
'194,199,204,,211,558,470,224,,559,,,,,,,,171,177,,188,192,202,206,,213',
'216,,,225,,,,,163,167,173,179,,,,,,,,,,,,,229,156,,161,165,175,181,184',
'190,194,199,204,,211,556,521,224,,557,,,,,,,,171,177,,188,192,202,206',
',213,216,,,225,,,,,163,167,173,179,,,,,,,,,,,,,229,156,,161,165,175',
'181,184,190,194,199,204,,211,538,521,224,,540,,,,,,,,171,177,,188,192',
'202,206,,213,216,,,225,,,,,163,167,173,179,,,,,,,,,,,,,229,156,,161',
'165,175,181,184,190,194,199,204,,211,558,470,224,,559,,,,,,,,171,177',
',188,192,202,206,,213,216,,,225,,,,,163,167,173,179,,,,,,,,,,,,,229',
'156,,161,165,175,181,184,190,194,199,204,,211,469,470,224,,471,,,,,',
',,171,177,,188,192,202,206,,213,216,,,225,,,,,163,167,173,179,,,,,,',
',,,,,,229,156,,161,165,175,181,184,190,194,199,204,,211,693,521,224',
',694,,,,,,,,171,177,,188,192,202,206,,213,216,,,225,,,,,163,167,173',
'179,,,,,,,,,,,,,229,156,,161,165,175,181,184,190,194,199,204,,211,525',
'470,224,,527,,,,,,,,171,177,,188,192,202,206,,213,216,,,225,,,,,163',
'167,173,179,,,,,,,,,,,,,229,156,,161,165,175,181,184,190,194,199,204',
',211,469,470,224,,471,,,,,,,,171,177,,188,192,202,206,,213,216,,,225',
',,,,163,167,173,179,,,,,,,,,,,,,229,156,,161,165,175,181,184,190,194',
'199,204,,211,566,470,224,,567,,,,,,,,171,177,,188,192,202,206,,213,216',
',,225,,,,,163,167,173,179,,,,,,,,,,,,,229,156,,161,165,175,181,184,190',
'194,199,204,,211,469,470,224,,471,,,,,,,,171,177,,188,192,202,206,,213',
'216,,,225,,,,,163,167,173,179,,,,,,,,,,,,,229,156,,161,165,175,181,184',
'190,194,199,204,,211,564,521,224,,565,,,,,,,,171,177,,188,192,202,206',
',213,216,,,225,,,,,163,167,173,179,,,,,,,,,,,,,229,156,,161,165,175',
'181,184,190,194,199,204,,211,881,521,224,,882,,,,,,,,171,177,,188,192',
'202,206,,213,216,,,225,,,,,163,167,173,179,,,,,,,,,,,,,229,156,,161',
'165,175,181,184,190,194,199,204,,211,469,470,224,,471,,,,,,,,171,177',
',188,192,202,206,,213,216,,,225,,,,,163,167,173,179,,,,,,,,,,,,,229',
'156,,161,165,175,181,184,190,194,199,204,,211,883,470,224,,884,,,,,',
',,171,177,,188,192,202,206,,213,216,,,225,,,,,163,167,173,179,,,,,,',
',,,,,,229,156,,161,165,175,181,184,190,194,199,204,,211,,,224,279,280',
'257,260,262,265,268,270,272,274,276,,281,259,,,264,267,,,,,,,,,,,,,',
'275,,278,,258,261,263,266,269,271,273,,277,,,279,280,257,260,262,265',
'268,270,272,274,276,256,281,259,,,264,267,,,,,,,,,,,,,,275,,278,,258',
'261,263,266,269,271,273,,277,,,279,280,257,260,262,265,268,270,272,274',
'276,256,281,259,,,264,267,,,,,,,,,,,,,,275,,278,,258,261,263,266,269',
'271,273,,277,,,279,280,257,260,262,265,268,270,272,274,276,256,281,259',
',,264,267,,,,,,,,,,,,,,275,,278,,258,261,263,266,269,271,273,,277,,',
'279,280,257,260,262,265,268,270,272,274,276,256,281,259,,,264,267,,',
',,,,,,,,,,,275,,278,,258,261,263,266,269,271,273,,277,,,279,280,257',
'260,262,265,268,270,272,274,276,256,281,259,,,264,267,,,,,,,,,,,,,,275',
',278,,258,261,263,266,269,271,273,,277,,,279,280,257,260,262,265,268',
'270,272,274,276,256,281,259,,,264,267,,,,,,,,,,,,,,275,,278,,258,261',
'263,266,269,271,273,,277,,,279,280,257,260,262,265,268,270,272,274,276',
'256,281,259,,,264,267,,,,,,,,,,,,,,275,,278,,258,261,263,266,269,271',
'273,,277,,,279,280,257,260,262,265,268,270,272,274,276,256,281,259,',
',264,267,,,,,,,,,,,,,,275,,278,,258,261,263,266,269,271,273,,277,,,279',
'280,257,260,262,265,268,270,272,274,276,256,281,259,,,264,267,,,,,,',
',,,,,,,275,,278,,258,261,263,266,269,271,273,,277,,,279,280,257,260',
'262,265,268,270,272,274,276,256,281,259,,,264,267,,,,,,,,,,,,,,275,',
'278,,258,261,263,266,269,271,273,,277,,,279,280,257,260,262,265,268',
'270,272,274,276,256,281,259,,,264,267,,,,,,,,,,,,,,275,,278,,258,261',
'263,266,269,271,273,,277,,,,,,,,,,,,,,256' ]
        racc_action_table = arr = Array.new(22729, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'523,142,113,84,482,4,397,523,523,523,543,482,284,523,523,668,523,655',
'601,601,883,116,559,387,210,610,610,201,399,636,738,210,399,747,201',
'523,523,738,523,523,523,523,523,334,4,334,884,4,668,881,541,284,620',
'558,284,676,655,482,677,655,116,559,792,142,523,523,523,523,523,523',
'523,523,523,523,523,523,523,523,610,641,523,523,523,738,523,113,84,533',
'523,528,620,543,558,87,311,523,798,523,632,523,523,523,523,523,523,523',
'472,523,397,523,296,601,543,472,472,472,630,540,472,472,472,523,472',
'523,881,523,523,102,523,523,883,541,472,397,397,645,883,883,143,677',
'98,472,472,747,472,472,472,472,472,747,747,676,541,516,650,87,884,676',
'676,881,677,473,884,884,96,881,881,96,473,473,473,366,792,473,473,473',
'87,473,792,792,540,472,362,533,538,528,516,473,472,533,533,528,528,472',
'472,335,473,473,540,473,473,473,473,473,311,616,798,346,102,860,311',
'311,798,798,652,472,860,629,607,540,296,98,527,205,96,96,296,296,472',
'102,205,366,366,114,472,472,473,520,325,103,103,366,98,473,520,520,520',
'538,473,473,520,520,567,520,605,335,335,335,629,860,604,527,520,362',
'527,538,659,346,346,346,473,566,520,520,837,520,520,520,520,520,836',
'837,517,473,362,137,538,836,373,473,473,662,120,114,114,114,20,20,325',
'325,325,520,520,520,520,520,520,520,520,520,520,520,520,520,520,517',
'567,520,520,520,453,520,576,598,837,520,317,373,317,576,836,120,520',
'567,520,566,520,520,520,520,520,520,520,434,520,520,520,596,186,215',
'835,567,566,453,567,186,215,835,520,827,520,670,520,520,135,520,520',
'77,77,77,566,77,576,566,434,77,77,586,434,434,77,585,77,77,77,77,77',
'77,77,864,864,525,23,77,77,77,77,77,77,77,835,682,77,686,827,827,827',
'827,680,77,686,681,77,77,77,77,77,77,77,77,77,77,132,77,77,134,77,77',
'77,132,525,23,134,525,23,220,223,565,136,139,682,584,220,223,565,136',
'139,131,77,565,316,77,316,686,77,77,130,77,209,701,221,52,848,77,848',
'209,112,221,52,33,33,77,132,112,129,134,77,77,77,77,77,77,250,250,250',
'250,250,565,136,139,250,250,583,77,77,250,245,250,250,250,250,250,250',
'250,701,701,701,701,250,250,250,250,250,250,250,149,112,250,128,332',
'431,332,149,250,250,250,250,250,250,250,250,250,250,250,250,250,250',
'882,250,250,65,250,250,250,882,432,321,65,321,882,400,431,890,386,85',
'431,431,400,122,890,386,85,691,250,252,149,250,323,323,250,250,253,250',
'695,250,563,432,561,250,254,432,432,432,432,240,555,250,882,240,240',
'65,250,250,250,250,250,250,556,556,556,400,556,890,386,85,556,556,619',
'619,250,556,705,556,556,556,556,556,556,556,30,30,313,313,556,556,556',
'556,556,556,556,435,535,535,708,535,535,535,582,582,556,295,295,556',
'556,556,556,556,556,556,556,556,556,694,556,556,709,556,556,556,694',
'287,435,702,702,694,435,435,435,435,141,141,141,141,141,687,687,569',
'569,556,556,712,556,556,715,556,556,716,556,552,556,119,556,721,556',
'41,41,41,41,41,724,600,556,694,600,600,600,556,556,556,556,556,556,557',
'557,557,550,557,727,556,115,557,557,772,772,549,557,732,557,557,557',
'557,557,557,557,570,570,734,736,557,557,557,557,557,557,557,600,600',
'600,600,417,417,417,417,417,557,737,297,557,557,557,557,557,557,557',
'557,557,557,739,557,557,542,557,557,557,425,425,425,425,425,425,425',
'741,299,425,425,300,746,539,108,107,425,425,105,557,557,104,557,557',
'537,557,557,315,557,524,557,425,557,425,557,425,425,425,425,425,425',
'425,557,425,318,322,101,557,557,557,557,557,557,839,839,839,839,839',
'839,557,518,95,839,839,506,773,638,839,777,839,839,839,839,839,839,839',
'778,402,781,782,839,839,839,839,839,839,839,786,503,839,501,333,795',
'80,801,839,839,839,839,839,839,839,839,839,839,839,839,839,839,802,839',
'839,76,839,839,839,433,67,806,491,488,813,814,483,817,43,819,402,481',
'480,39,38,433,433,402,839,479,36,839,402,834,839,839,477,839,344,839',
'433,345,433,839,433,433,433,433,466,465,433,839,433,402,463,844,839',
'839,839,839,839,839,298,298,298,298,298,298,845,27,402,298,298,460,852',
'854,298,856,298,298,298,298,298,298,298,857,693,858,859,298,298,298',
'298,298,298,298,361,447,298,443,429,426,865,423,298,298,298,298,298',
'298,298,298,298,298,298,298,298,298,15,298,298,880,298,298,298,439,14',
'422,12,7,384,888,889,392,2,894,693,,,,,439,439,693,298,,,298,693,,298',
'298,,298,,298,439,,439,298,439,439,439,439,,,439,298,439,693,,,298,298',
'298,298,298,298,255,255,255,255,255,255,,,693,255,255,,,,255,,255,255',
'255,255,255,255,255,,398,,,255,255,255,255,255,255,255,,,255,,,,,,255',
'255,255,255,255,255,255,255,255,255,255,255,255,255,,255,255,,255,255',
'255,438,438,438,438,438,438,438,,,438,438,398,,,,,438,438,398,255,,',
'255,398,,255,255,,255,,255,438,,438,255,438,438,438,438,438,438,438',
'255,438,398,,,255,255,255,255,255,255,534,534,534,534,534,534,,,398',
'534,534,,,,534,,534,534,534,534,534,534,534,,564,,,534,534,534,534,534',
'534,534,,,534,,,,,,534,534,534,534,534,534,534,534,534,534,534,534,534',
'534,,534,534,,534,534,534,437,,,,,,,,,,,564,,,,,437,437,564,534,,,534',
'564,,534,534,,534,,534,437,,437,534,437,437,437,437,,,437,534,437,564',
',,534,534,534,534,534,534,504,504,504,504,504,504,,,564,504,504,,,,504',
',504,504,504,504,504,504,504,,,,,504,504,504,504,504,504,504,,,504,',
',,,,504,504,504,504,504,504,504,504,504,504,504,504,504,504,,504,504',
',504,504,504,436,,,,,,,,,,,,,,,,436,436,,504,,,504,,,504,504,,504,,504',
'436,,436,504,436,436,436,436,,,436,504,436,,,,504,504,504,504,504,504',
'580,580,580,580,580,580,,,,580,580,,,,580,,580,580,580,580,580,580,580',
',,,,580,580,580,580,580,580,580,,,580,,,,,,580,580,580,580,580,580,580',
'580,580,580,580,580,580,580,,580,580,,580,580,580,440,440,440,440,440',
'440,440,440,,440,440,,,,,,440,440,,580,,,580,,,580,580,,580,,580,440',
',440,580,440,440,440,440,440,440,440,580,440,,,,580,580,580,580,580',
'580,293,293,293,293,293,293,,,,293,293,,,,293,,293,293,293,293,293,293',
'293,,,,,293,293,293,293,293,293,293,,,293,,,,,,293,293,293,293,293,293',
'293,293,293,293,293,293,293,293,,293,293,,293,293,293,427,427,427,427',
'427,427,427,427,427,427,427,,427,427,,,427,427,,293,,,293,,,293,293',
',293,,293,427,,427,293,427,427,427,427,427,427,427,293,427,,,,293,293',
'293,293,293,293,832,832,832,832,832,832,,,,832,832,,,,832,,832,832,832',
'832,832,832,832,,,,,832,832,832,832,832,832,832,,,832,,,,,,832,832,832',
'832,832,832,832,832,832,832,832,832,832,832,,832,832,,832,832,832,442',
'442,442,442,442,442,442,,,442,442,,,,,,442,442,,832,,,832,,,832,832',
',832,,832,442,,442,832,442,442,442,442,442,442,442,832,442,,,,832,832',
'832,832,832,832,825,825,825,825,825,825,,,,825,825,,,,825,,825,825,825',
'825,825,825,825,,,,,825,825,825,825,825,825,825,,,825,,,,,,825,825,825',
'825,825,825,825,825,825,825,825,825,825,825,,825,825,,825,825,825,444',
'444,444,444,444,444,444,,,444,444,,,,,,444,444,,825,,,825,,,825,825',
',825,,825,444,,444,825,444,444,444,444,444,444,444,825,444,,,,825,825',
'825,825,825,825,822,822,822,822,822,822,,,,822,822,,,,822,,822,822,822',
'822,822,822,822,,,,,822,822,822,822,822,822,822,,,822,,,,,,822,822,822',
'822,822,822,822,822,822,822,822,822,822,822,,822,822,,822,822,822,428',
'428,428,428,428,428,428,,,428,428,,,,,,428,428,,822,,,822,,,822,822',
',822,,822,428,,428,822,428,428,428,428,428,428,428,822,428,,,,822,822',
'822,822,822,822,820,820,820,820,820,820,,,,820,820,,,,820,,820,820,820',
'820,820,820,820,,,,,820,820,820,820,820,820,820,,,820,,,,,,820,820,820',
'820,820,820,820,820,820,820,820,820,820,820,,820,820,,820,820,820,430',
'430,430,430,430,430,430,,,430,430,,,,,,430,430,,820,,,820,,,820,820',
',820,,820,430,,430,820,430,430,430,430,430,430,430,820,430,,,,820,820',
'820,820,820,820,818,818,818,818,818,818,,,,818,818,,,,818,,818,818,818',
'818,818,818,818,,,,,818,818,818,818,818,818,818,,,818,,,,,,818,818,818',
'818,818,818,818,818,818,818,818,818,818,818,,818,818,,818,818,818,449',
'449,449,449,449,449,449,449,449,449,449,,449,449,,,449,449,,818,,,818',
',,818,818,,818,,818,449,,449,818,449,449,449,449,449,449,449,818,449',
',,,818,818,818,818,818,818,589,589,589,589,589,589,,,,589,589,,,,589',
',589,589,589,589,589,589,589,,,,,589,589,589,589,589,589,589,,,589,',
',,,,589,589,589,589,589,589,589,589,589,589,589,589,589,589,,589,589',
',589,589,589,448,448,448,448,448,448,448,,,448,448,,,,,,448,448,,589',
',,589,,,589,589,,589,,589,448,,448,589,448,448,448,448,448,448,448,589',
'448,,,,589,589,589,589,589,589,138,138,138,138,138,138,,,,138,138,,',
',138,,138,138,138,138,138,138,138,,,,,138,138,138,138,138,138,138,,',
'138,,,,,,138,138,138,138,138,138,138,138,138,138,138,138,138,138,,138',
'138,,138,138,138,446,,,,,,,,,,,,,,,,446,446,,138,,,138,,,138,138,,138',
',138,446,,,138,446,446,446,446,,,,138,,,,,138,138,138,138,138,138,51',
'51,51,51,51,51,,,,51,51,,,,51,,51,51,51,51,51,51,51,,,,,51,51,51,51',
'51,51,51,,,51,,,,,,51,51,51,51,51,51,51,51,51,51,51,51,51,51,,51,51',
',51,51,51,445,,,,,,,,,,,,,,,,445,445,,51,,,51,,,51,51,,51,,51,445,,445',
'51,445,445,445,445,,,,51,,,,,51,51,51,51,51,51,811,811,811,811,811,811',
',,,811,811,,,,811,,811,811,811,811,811,811,811,,,,,811,811,811,811,811',
'811,811,,,811,,,,,,811,811,811,811,811,811,811,811,811,811,811,811,811',
'811,,811,811,,811,811,811,441,,,,,,,,,,,,,,,,441,441,,811,,,811,,,811',
'811,,811,,811,441,,441,811,441,441,441,441,,,,811,,,,,811,811,811,811',
'811,811,126,126,126,126,126,126,,,,126,126,,,,126,,126,126,126,126,126',
'126,126,,,,,126,126,126,126,126,126,126,,,126,,,,,,126,126,126,126,126',
'126,126,126,126,126,126,126,126,126,,126,126,,126,126,126,,,,,,,,,,',
',,,,,,,,,126,,,126,,,126,126,,126,,126,,,,126,,,,,,,,126,,,,,126,126',
'126,126,126,126,690,690,690,690,690,690,,,,690,690,,,,690,,690,690,690',
'690,690,690,690,,,,,690,690,690,690,690,690,690,,,690,,,,,,690,690,690',
'690,690,690,690,690,690,690,690,690,690,690,,690,690,,690,690,690,,',
',,,,,,,,,,,,,,,,,690,,,690,,,690,690,,690,,690,,,,690,,,,,,,,690,,,',
',690,690,690,690,690,690,711,711,711,711,711,711,,,,711,711,,,,711,',
'711,711,711,711,711,711,711,,,,,711,711,711,711,711,711,711,,,711,,',
',,,711,711,711,711,711,711,711,711,711,711,711,711,711,711,,711,711',
',711,711,711,,,,,,,,,,,,,,,,,,,,711,,,711,,,711,711,,711,,711,,,,711',
',,,,,,,711,,,,,711,711,711,711,711,711,720,720,720,720,720,720,,,,720',
'720,,,,720,,720,720,720,720,720,720,720,,,,,720,720,720,720,720,720',
'720,,,720,,,,,,720,720,720,720,720,720,720,720,720,720,720,720,720,720',
',720,720,,720,720,720,,,,,,,,,,,,,,,,,,,,720,,,720,,,720,720,,720,,720',
',,,720,,,,,,,,720,,,,,720,720,720,720,720,720,484,484,484,484,484,484',
',,,484,484,,,,484,,484,484,484,484,484,484,484,,,,,484,484,484,484,484',
'484,484,,,484,,,,,,484,484,484,484,484,484,484,484,484,484,484,484,484',
'484,,484,484,,484,484,484,,,,,,,,,,,,,,,,,,,,484,,,484,,,484,484,,484',
',484,,,,484,,,,,,,,484,,,,,484,484,484,484,484,484,750,750,750,750,750',
'750,,,,750,750,,,,750,,750,750,750,750,750,750,750,,,,,750,750,750,750',
'750,750,750,,,750,,,,,,750,750,750,750,750,750,750,750,750,750,750,750',
'750,750,,750,750,,750,750,750,,,,,,,,,,,,,,,,,,,,750,,,750,,,750,750',
',750,,750,,,,750,,,,,,,,750,,,,,750,750,750,750,750,750,751,751,751',
'751,751,751,,,,751,751,,,,751,,751,751,751,751,751,751,751,,,,,751,751',
'751,751,751,751,751,,,751,,,,,,751,751,751,751,751,751,751,751,751,751',
'751,751,751,751,,751,751,,751,751,751,,,,,,,,,,,,,,,,,,,,751,,,751,',
',751,751,,751,,751,,,,751,,,,,,,,751,,,,,751,751,751,751,751,751,762',
'762,762,762,762,762,,,,762,762,,,,762,,762,762,762,762,762,762,762,',
',,,762,762,762,762,762,762,762,,,762,,,,,,762,762,762,762,762,762,762',
'762,762,762,762,762,762,762,,762,762,,762,762,762,,,,,,,,,,,,,,,,,,',
',762,,,762,,,762,762,,762,,762,,,,762,,,,,,,,762,,,,,762,762,762,762',
'762,762,764,764,764,764,764,764,,,,764,764,,,,764,,764,764,764,764,764',
'764,764,,,,,764,764,764,764,764,764,764,,,764,,,,,,764,764,764,764,764',
'764,764,764,764,764,764,764,764,764,,764,764,,764,764,764,,,,,,,,,,',
',,,,,,,,,764,,,764,,,764,764,,764,,764,,,,764,,,,,,,,764,,,,,764,764',
'764,764,764,764,791,791,791,791,791,791,,,,791,791,,,,791,,791,791,791',
'791,791,791,791,,,,,791,791,791,791,791,791,791,,,791,,,,,,791,791,791',
'791,791,791,791,791,791,791,791,791,791,791,,791,791,,791,791,791,,',
',,,,,,,,,,,,,,,,,791,,,791,,,791,791,,791,,791,,,,791,,,,,,,,791,,,',
',791,791,791,791,791,791,464,464,464,464,464,464,,,,464,464,,,,464,',
'464,464,464,464,464,464,464,,,,,464,464,464,464,464,464,464,,,464,,',
',,,464,464,464,464,464,464,464,464,464,464,464,464,464,464,,464,464',
',464,464,464,,,,,,,,,,,,,,,,,,,,464,,,464,,,464,464,,464,,464,,,,464',
',,,,,,,464,,,,,464,464,464,464,464,464,454,454,454,454,454,454,,,,454',
'454,,,,454,,454,454,454,454,454,454,454,,,,,454,454,454,454,454,454',
'454,,,454,,,,,,454,454,454,454,454,454,454,454,454,454,454,454,454,454',
',454,454,,454,454,454,,,,,,,,,,,,,,,,,,,,454,,,454,,,454,454,,454,,454',
',,,454,,,,,,,,454,,,,,454,454,454,454,454,454,1,1,1,1,1,1,,,,1,1,,,',
'1,,1,1,1,1,1,1,1,,,,,1,1,1,1,1,1,1,,,1,,,,,,1,1,1,1,1,1,1,1,1,1,1,1',
'1,1,,1,1,,1,1,1,,,,,,,,,,,,,,,,,,,,1,,,1,,,1,1,,1,,1,,,,1,,,,,,,699',
'1,,699,699,699,1,1,1,1,1,1,268,268,268,,268,,,,268,268,,,,268,,268,268',
'268,268,268,268,268,,,,,268,268,268,268,268,268,268,699,699,699,699',
',,,,,268,,,268,268,268,268,268,268,268,268,268,268,,268,268,,268,268',
'268,,,,,,,,,,,,,,,,,,,,268,,,268,,,268,268,,268,,,,,,268,,,,,,,,268',
',,,,268,268,268,268,268,268,803,803,803,,803,,,,803,803,,,,803,,803',
'803,803,803,803,803,803,,,,,803,803,803,803,803,803,803,,,,,,,,,,803',
',,803,803,803,803,803,803,803,803,803,803,,803,803,,803,803,803,,,,',
',,,,,,,,,,,,,,,803,,,803,,,803,803,,803,,,,,,803,,,,,,,,803,,,,,803',
'803,803,803,803,803,81,81,81,,81,,,,81,81,,,,81,,81,81,81,81,81,81,81',
',,,,81,81,81,81,81,81,81,,,,,,,,,,81,,,81,81,81,81,81,81,81,81,81,81',
',81,81,,81,81,81,,,,,,,,,,,,,,,,,,,,81,,,81,,,81,81,,81,,,,,,81,,,,',
',,,81,,,,,81,81,81,81,81,81,794,794,794,,794,,,,794,794,,,,794,,794',
'794,794,794,794,794,794,,,,,794,794,794,794,794,794,794,,,,,,,,,487',
'794,,,794,794,794,794,794,794,794,794,794,794,,794,794,,,,794,,487,487',
'487,487,487,487,487,487,487,487,487,,487,487,,,487,487,794,,,794,,,794',
'794,,794,,,,487,,487,,487,487,487,487,487,487,487,,487,,,794,794,794',
'794,794,794,75,75,75,,75,487,,,75,75,487,,,75,,75,75,75,75,75,75,75',
',75,,,75,75,75,75,75,75,75,,,,,,,,,,75,,,75,75,75,75,75,75,75,75,75',
'75,,75,75,,75,75,75,,,,,,,,,,,,,,,,,,,,75,,,75,75,,75,75,,75,,75,,75',
',75,,,,,,,,75,,75,,,75,75,75,75,75,75,73,73,73,,73,,,,73,73,,,,73,,73',
'73,73,73,73,73,73,,,,,73,73,73,73,73,73,73,,,,,,,,,,73,,,73,73,73,73',
'73,73,73,73,73,73,,73,73,,73,73,73,,,,,,,,,,,,,,,,,,,,73,,,73,,,73,73',
',73,,73,,,,73,,,,,,,,73,,,,,73,73,73,73,73,73,91,91,91,,91,,,,91,91',
',,,91,,91,91,91,91,91,91,91,,,,,91,91,91,91,91,91,91,,,,,,,,,547,91',
',,91,91,91,91,91,91,91,91,91,91,,91,91,,,,91,,547,547,547,547,547,547',
'547,547,547,547,547,,547,547,,,547,547,91,,,91,,,91,91,,91,,,,547,,547',
',547,547,547,547,547,547,547,,547,,,91,91,91,91,91,91,93,93,93,,93,547',
',,93,93,,,,93,,93,93,93,93,93,93,93,,,,,93,93,93,93,93,93,93,,,93,,',
',,,,93,,,93,93,93,93,93,93,93,93,93,93,,93,93,,93,93,93,,,,,,,,,,,,',
',,,,,,,93,,,93,,,93,93,,93,,,,,,93,,,,,,,,93,,,,,93,93,93,93,93,93,770',
'770,770,,770,,,,770,770,,,,770,,770,770,770,770,770,770,770,,,,,770',
'770,770,770,770,770,770,,,,,,,,,,770,,,770,770,770,770,770,770,770,770',
'770,770,,770,770,,770,770,770,,,,,,,,,,,,,,,,,,,,770,,,770,,,770,770',
',770,,,,,,770,,,,,,,,770,,,,,770,770,770,770,770,770,767,767,767,,767',
',,,767,767,,,,767,,767,767,767,767,767,767,767,,,,,767,767,767,767,767',
'767,767,,,,,,,,,,767,,,767,767,767,767,767,767,767,767,767,767,,767',
'767,,767,767,767,,,,,,,,,,,,,,,,,,,,767,,,767,,,767,767,,767,,,,,,767',
',,,,,,,767,,,,,767,767,767,767,767,767,97,97,97,,97,,,,97,97,,,,97,',
'97,97,97,97,97,97,97,,,,,97,97,97,97,97,97,97,,,,,,,,,,97,,,97,97,97',
'97,97,97,97,97,97,97,,97,97,,97,97,97,,,,,,,,,,,,,,,,,,,,97,,,97,,,97',
'97,,97,,,,,,97,,,,,,,,97,,,,,97,97,97,97,97,97,395,395,395,,395,,,,395',
'395,,,,395,,395,395,395,395,395,395,395,,,,,395,395,395,395,395,395',
'395,,,395,,,,,,,395,,,395,395,395,395,395,395,395,395,395,395,,395,395',
',395,395,395,,,,,,,,,,,,,,,,,,,,395,,,395,,,395,395,,395,,,,,,395,,',
',,,,,395,,,,,395,395,395,395,395,395,68,68,68,,68,,,,68,68,,,,68,,68',
'68,68,68,68,68,68,,,,,68,68,68,68,68,68,68,,,68,,,,,,,68,,,68,68,68',
'68,68,68,68,68,68,68,,68,68,,68,68,68,,,,,,,,,,,,,,,,,,,,68,,,68,,,68',
'68,,68,,,,,,68,,,,,,,,68,,,,,68,68,68,68,68,68,891,891,891,,891,,,,891',
'891,,,,891,,891,891,891,891,891,891,891,,,,,891,891,891,891,891,891',
'891,,,,,,,,,,891,,,891,891,891,891,891,891,891,891,891,891,,891,891',
',891,891,891,,,,,,,,,,,,,,,,,,,,891,,,891,,,891,891,,891,,,,,,891,,',
',,,,,891,,,,,891,891,891,891,891,891,804,804,804,,804,,,,804,804,,,',
'804,,804,804,804,804,804,804,804,,,,,804,804,804,804,804,804,804,,,',
',,,,,,804,,,804,804,804,804,804,804,804,804,804,804,,804,804,,804,804',
'804,,,,,,,,,,,,,,,,,,,,804,,,804,,,804,804,,804,,,,,,804,,,,,,,,804',
',,,,804,804,804,804,804,804,752,752,752,,752,,,,752,752,,,,752,,752',
'752,752,752,752,752,752,,,,,752,752,752,752,752,752,752,,,,,,,,,,752',
',,752,752,752,752,752,752,752,752,752,752,,752,752,,752,752,752,,,,',
',,,,,,,,,,,,,,,752,,,752,,,752,752,,752,,,,,,752,,,,,,,,752,,,,,752',
'752,752,752,752,752,810,810,810,,810,,,,810,810,,,,810,,810,810,810',
'810,810,810,810,,,,,810,810,810,810,810,810,810,,,,,,,,,,810,,,810,810',
'810,810,810,810,810,810,810,810,,810,810,,810,810,810,,,,,,,,,,,,,,',
',,,,,810,,,810,,,810,810,,810,,810,,,,810,,,,,,,,810,,,,,810,810,810',
'810,810,810,61,61,61,,61,,,,61,61,,,,61,,61,61,61,61,61,61,61,,61,,',
'61,61,61,61,61,61,61,,,,,,,,,,61,,,61,61,61,61,61,61,61,61,61,61,,61',
'61,,61,61,61,,,,,,,,,,,,,,,,,,,,61,,,61,61,,61,61,,61,,61,,61,,61,,',
',,,,,61,,61,,,61,61,61,61,61,61,748,748,748,,748,,,,748,748,,,,748,',
'748,748,748,748,748,748,748,,,,,748,748,748,748,748,748,748,,,,,,,,',
',748,,,748,748,748,748,748,748,748,748,748,748,,748,748,,748,748,748',
',,,,,,,,,,,,,,,,,,,748,,,748,,,748,748,,748,,,,,,748,,,,,,,,748,,,,',
'748,748,748,748,748,748,59,59,59,,59,,,,59,59,,,,59,,59,59,59,59,59',
'59,59,,,,,59,59,59,59,59,59,59,,,59,,,,,,,59,,,59,59,59,59,59,59,59',
'59,59,59,,59,59,,59,59,59,,,,,,,,,,,,,,,,,,,,59,,,59,,,59,59,,59,,,',
',,59,,,,,,,,59,,,,,59,59,59,59,59,59,742,742,742,,742,,,,742,742,,,',
'742,,742,742,742,742,742,742,742,,,,,742,742,742,742,742,742,742,,,',
',,,,,,742,,,742,742,742,742,742,742,742,742,742,742,,742,742,,742,742',
'742,,,,,,,,,,,,,,,,,,,,742,,,742,,,742,742,,742,,,,,,742,,,,,,,,742',
',,,,742,742,742,742,742,742,731,731,731,,731,,,,731,731,,,,731,,731',
'731,731,731,731,731,731,,,,,731,731,731,731,731,731,731,,,,,,,,,,731',
',,731,731,731,731,731,731,731,731,731,731,,731,731,,731,731,731,,,,',
',,,,,,,,,,,,,,,731,,,731,,,731,731,,731,,731,,731,,731,,,,,,,,731,,',
',,731,731,731,731,731,731,728,728,728,,728,,,,728,728,,,,728,,728,728',
'728,728,728,728,728,,,,,728,728,728,728,728,728,728,,,,,,,,,,728,,,728',
'728,728,728,728,728,728,728,728,728,,728,728,,728,728,728,,,,,,,,,,',
',,,,,,,,,728,,,728,,,728,728,,728,,728,,728,,728,,,,,,,,728,,,,,728',
'728,728,728,728,728,725,725,725,,725,,,,725,725,,,,725,,725,725,725',
'725,725,725,725,,,,,725,725,725,725,725,725,725,,,725,,,,,,,725,,,725',
'725,725,725,725,725,725,725,725,725,,725,725,,725,725,725,,,,,,,,,,',
',,,,,,,,,725,,,725,,,725,725,,725,,,,,,725,,,,,,,,725,,,,,725,725,725',
'725,725,725,117,117,117,,117,,,,117,117,,,,117,,117,117,117,117,117',
'117,117,,,,,117,117,117,117,117,117,117,,,,,,,,,,117,,,117,117,117,117',
'117,117,117,117,117,117,,117,117,,117,117,117,,,,,,,,,,,,,,,,,,,,117',
',,117,,,117,117,,117,,,,,,117,,,,,,,,117,,,,,117,117,117,117,117,117',
'57,57,57,,57,,,,57,57,,,,57,,57,57,57,57,57,57,57,,,,,57,57,57,57,57',
'57,57,,,,,,,,,,57,,,57,57,57,57,57,57,57,57,57,57,,57,57,,57,57,57,',
',,,,,,,,,,,,,,,,,,57,,,57,,,57,57,,57,,,,,,57,,,,,,,,57,,,,,57,57,57',
'57,57,57,56,56,56,,56,,,,56,56,,,,56,,56,56,56,56,56,56,56,,,,,56,56',
'56,56,56,56,56,,,,,,,,,,56,,,56,56,56,56,56,56,56,56,56,56,,56,56,,56',
'56,56,,,,,,,,,,,,,,,,,,,,56,,,56,56,,56,56,,56,,56,,56,,56,,,,,,,,56',
',,,,56,56,56,56,56,56,704,704,704,,704,,,,704,704,,,,704,,704,704,704',
'704,704,704,704,,,,,704,704,704,704,704,704,704,,,,,,,,,,704,,,704,704',
'704,704,704,704,704,704,704,704,,704,704,,704,704,704,,,,,,,,,,,,,,',
',,,,,704,,,704,,,704,704,,704,,,,,,704,,,,,,,,704,,,,,704,704,704,704',
'704,704,55,55,55,,55,,,,55,55,,,,55,,55,55,55,55,55,55,55,,55,,,55,55',
'55,55,55,55,55,,,,,,,,,,55,,,55,55,55,55,55,55,55,55,55,55,,55,55,,55',
'55,55,,,,,,,,,,,,,,,,,,,,55,,,55,55,,55,55,,55,,55,,55,,55,,,,,,,,55',
',55,,,55,55,55,55,55,55,53,53,53,,53,,,,53,53,,,,53,,53,53,53,53,53',
'53,53,,,,,53,53,53,53,53,53,53,,,,,,,,,,53,,,53,53,53,53,53,53,53,53',
'53,53,,53,53,,53,53,53,,,,,,,,,,,,,,,,,,,,53,,,53,53,,53,53,,53,,53',
',53,,53,,,,,,,,53,,,,,53,53,53,53,53,53,127,127,127,,127,,,,127,127',
',,,127,,127,127,127,127,127,127,127,,,,,127,127,127,127,127,127,127',
',,,,,,,,,127,,,127,127,127,127,127,127,127,127,127,127,,127,127,,127',
'127,127,,,,,,,,,,,,,,,,,,,,127,,,127,,,127,127,,127,,,,,,127,,,,,,,',
'127,,,,,127,127,127,127,127,127,689,689,689,,689,,,,689,689,,,,689,',
'689,689,689,689,689,689,689,,,,,689,689,689,689,689,689,689,,,689,,',
',,,,689,,,689,689,689,689,689,689,689,689,689,689,,689,689,,689,689',
'689,,,,,,,,,,,,,,,,,,,,689,,,689,,,689,689,,689,,,,,,689,,,,,,,,689',
',,,,689,689,689,689,689,689,685,685,685,,685,,,,685,685,,,,685,,685',
'685,685,685,685,685,685,,,,,685,685,685,685,685,685,685,,,,,,,,,,685',
',,685,685,685,685,685,685,685,685,685,685,,685,685,,685,685,685,,,,',
',,,,,,,,,,,,,,,685,,,685,,,685,685,,685,,,,,,685,,,,,,,,685,,,,,685',
'685,685,685,685,685,684,684,684,,684,,,,684,684,,,,684,,684,684,684',
'684,684,684,684,,,,,684,684,684,684,684,684,684,,,,,,,,,,684,,,684,684',
'684,684,684,684,684,684,684,684,,684,684,,684,684,684,,,,,,,,,,,,,,',
',,,,,684,,,684,,,684,684,,684,,,,,,684,,,,,,,,684,,,,,684,684,684,684',
'684,684,683,683,683,,683,,,,683,683,,,,683,,683,683,683,683,683,683',
'683,,,,,683,683,683,683,683,683,683,,,,,,,,,,683,,,683,683,683,683,683',
'683,683,683,683,683,,683,683,,683,683,683,,,,,,,,,,,,,,,,,,,,683,,,683',
',,683,683,,683,,,,,,683,,,,,,,,683,,,,,683,683,683,683,683,683,679,679',
'679,,679,,,,679,679,,,,679,,679,679,679,679,679,679,679,,,,,679,679',
'679,679,679,679,679,,,,,,,,,,679,,,679,679,679,679,679,679,679,679,679',
'679,,679,679,,679,679,679,,,,,,,,,,,,,,,,,,,,679,,,679,,,679,679,,679',
',679,,679,,679,,,,,,,,679,,,,,679,679,679,679,679,679,133,133,133,,133',
',,,133,133,,,,133,,133,133,133,133,133,133,133,,,,,133,133,133,133,133',
'133,133,,,,,,,,,,133,,,133,133,133,133,133,133,133,133,133,133,,133',
'133,,133,133,133,,,,,,,,,,,,,,,,,,,,133,,,133,,,133,133,,133,,,,,,133',
',,,,,,,133,,,,,133,133,133,133,133,133,412,412,412,,412,,,,412,412,',
',,412,,412,412,412,412,412,412,412,,,,,412,412,412,412,412,412,412,',
',412,,,,,,,412,,,412,412,412,412,412,412,412,412,412,412,,412,412,,412',
'412,412,,,,,,,,,,,,,,,,,,,,412,,,412,,,412,412,,412,,,,,,412,,,,,,,',
'412,,,,,412,412,412,412,412,412,381,381,381,,381,,,,381,381,,,,381,',
'381,381,381,381,381,381,381,,,,,381,381,381,381,381,381,381,,,,,,,,',
',381,,,381,381,381,381,381,381,381,381,381,381,,381,381,,381,381,381',
',,,,,,,,,,,,,,,,,,,381,,,381,,,381,381,,381,,381,,,,381,,,,,,,,381,',
',,,381,381,381,381,381,381,663,663,663,,663,,,,663,663,,,,663,,663,663',
'663,663,663,663,663,,,,,663,663,663,663,663,663,663,,,,,,,,,,663,,,663',
'663,663,663,663,663,663,663,663,663,,663,663,,663,663,663,,,,,,,,,,',
',,,,,,,,,663,,,663,,,663,663,,663,,,,,,663,,,,,,,,663,,,,,663,663,663',
'663,663,663,8,8,8,,8,,,,8,8,,,,8,,8,8,8,8,8,8,8,,,,,8,8,8,8,8,8,8,,',
',,,,,,,8,,,8,8,8,8,8,8,8,8,8,8,,8,8,,8,8,8,,,,,,,,,,,,,,,,,,,,8,,,8',
',,8,8,,8,,8,,8,,8,,,,,,,,8,,,,,8,8,8,8,8,8,50,50,50,,50,,,,50,50,,,',
'50,,50,50,50,50,50,50,50,,,,,50,50,50,50,50,50,50,,,50,,,,,,,50,,,50',
'50,50,50,50,50,50,50,50,50,,50,50,,50,50,50,,,,,,,,,,,,,,,,,,,,50,,',
'50,,,50,50,,50,,,,,,50,,,,,,,,50,,,,,50,50,50,50,50,50,657,657,657,',
'657,,,,657,657,,,,657,,657,657,657,657,657,657,657,,,,,657,657,657,657',
'657,657,657,,,,,,,,,,657,,,657,657,657,657,657,657,657,657,657,657,',
'657,657,,657,657,657,,,,,,,,,,,,,,,,,,,,657,,,657,,,657,657,,657,,,',
',,657,,,,,,,,657,,,,,657,657,657,657,657,657,140,140,140,,140,,,,140',
'140,,,,140,,140,140,140,140,140,140,140,,,,,140,140,140,140,140,140',
'140,,,,,,,,,,140,,,140,140,140,140,140,140,140,140,140,140,,140,140',
',,,140,,499,499,499,499,499,499,499,499,499,499,499,,499,499,,,499,499',
'140,,,140,,,140,140,,140,,,,499,,499,,499,499,499,499,499,499,499,,499',
',,140,140,140,140,140,140,656,656,656,,656,499,,,656,656,,,499,656,',
'656,656,656,656,656,656,656,,,,,656,656,656,656,656,656,656,,,,,,,,',
',656,,,656,656,656,656,656,656,656,656,656,656,,656,656,,656,656,656',
',,,,,,,,,,,,,,,,,,,656,,,656,,,656,656,,656,,,,,,656,,,,,,,,656,,,,',
'656,656,656,656,656,656,651,651,651,,651,,,,651,651,,,,651,,651,651',
'651,651,651,651,651,,,,,651,651,651,651,651,651,651,,,,,,,,,,651,,,651',
'651,651,651,651,651,651,651,651,651,,651,651,,651,651,651,,,,,,,,,,',
',,,,,,,,,651,,,651,,,651,651,,651,,651,,,,651,,,,,,,,651,,,,,651,651',
'651,651,651,651,647,647,647,,647,,,,647,647,,,,647,,647,647,647,647',
'647,647,647,,,,,647,647,647,647,647,647,647,,,,,,,,,,647,,,647,647,647',
'647,647,647,647,647,647,647,,647,647,,647,647,647,,,,,,,,,,,,,,,,,,',
',647,,,647,,,647,647,,647,,,,,,647,,,,,,,,647,,,,,647,647,647,647,647',
'647,147,147,147,,147,,,,147,147,,,,147,,147,147,147,147,147,147,147',
',,,,147,147,147,147,147,147,147,,,,,,,,,,147,,,147,147,147,147,147,147',
'147,147,147,147,,147,147,,,,147,,744,744,744,744,744,744,744,744,744',
'744,744,,744,744,,,744,744,147,,,147,,,147,147,,147,,,,744,,744,,744',
'744,744,744,744,744,744,,744,,,147,147,147,147,147,147,643,643,643,',
'643,744,,,643,643,,,744,643,,643,643,643,643,643,643,643,,,,,643,643',
'643,643,643,643,643,,,,,,,,,,643,,,643,643,643,643,643,643,643,643,643',
'643,,643,643,,643,643,643,,,,,,,,,,,,,,,,,,,,643,,,643,,,643,643,,643',
',643,,,,643,,,,,,,,643,,,,,643,643,643,643,643,643,150,150,150,,150',
',,,150,150,,,,150,,150,150,150,150,150,150,150,,,,,150,150,150,150,150',
'150,150,,,,,,,,,,150,,,150,150,150,150,150,150,150,150,150,150,,150',
'150,,,,150,,821,821,821,821,821,821,821,821,821,821,821,,821,821,,,821',
'821,150,,,150,,,150,150,,150,,,,821,,821,,821,821,821,821,821,821,821',
',821,,,150,150,150,150,150,150,151,151,151,,151,821,,,151,151,821,,',
'151,,151,151,151,151,151,151,151,,,,,151,151,151,151,151,151,151,,,151',
',,,,,,151,,,151,151,151,151,151,151,151,151,151,151,,151,151,,151,151',
'151,,,,,,,,,,,,,,,,,,,,151,,,151,,,151,151,,151,,,,,,151,,,,,,,,151',
',,,,151,151,151,151,151,151,152,152,152,,152,,,,152,152,,,,152,,152',
'152,152,152,152,152,152,,,,,152,152,152,152,152,152,152,,,152,,,,,,',
'152,,,152,152,152,152,152,152,152,152,152,152,,152,152,,152,152,152',
',,,,,,,,,,,,,,,,,,,152,,,152,,,152,152,,152,,,,,,152,,,,,,,,152,,,,',
'152,152,152,152,152,152,642,642,642,,642,,,,642,642,,,,642,,642,642',
'642,642,642,642,642,,,,,642,642,642,642,642,642,642,,,,,,,,,,642,,,642',
'642,642,642,642,642,642,642,642,642,,642,642,,642,642,642,,,,,,,,,,',
',,,,,,,,,642,,,642,,,642,642,,642,,,,,,642,,,,,,,,642,,,,,642,642,642',
'642,642,642,640,640,640,,640,,,,640,640,,,,640,,640,640,640,640,640',
'640,640,,,,,640,640,640,640,640,640,640,,,,,,,,,,640,,,640,640,640,640',
'640,640,640,640,640,640,,640,640,,640,640,640,,,,,,,,,,,,,,,,,,,,640',
',,640,,,640,640,,640,,640,,640,,640,,,,,,,,640,,,,,640,640,640,640,640',
'640,633,633,633,,633,,,,633,633,,,,633,,633,633,633,633,633,633,633',
',,,,633,633,633,633,633,633,633,,,,,,,,,,633,,,633,633,633,633,633,633',
'633,633,633,633,,633,633,,633,633,633,,,,,,,,,,,,,,,,,,,,633,,,633,',
',633,633,,633,,,,,,633,,,,,,,,633,,,,,633,633,633,633,633,633,614,614',
'614,,614,,,,614,614,,,,614,,614,614,614,614,614,614,614,,,,,614,614',
'614,614,614,614,614,,,,,,,,,,614,,,614,614,614,614,614,614,614,614,614',
'614,,614,614,,776,,614,776,776,776,,,,,,,,,,,,,,,,,614,,,614,,,614,614',
',614,,614,,,,,776,,,,,,614,776,776,776,776,,614,614,614,614,614,614',
'609,609,609,,609,,,,609,609,,,,609,,609,609,609,609,609,609,609,,,,',
'609,609,609,609,609,609,609,,,,,,,,,,609,,,609,609,609,609,609,609,609',
'609,609,609,,609,609,,609,609,609,,,,,,,,,,,,,,,,,,,,609,,,609,,,609',
'609,,609,,,,,,609,,,,,,,,609,,,,,609,609,609,609,609,609,608,608,608',
',608,,,,608,608,,,,608,,608,608,608,608,608,608,608,,,,,608,608,608',
'608,608,608,608,,,,,,,,,,608,,,608,608,608,608,608,608,608,608,608,608',
',608,608,,608,608,608,,,,,,,,,,,,,,,,,,,,608,,,608,,,608,608,,608,,608',
',,,608,,,,,,,,608,,,,,608,608,608,608,608,608,380,380,380,,380,,,,380',
'380,,,,380,,380,380,380,380,380,380,380,,,,,380,380,380,380,380,380',
'380,,,,,,,,,,380,,,380,380,380,380,380,380,380,380,380,380,,380,380',
',380,380,380,,,,,,,,,,,,,,,,,,,,380,,,380,,,380,380,,380,,380,,380,',
'380,,,,,,,,380,,,,,380,380,380,380,380,380,46,46,46,,46,,,,46,46,,,',
'46,,46,46,46,46,46,46,46,,,,,46,46,46,46,46,46,46,,,,,,,,,,46,,,46,46',
'46,46,46,46,46,46,46,46,,46,46,,46,46,46,,,,,,,,,,,,,,,,,,,,46,,,46',
',,46,46,,46,,46,,46,,46,,,,,,,,46,,,,,46,46,46,46,46,46,378,378,378',
',378,,,,378,378,,,,378,,378,378,378,378,378,378,378,,,,,378,378,378',
'378,378,378,378,,,,,,,,,,378,,,378,378,378,378,378,378,378,378,378,378',
',378,378,,378,378,378,,,,,,,,,,,,,,,,,,,,378,,,378,,,378,378,,378,,',
',,,378,,,,,,,,378,,,,,378,378,378,378,378,378,841,841,841,,841,,,,841',
'841,,,,841,,841,841,841,841,841,841,841,,,,,841,841,841,841,841,841',
'841,,,,,,,,,,841,,,841,841,841,841,841,841,841,841,841,841,,841,841',
',841,841,841,,,,,,,,,,,,,,,,,,,,841,,,841,,,841,841,,841,,841,,841,',
'841,,,,,,,,841,,,,,841,841,841,841,841,841,376,376,376,,376,,,,376,376',
',,,376,,376,376,376,376,376,376,376,,,,,376,376,376,376,376,376,376',
',,,,,,,,,376,,,376,376,376,376,376,376,376,376,376,376,,376,376,,376',
'376,376,,,,,,,,,,,,,,,,,,,,376,,,376,,,376,376,,376,,376,,376,,376,',
',,,,,,376,,,,,376,376,376,376,376,376,577,577,577,,577,,,,577,577,,',
',577,,577,577,577,577,577,577,577,,,,,577,577,577,577,577,577,577,,',
',,,,,,,577,,,577,577,577,577,577,577,577,577,577,577,,577,577,,577,577',
'577,,,,,,,,,,,,,,,,,,,,577,,,577,,,577,577,,577,,577,,,,577,,,,,,,,577',
',,,,577,577,577,577,577,577,374,374,374,,374,,,,374,374,,,,374,,374',
'374,374,374,374,374,374,,,,,374,374,374,374,374,374,374,,,,,,,,,,374',
',,374,374,374,374,374,374,374,374,374,374,,374,374,,374,374,374,,,,',
',,,,,,,,,,,,,,,374,,,374,,,374,374,,374,,,,,,374,,,,,,,,374,,,,,374',
'374,374,374,374,374,372,372,372,,372,,,,372,372,,,,372,,372,372,372',
'372,372,372,372,,,,,372,372,372,372,372,372,372,,,,,,,,,,372,,,372,372',
'372,372,372,372,372,372,372,372,,372,372,,372,372,372,,,,,,,,,,,,,,',
',,,,,372,,,372,,,372,372,,372,,,,,,372,,,,,,,,372,,,,,372,372,372,372',
'372,372,370,370,370,,370,,,,370,370,,,,370,,370,370,370,370,370,370',
'370,,,,,370,370,370,370,370,370,370,,,,,,,,,,370,,,370,370,370,370,370',
'370,370,370,370,370,,370,370,,370,370,370,,,,,,,,,,,,,,,,,,,,370,,,370',
',,370,370,,370,,,,,,370,,,,,,,,370,,,,,370,370,370,370,370,370,843,843',
'843,,843,,,,843,843,,,,843,,843,843,843,843,843,843,843,,,,,843,843',
'843,843,843,843,843,,,,,,,,,,843,,,843,843,843,843,843,843,843,843,843',
'843,,843,843,,843,843,843,,,,,,,,,,,,,,,,,,,,843,,,843,,,843,843,,843',
',843,,843,,843,,,,,,,,843,,,,,843,843,843,843,843,843,29,29,29,,29,',
',,29,29,,,,29,,29,29,29,29,29,29,29,,,,,29,29,29,29,29,29,29,,,,,,,',
',,29,,,29,29,29,29,29,29,29,29,29,29,,29,29,,29,29,29,,,,,,,,,,,,,,',
',,,,,29,,,29,,,29,29,,29,,,,,,29,,,,,,,,29,,,,,29,29,29,29,29,29,256',
'256,256,,256,,,,256,256,,,,256,,256,256,256,256,256,256,256,,,,,256',
'256,256,256,256,256,256,,,,,,,,,,256,,,256,256,256,256,256,256,256,256',
'256,256,,256,256,,256,256,256,,,,,,,,,,,,,,,,,,,,256,,,256,,,256,256',
',256,,,,,,256,,,,,,,,256,,,,,256,256,256,256,256,256,257,257,257,,257',
',,,257,257,,,,257,,257,257,257,257,257,257,257,,,,,257,257,257,257,257',
'257,257,,,,,,,,,,257,,,257,257,257,257,257,257,257,257,257,257,,257',
'257,,257,257,257,,,,,,,,,,,,,,,,,,,,257,,,257,,,257,257,,257,,,,,,257',
',,,,,,,257,,,,,257,257,257,257,257,257,258,258,258,,258,,,,258,258,',
',,258,,258,258,258,258,258,258,258,,,,,258,258,258,258,258,258,258,',
',,,,,,,,258,,,258,258,258,258,258,258,258,258,258,258,,258,258,,258',
'258,258,,,,,,,,,,,,,,,,,,,,258,,,258,,,258,258,,258,,,,,,258,,,,,,,',
'258,,,,,258,258,258,258,258,258,259,259,259,,259,,,,259,259,,,,259,',
'259,259,259,259,259,259,259,,,,,259,259,259,259,259,259,259,,,,,,,,',
',259,,,259,259,259,259,259,259,259,259,259,259,,259,259,,259,259,259',
',,,,,,,,,,,,,,,,,,,259,,,259,,,259,259,,259,,,,,,259,,,,,,,,259,,,,',
'259,259,259,259,259,259,260,260,260,,260,,,,260,260,,,,260,,260,260',
'260,260,260,260,260,,,,,260,260,260,260,260,260,260,,,,,,,,,,260,,,260',
'260,260,260,260,260,260,260,260,260,,260,260,,260,260,260,,,,,,,,,,',
',,,,,,,,,260,,,260,,,260,260,,260,,,,,,260,,,,,,,,260,,,,,260,260,260',
'260,260,260,261,261,261,,261,,,,261,261,,,,261,,261,261,261,261,261',
'261,261,,,,,261,261,261,261,261,261,261,,,,,,,,,,261,,,261,261,261,261',
'261,261,261,261,261,261,,261,261,,261,261,261,,,,,,,,,,,,,,,,,,,,261',
',,261,,,261,261,,261,,,,,,261,,,,,,,,261,,,,,261,261,261,261,261,261',
'262,262,262,,262,,,,262,262,,,,262,,262,262,262,262,262,262,262,,,,',
'262,262,262,262,262,262,262,,,,,,,,,,262,,,262,262,262,262,262,262,262',
'262,262,262,,262,262,,262,262,262,,,,,,,,,,,,,,,,,,,,262,,,262,,,262',
'262,,262,,,,,,262,,,,,,,,262,,,,,262,262,262,262,262,262,263,263,263',
',263,,,,263,263,,,,263,,263,263,263,263,263,263,263,,,,,263,263,263',
'263,263,263,263,,,,,,,,,,263,,,263,263,263,263,263,263,263,263,263,263',
',263,263,,263,263,263,,,,,,,,,,,,,,,,,,,,263,,,263,,,263,263,,263,,',
',,,263,,,,,,,,263,,,,,263,263,263,263,263,263,264,264,264,,264,,,,264',
'264,,,,264,,264,264,264,264,264,264,264,,,,,264,264,264,264,264,264',
'264,,,,,,,,,,264,,,264,264,264,264,264,264,264,264,264,264,,264,264',
',264,264,264,,,,,,,,,,,,,,,,,,,,264,,,264,,,264,264,,264,,,,,,264,,',
',,,,,264,,,,,264,264,264,264,264,264,265,265,265,,265,,,,265,265,,,',
'265,,265,265,265,265,265,265,265,,,,,265,265,265,265,265,265,265,,,',
',,,,,,265,,,265,265,265,265,265,265,265,265,265,265,,265,265,,265,265',
'265,,,,,,,,,,,,,,,,,,,,265,,,265,,,265,265,,265,,,,,,265,,,,,,,,265',
',,,,265,265,265,265,265,265,266,266,266,,266,,,,266,266,,,,266,,266',
'266,266,266,266,266,266,,,,,266,266,266,266,266,266,266,,,,,,,,,,266',
',,266,266,266,266,266,266,266,266,266,266,,266,266,,266,266,266,,,,',
',,,,,,,,,,,,,,,266,,,266,,,266,266,,266,,,,,,266,,,,,,,,266,,,,,266',
'266,266,266,266,266,267,267,267,,267,,,,267,267,,,,267,,267,267,267',
'267,267,267,267,,,,,267,267,267,267,267,267,267,,,,,,,,,,267,,,267,267',
'267,267,267,267,267,267,267,267,,267,267,,267,267,267,,,,,,,,,,,,,,',
',,,,,267,,,267,,,267,267,,267,,,,,,267,,,,,,,,267,,,,,267,267,267,267',
'267,267,420,420,420,,420,,,,420,420,,,,420,,420,420,420,420,420,420',
'420,,,,,420,420,420,420,420,420,420,,,,,,,,,,420,,,420,420,420,420,420',
'420,420,420,420,420,,420,420,,420,420,420,,,,,,,,,,,,,,,,,,,,420,,,420',
',,420,420,,420,,,,,,420,,,,,,,,420,,,,,420,420,420,420,420,420,269,269',
'269,,269,,,,269,269,,,,269,,269,269,269,269,269,269,269,,,,,269,269',
'269,269,269,269,269,,,,,,,,,,269,,,269,269,269,269,269,269,269,269,269',
'269,,269,269,,269,269,269,,,,,,,,,,,,,,,,,,,,269,,,269,,,269,269,,269',
',,,,,269,,,,,,,,269,,,,,269,269,269,269,269,269,270,270,270,,270,,,',
'270,270,,,,270,,270,270,270,270,270,270,270,,,,,270,270,270,270,270',
'270,270,,,,,,,,,,270,,,270,270,270,270,270,270,270,270,270,270,,270',
'270,,270,270,270,,,,,,,,,,,,,,,,,,,,270,,,270,,,270,270,,270,,,,,,270',
',,,,,,,270,,,,,270,270,270,270,270,270,271,271,271,,271,,,,271,271,',
',,271,,271,271,271,271,271,271,271,,,,,271,271,271,271,271,271,271,',
',,,,,,,,271,,,271,271,271,271,271,271,271,271,271,271,,271,271,,271',
'271,271,,,,,,,,,,,,,,,,,,,,271,,,271,,,271,271,,271,,,,,,271,,,,,,,',
'271,,,,,271,271,271,271,271,271,272,272,272,,272,,,,272,272,,,,272,',
'272,272,272,272,272,272,272,,,,,272,272,272,272,272,272,272,,,,,,,,',
',272,,,272,272,272,272,272,272,272,272,272,272,,272,272,,272,272,272',
',,,,,,,,,,,,,,,,,,,272,,,272,,,272,272,,272,,,,,,272,,,,,,,,272,,,,',
'272,272,272,272,272,272,273,273,273,,273,,,,273,273,,,,273,,273,273',
'273,273,273,273,273,,,,,273,273,273,273,273,273,273,,,,,,,,,,273,,,273',
'273,273,273,273,273,273,273,273,273,,273,273,,273,273,273,,,,,,,,,,',
',,,,,,,,,273,,,273,,,273,273,,273,,,,,,273,,,,,,,,273,,,,,273,273,273',
'273,273,273,274,274,274,,274,,,,274,274,,,,274,,274,274,274,274,274',
'274,274,,,,,274,274,274,274,274,274,274,,,,,,,,,,274,,,274,274,274,274',
'274,274,274,274,274,274,,274,274,,274,274,274,,,,,,,,,,,,,,,,,,,,274',
',,274,,,274,274,,274,,,,,,274,,,,,,,,274,,,,,274,274,274,274,274,274',
'275,275,275,,275,,,,275,275,,,,275,,275,275,275,275,275,275,275,,,,',
'275,275,275,275,275,275,275,,,,,,,,,,275,,,275,275,275,275,275,275,275',
'275,275,275,,275,275,,275,275,275,,,,,,,,,,,,,,,,,,,,275,,,275,,,275',
'275,,275,,,,,,275,,,,,,,,275,,,,,275,275,275,275,275,275,276,276,276',
',276,,,,276,276,,,,276,,276,276,276,276,276,276,276,,,,,276,276,276',
'276,276,276,276,,,,,,,,,,276,,,276,276,276,276,276,276,276,276,276,276',
',276,276,,276,276,276,,,,,,,,,,,,,,,,,,,,276,,,276,,,276,276,,276,,',
',,,276,,,,,,,,276,,,,,276,276,276,276,276,276,277,277,277,,277,,,,277',
'277,,,,277,,277,277,277,277,277,277,277,,,,,277,277,277,277,277,277',
'277,,,,,,,,,,277,,,277,277,277,277,277,277,277,277,277,277,,277,277',
',277,277,277,,,,,,,,,,,,,,,,,,,,277,,,277,,,277,277,,277,,,,,,277,,',
',,,,,277,,,,,277,277,277,277,277,277,278,278,278,,278,,,,278,278,,,',
'278,,278,278,278,278,278,278,278,,,,,278,278,278,278,278,278,278,,,',
',,,,,,278,,,278,278,278,278,278,278,278,278,278,278,,278,278,,278,278',
'278,,,,,,,,,,,,,,,,,,,,278,,,278,,,278,278,,278,,,,,,278,,,,,,,,278',
',,,,278,278,278,278,278,278,279,279,279,,279,,,,279,279,,,,279,,279',
'279,279,279,279,279,279,,,,,279,279,279,279,279,279,279,,,,,,,,,,279',
',,279,279,279,279,279,279,279,279,279,279,,279,279,,279,279,279,,,,',
',,,,,,,,,,,,,,,279,,,279,,,279,279,,279,,,,,,279,,,,,,,,279,,,,,279',
'279,279,279,279,279,280,280,280,,280,,,,280,280,,,,280,,280,280,280',
'280,280,280,280,,,,,280,280,280,280,280,280,280,,,,,,,,,,280,,,280,280',
'280,280,280,280,280,280,280,280,,280,280,,280,280,280,,,,,,,,,,,,,,',
',,,,,280,,,280,,,280,280,,280,,,,,,280,,,,,,,,280,,,,,280,280,280,280',
'280,280,281,281,281,,281,,,,281,281,,,,281,,281,281,281,281,281,281',
'281,,,,,281,281,281,281,281,281,281,,,,,,,,,,281,,,281,281,281,281,281',
'281,281,281,281,281,,281,281,,281,281,281,,,,,,,,,,,,,,,,,,,,281,,,281',
',,281,281,,281,,,,,,281,,,,,,,,281,,,,,281,281,281,281,281,281,283,283',
'283,,283,,,,283,283,,,,283,,283,283,283,283,283,283,283,,,,,283,283',
'283,283,283,283,283,,,,,,,,,,283,,,283,283,283,283,283,283,283,283,283',
'283,,283,283,,283,283,283,,,,,,,,,,,,,,,,,,,,283,,,283,283,,283,283',
',283,,,,,,283,,,,,,,,283,,,,,283,283,283,283,283,283,421,421,421,,421',
',,,421,421,,,,421,,421,421,421,421,421,421,421,,,,,421,421,421,421,421',
'421,421,,,,,,,,,,421,,,421,421,421,421,421,421,421,421,421,421,,421',
'421,,421,421,421,,,,,,,,,,,,,,,,,,,,421,,,421,,,421,421,,421,,,,,,421',
',,,,,,,421,,,,,421,421,421,421,421,421,554,554,554,,554,,,,554,554,',
',,554,,554,554,554,554,554,554,554,,,,,554,554,554,554,554,554,554,',
',,,,,,,,554,,,554,554,554,554,554,554,554,554,554,554,,554,554,,554',
'554,554,,,,,,,,,,,,,,,,,,,,554,,,554,,,554,554,,554,,,,,,554,,,,,,,',
'554,,,,,554,554,554,554,554,554,288,288,288,,288,,,,288,288,,,,288,',
'288,288,288,288,288,288,288,,,,,288,288,288,288,288,288,288,,,288,,',
',,,,288,,,288,288,288,288,288,288,288,288,288,288,,288,288,,288,288',
'288,,,,,,,,,,,,,,,,,,,,288,,,288,,,288,288,,288,,,,,,288,,,,,,,,288',
',,,,288,288,288,288,288,288,289,289,289,,289,,,,289,289,,,,289,,289',
'289,289,289,289,289,289,,,,,289,289,289,289,289,289,289,,,289,,,,,,',
'289,,,289,289,289,289,289,289,289,289,289,289,,289,289,,289,289,289',
',,,,,,,,,,,,,,,,,,,289,,,289,,,289,289,,289,,,,,,289,,,,,,,,289,,,,',
'289,289,289,289,289,289,290,290,290,,290,,,,290,290,,,,290,,290,290',
'290,290,290,290,290,,,,,290,290,290,290,290,290,290,,,290,,,,,,,290',
',,290,290,290,290,290,290,290,290,290,290,,290,290,,290,290,290,,,,',
',,,,,,,,,,,,,,,290,,,290,,,290,290,,290,,,,,,290,,,,,,,,290,,,,,290',
'290,290,290,290,290,291,291,291,,291,,,,291,291,,,,291,,291,291,291',
'291,291,291,291,,,,,291,291,291,291,291,291,291,,,291,,,,,,,291,,,291',
'291,291,291,291,291,291,291,291,291,,291,291,,291,291,291,,,,,,,,,,',
',,,,,,,,,291,,,291,,,291,291,,291,,,,,,291,,,,,,,,291,,,,,291,291,291',
'291,291,291,292,292,292,292,292,,,,292,292,,,,292,,292,292,292,292,292',
'292,292,,,,,292,292,292,292,292,292,292,,,292,,,,,,292,292,292,292,292',
'292,292,292,292,292,292,292,292,292,,292,292,,292,292,292,,,,,,,,,,',
',,,,,,,,,292,,,292,,,292,292,,292,,292,,,,292,,,,,,,,292,,,,,292,292',
'292,292,292,292,847,847,847,,847,,,,847,847,,,,847,,847,847,847,847',
'847,847,847,,,,,847,847,847,847,847,847,847,,,,,,,,,,847,,,847,847,847',
'847,847,847,847,847,847,847,,847,847,,847,847,847,,,,,,,,,,,,,,,,,,',
',847,,,847,,,847,847,,847,,,,,,847,,,,,,,,847,,,,,847,847,847,847,847',
'847,551,551,551,,551,,,,551,551,,,,551,,551,551,551,551,551,551,551',
',,,,551,551,551,551,551,551,551,,,,,,,,,,551,,,551,551,551,551,551,551',
'551,551,551,551,,551,551,,551,551,551,,,,,,,,,,,,,,,,,,,,551,,,551,',
',551,551,,551,,,,,,551,,,,,,,,551,,,,,551,551,551,551,551,551,451,451',
'451,,451,,,,451,451,,,,451,,451,451,451,451,451,451,451,,,,,451,451',
'451,451,451,451,451,,,451,,,,,,,451,,,451,451,451,451,451,451,451,451',
'451,451,,451,451,,451,451,451,,,,,,,,,,,,,,,,,,,,451,,,451,,,451,451',
',451,,,,,,451,,,,,,,,451,,,,,451,451,451,451,451,451,363,363,363,,363',
',,,363,363,,,,363,,363,363,363,363,363,363,363,,,,,363,363,363,363,363',
'363,363,,,,,,,,,,363,,,363,363,363,363,363,363,363,363,363,363,,363',
'363,,363,363,363,,,,,,,,,,,,,,,,,,,,363,,,363,,,363,363,,363,,363,,',
',363,,,,,,,,363,,,,,363,363,363,363,363,363,24,24,24,,24,,,,24,24,,',
',24,,24,24,24,24,24,24,24,,,,,24,24,24,24,24,24,24,,,,,,,,,,24,,,24',
'24,24,24,24,24,24,24,24,24,,24,24,,24,24,24,,,,,,,,,,,,,,,,,,,,24,,',
'24,,,24,24,,24,,,,,,24,,,,,,,,24,,,,,24,24,24,24,24,24,388,388,388,',
'388,,,,388,388,,,,388,,388,388,388,388,388,388,388,,,,,388,388,388,388',
'388,388,388,,,,,,,,,,388,,,388,388,388,388,388,388,388,388,388,388,',
'388,388,,388,388,388,,,,,,,,,,,,,,,,,,,,388,,,388,,,388,388,,388,,388',
',,,388,,,,,,,,388,,,,,388,388,388,388,388,388,452,452,452,,452,,,,452',
'452,,,,452,,452,452,452,452,452,452,452,,,,,452,452,452,452,452,452',
'452,,,,,,,,,,452,,,452,452,452,452,452,452,452,452,452,452,,452,452',
',452,452,452,,,,,,,,,,,,,,,,,,,,452,,,452,,,452,452,,452,,,,,,452,,',
',,,,,452,,,,,452,452,452,452,452,452,887,887,887,,887,,,,887,887,,,',
'887,,887,887,887,887,887,887,887,,,,,887,887,887,887,887,887,887,,,',
',,,,,,887,,,887,887,887,887,887,887,887,887,887,887,,887,887,,887,887',
'887,,,,,,,,,,,,,,,,,,,,887,,,887,,,887,887,,887,,887,,887,,887,,,,,',
',,887,,,,,887,887,887,887,887,887,536,536,536,,536,,,,536,536,,,,536',
',536,536,536,536,536,536,536,,,,,536,536,536,536,536,536,536,,,536,',
',,,,,536,,,536,536,536,536,536,536,536,536,536,536,,536,536,,536,536',
'536,,,,,,,,,,,,,,,,,,,,536,,,536,,,536,536,,536,,,,,,536,,,,,,,,536',
',,,,536,536,536,536,536,536,303,303,303,,303,,,,303,303,,,,303,,303',
'303,303,303,303,303,303,,,,,303,303,303,303,303,303,303,,,,,,,,,,303',
',,303,303,303,303,303,303,303,303,303,303,,303,303,,303,303,303,,,,',
',,,,,,,,,,,,,,,303,,,303,,,303,303,,303,,303,,303,,303,,,,,,,,303,,',
',,303,303,303,303,303,303,304,304,304,,304,,,,304,304,,,,304,,304,304',
'304,304,304,304,304,,,,,304,304,304,304,304,304,304,,,,,,,,,,304,,,304',
'304,304,304,304,304,304,304,304,304,,304,304,,304,304,304,,,,,,,,,,',
',,,,,,,,,304,,,304,,304,304,304,,304,,304,,304,,304,,,,,,,,304,,,,,304',
'304,304,304,304,304,307,307,307,,307,,,,307,307,,,,307,,307,307,307',
'307,307,307,307,,,,,307,307,307,307,307,307,307,,,,,,,,,,307,,,307,307',
'307,307,307,307,307,307,307,307,,307,307,,307,307,307,,,,,,,,,,,,,,',
',,,,,307,,,307,,,307,307,,307,,307,,307,,307,,,,,,,,307,,,,,307,307',
'307,307,307,307,861,861,861,,861,,,,861,861,,,,861,,861,861,861,861',
'861,861,861,,,,,861,861,861,861,861,861,861,,,,,,,,,,861,,,861,861,861',
'861,861,861,861,861,861,861,,861,861,,861,861,861,,,,,,,,,,,,,,,,,,',
',861,,,861,,,861,861,,861,,861,,,,861,,,,,,,,861,,,,,861,861,861,861',
'861,861,312,312,312,,312,,,,312,312,,,,312,,312,312,312,312,312,312',
'312,,,,,312,312,312,312,312,312,312,,,,,,,,,,312,,,312,312,312,312,312',
'312,312,312,312,312,,312,312,,312,312,312,,,,,,,,,,,,,,,,,,,,312,,,312',
',,312,312,,312,,312,,,,312,,,,,,,,312,,,,,312,312,312,312,312,312,866',
'866,866,,866,,,,866,866,,,,866,,866,866,866,866,866,866,866,,,,,866',
'866,866,866,866,866,866,,,,,,,,,,866,,,866,866,866,866,866,866,866,866',
'866,866,,866,866,,866,866,866,,,,,,,,,,,,,,,,,,,,866,,,866,,,866,866',
',866,,,,,,866,,,,,,,,866,,,,,866,866,866,866,866,866,347,347,347,,347',
',,,347,347,,,,347,,347,347,347,347,347,347,347,,,,,347,347,347,347,347',
'347,347,,,347,,,,,,,347,,,347,347,347,347,347,347,347,347,347,347,,347',
'347,,347,347,347,,,,,,,,,,,,,,,,,,,,347,,,347,,,347,347,,347,,,,,,347',
',,,,,,,347,,,,,347,347,347,347,347,347,5,5,5,,5,,,,5,5,,,,5,,5,5,5,5',
'5,5,5,,,,,5,5,5,5,5,5,5,,,,,,,,,,5,,,5,5,5,5,5,5,5,5,5,5,,5,5,,,,5,',
'424,424,424,424,424,424,424,424,424,424,424,,424,424,,,424,424,5,,,5',
',,5,5,,5,,5,,424,,424,,424,424,424,424,424,424,424,,424,,,5,5,5,5,5',
'5,526,526,526,,526,424,424,,526,526,,,,526,,526,526,526,526,526,526',
'526,,,,,526,526,526,526,526,526,526,,,,,,,,,,526,,,526,526,526,526,526',
'526,526,526,526,526,,526,526,,526,526,526,,,,,,,,,,,,,,,,,,,,526,,,526',
'526,,526,526,,526,,526,,526,,526,,,,,,,,526,,,,,526,526,526,526,526',
'526,17,17,17,,17,,,,17,17,,,,17,,17,17,17,17,17,17,17,,,,,17,17,17,17',
'17,17,17,,,,,,,,,,17,,,17,17,17,17,17,17,17,17,17,17,,17,17,,17,17,17',
',,,,,,,,,,,,,,,,,,,17,,,17,,,17,17,,17,,,,,,17,,,,,,,,17,,,,,17,17,17',
'17,17,17,319,319,319,,319,,,,319,319,,,,319,,319,319,319,319,319,319',
'319,,,,,319,319,319,319,319,319,319,,,,,,,,,,319,,,319,319,319,319,319',
'319,319,319,319,319,,319,319,,319,319,319,,,,,,,,,,,,,,,,,,,,319,,,319',
',,319,319,,319,,,,,,319,,,,,,,,319,,,,,319,319,319,319,319,319,320,320',
'320,,320,,,,320,320,,,,320,,320,320,320,320,320,320,320,,,,,320,320',
'320,320,320,320,320,,,,,,,,,,320,,,320,320,320,320,320,320,320,320,320',
'320,,320,320,,320,320,320,,,,,,,,,,,,,,,,,,,,320,,,320,,,320,320,,320',
',320,,,,320,,,,,,,,320,,,,,320,320,320,320,320,320,521,521,521,,521',
',,,521,521,,,,521,,521,521,521,521,521,521,521,,,,,521,521,521,521,521',
'521,521,,,,,,,,,,521,,,521,521,521,521,521,521,521,521,521,521,,521',
'521,,521,521,521,,,,,,,,,,,,,,,,,,,,521,,,521,521,,521,521,,521,,521',
',521,,521,,,,,,,,521,,,,,521,521,521,521,521,521,867,867,867,,867,,',
',867,867,,,,867,,867,867,867,867,867,867,867,,,,,867,867,867,867,867',
'867,867,,,,,,,,,,867,,,867,867,867,867,867,867,867,867,867,867,,867',
'867,,867,867,867,,,,,,,,,,,,,,,,,,,,867,,,867,,,867,867,,867,,,,,,867',
',,,,,,,867,,,,,867,867,867,867,867,867,519,519,519,,519,,,,519,519,',
',,519,,519,519,519,519,519,519,519,,,,,519,519,519,519,519,519,519,',
',,,,,,,,519,,,519,519,519,519,519,519,519,519,519,519,,519,519,,519',
'519,519,,,,,,,,,,,,,,,,,,,,519,,,519,519,,519,519,,519,,519,,519,,519',
',,,,,,,519,,,,,519,519,519,519,519,519,510,510,510,,510,,,,510,510,',
',,510,,510,510,510,510,510,510,510,,,,,510,510,510,510,510,510,510,',
',,,,,,,,510,,,510,510,510,510,510,510,510,510,510,510,,510,510,,510',
'510,510,,,,,,,,,,,,,,,,,,,,510,,,510,,,510,510,,510,,,,,,510,,,,,,,',
'510,,,,,510,510,510,510,510,510,330,330,330,,330,,,,330,330,,,,330,',
'330,330,330,330,330,330,330,,,,,330,330,330,330,330,330,330,,,,,,,,',
',330,,,330,330,330,330,330,330,330,330,330,330,,330,330,,330,330,330',
',,,,,,,,,,,,,,,,,,,330,,,330,,,330,330,,330,,,,,,330,,,,,,,,330,,,,',
'330,330,330,330,330,330,13,13,13,,13,,,,13,13,,,,13,,13,13,13,13,13',
'13,13,,,,,13,13,13,13,13,13,13,,,,,,,,,,13,,,13,13,13,13,13,13,13,13',
'13,13,,13,13,,13,13,13,,,,,,,,,,,,,,,,,,,,13,,,13,,,13,13,,13,,13,,13',
',13,,,,,,,,13,,,,,13,13,13,13,13,13,496,496,496,,496,,,,496,496,,,,496',
',496,496,496,496,496,496,496,,,,,496,496,496,496,496,496,496,,,,,,,',
',,496,,,496,496,496,496,496,496,496,496,496,496,,496,496,,496,496,496',
',,,,,,,,,,,,,,,,,,,496,,,496,,,496,496,,496,,,,,,496,,,,,,,,496,,,,',
'496,496,496,496,496,496,493,493,493,,493,,,,493,493,,,,493,,493,493',
'493,493,493,493,493,,,,,493,493,493,493,493,493,493,,,,,,,,,,493,,,493',
'493,493,493,493,493,493,493,493,493,,493,493,,493,493,493,,,,,,,,,,',
',,,,,,,,,493,,,493,,,493,493,,493,,493,,,,493,,,,,,,,493,,,,,493,493',
'493,493,493,493,490,490,490,,490,,,,490,490,,,,490,,490,490,490,490',
'490,490,490,,,,,490,490,490,490,490,490,490,,,,,,,,,,490,,,490,490,490',
'490,490,490,490,490,490,490,,490,490,,490,490,490,,,,,,,,,,,,,,,,,,',
',490,,,490,,,490,490,,490,,,,,,490,,,,,,,,490,,,,,490,490,490,490,490',
'490,339,339,339,,339,,,,339,339,,,,339,,339,339,339,339,339,339,339',
',,,,339,339,339,339,339,339,339,,,,,,,,,,339,,,339,339,339,339,339,339',
'339,339,339,339,,339,339,,339,339,339,,,,,,,,,,,,,,,,,,,,339,,,339,',
',339,339,,339,,339,,,,339,,,,,,,,339,,,,,339,339,339,339,339,339,10',
'10,10,10,10,,,,10,10,,,,10,,10,10,10,10,10,10,10,,,,,10,10,10,10,10',
'10,10,,,10,,,,,,10,10,10,10,10,10,10,10,10,10,10,10,10,10,,10,10,,10',
'10,10,,,,,,,,,,,,,,,,,,,,10,,,10,,,10,10,,10,,10,,,,10,,,,,,,,10,,,',
',10,10,10,10,10,10,476,476,476,,476,,,,476,476,,,,476,,476,476,476,476',
'476,476,476,,,,,476,476,476,476,476,476,476,,,476,,,,,,,476,,,476,476',
'476,476,476,476,476,476,476,476,,476,476,,476,476,476,,,,,,,,,,,,,,',
',,,,,476,,,476,,,476,476,,476,,476,,476,,476,,,,,,,,476,,,,,476,476',
'476,476,476,476,342,342,342,,342,,,,342,342,,,,342,,342,342,342,342',
'342,342,342,,,,,342,342,342,342,342,342,342,,,342,,,,,,,342,,,342,342',
'342,342,342,342,342,342,342,342,,342,342,,342,342,342,,,,,,,,,,,,,,',
',,,,,342,,,342,,,342,342,,342,,,,,,342,,,,,,,,342,,,,,342,342,342,342',
'342,342,9,9,9,,9,,,,9,9,,,,9,,9,9,9,9,9,9,9,,,,,9,9,9,9,9,9,9,,,,,,',
',,,9,,,9,9,9,9,9,9,9,9,9,9,,9,9,,,,9,,718,718,718,718,718,718,718,718',
'718,718,718,,718,718,,,718,718,9,,,9,,,9,9,,9,,9,,718,,718,,718,718',
'718,718,718,718,718,,718,,,9,9,9,9,9,9,660,660,660,,660,718,,,660,660',
',,,660,,660,660,660,660,660,660,660,,,,,660,660,660,660,660,660,660',
',,,,,,,,,660,,,660,660,660,660,660,660,660,660,660,660,,660,660,,660',
'660,660,,,,,,,,,,,,,,,,,,,,660,,,660,,,660,660,,660,,,,,,660,,,,,,,',
'660,,,,,660,660,660,660,660,660,413,413,413,413,413,413,413,413,,,413',
'413,413,413,413,,,413,413,413,413,413,413,413,,,413,413,413,413,413',
'413,413,413,413,413,413,413,413,413,413,413,413,413,413,413,413,413',
'413,,,413,,,,,,,,413,413,,413,413,413,413,,413,413,,,413,,,,,413,413',
'413,413,,,,,,,,,,,,,413,413,,413,413,413,413,413,413,413,413,413,,413',
',,413,413,31,31,31,31,31,31,31,31,,,31,31,31,31,31,,,31,31,31,31,31',
'31,31,,,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31',
'31,31,31,,,31,,,,,,,,31,31,,31,31,31,31,,31,31,,,31,,,,,31,31,31,31',
',,,,,,,,,,,,31,31,,31,31,31,31,31,31,31,31,31,,31,,,31,31,28,28,28,28',
'28,28,28,28,,,28,28,28,28,28,,,28,28,28,28,28,28,28,,,28,28,28,28,28',
'28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,,28,,,,,,,',
'28,28,,28,28,28,28,,28,28,,,28,,,,,28,28,28,28,,,,,,,,,,,,,28,28,,28',
'28,28,28,28,28,28,28,28,,28,,,28,28,603,603,603,603,603,603,603,603',
',,603,603,603,603,603,,,603,603,603,603,603,603,603,,,603,603,603,603',
'603,603,603,603,603,603,603,603,603,603,603,603,603,603,603,603,603',
'603,603,,,603,,,,,,,,603,603,,603,603,603,603,,603,603,,,603,,,,,603',
'603,603,603,,,,,,,,,,,,,603,603,,603,603,603,603,603,603,603,603,603',
',603,,,603,603,581,581,581,581,581,581,581,581,,,581,581,581,581,581',
',,581,581,581,581,581,581,581,,,581,581,581,581,581,581,581,581,581',
'581,581,581,581,581,581,581,581,581,581,581,581,581,581,,,581,,,,,,',
',581,581,,581,581,581,581,,581,581,,,581,,,,,581,581,581,581,,,,,,,',
',,,,,581,581,,581,581,581,581,581,581,581,581,581,,581,,,581,79,79,79',
'79,79,79,79,79,,,79,79,79,79,79,,,79,79,79,79,79,79,79,,,79,79,79,79',
'79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79',
',,,,,,79,79,,79,79,79,79,,79,79,,,79,,,,,79,79,79,79,,,,,,,,,,,,,79',
'79,,79,79,79,79,79,79,79,79,79,,79,,,79,25,25,25,25,25,25,25,25,,,25',
'25,25,25,25,,,25,25,25,25,25,25,25,,,25,25,25,25,25,25,25,25,25,25,25',
'25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,,,,,,,25,25,,25,25,25',
'25,,25,25,,,25,,,,,25,25,25,25,,,,,,25,,,,,,,25,25,,25,25,25,25,25,25',
'25,25,25,,25,,,25,244,244,244,244,244,244,244,244,,,244,244,244,244',
'244,,,244,244,244,244,244,244,244,,,244,244,244,244,244,244,244,244',
'244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244,244',
'244,244,,,,,,,244,244,,244,244,244,244,,244,244,,,244,,,,,244,244,244',
'244,,,,,,,411,,,411,411,411,244,244,,244,244,244,244,244,244,244,244',
'244,,244,,,244,631,631,631,631,631,631,631,631,631,631,631,,631,631',
',411,631,631,,,,631,411,411,411,411,,,,,,631,,631,,631,631,631,631,631',
'631,631,,631,,,,,365,365,,,365,,,,,631,,,365,365,631,365,365,365,365',
',365,365,,,365,,,,,365,365,365,365,,,,,,,,,,,,,365,365,,365,365,365',
'365,365,365,365,365,365,,365,301,301,365,,301,,,,,,,,301,301,,301,301',
'301,301,,301,301,,,301,,,,,301,301,301,301,,,,,,,,,,,,,301,301,,301',
'301,301,301,301,301,301,301,301,,301,340,340,301,,340,,,,,,,,340,340',
',340,340,340,340,,340,340,,,340,,,,,340,340,340,340,,,,,,,,,,,,,340',
'340,,340,340,340,340,340,340,340,340,340,,340,382,382,340,,382,,,,,',
',,382,382,,382,382,382,382,,382,382,,,382,,,,,382,382,382,382,,,,,,',
',,,,,,382,382,,382,382,382,382,382,382,382,382,382,,382,404,404,382',
',404,,,,,,,,404,404,,404,404,404,404,,404,404,,,404,,,,,404,404,404',
'404,,,,,,,,,,,,,404,404,,404,404,404,404,404,404,404,404,404,,404,403',
'403,404,,403,,,,,,,,403,403,,403,403,403,403,,403,403,,,403,,,,,403',
'403,403,403,,,,,,,,,,,,,403,403,,403,403,403,403,403,403,403,403,403',
',403,364,364,403,,364,,,,,,,,364,364,,364,364,364,364,,364,364,,,364',
',,,,364,364,364,364,,,,,,,,,,,,,364,364,,364,364,364,364,364,364,364',
'364,364,,364,383,383,364,,383,,,,,,,,383,383,,383,383,383,383,,383,383',
',,383,,,,,383,383,383,383,,,,,,,,,,,,,383,383,,383,383,383,383,383,383',
'383,383,383,,383,579,579,383,,579,,,,,,,,579,579,,579,579,579,579,,579',
'579,,,579,,,,,579,579,579,579,,,,,,,,,,,,,579,579,,579,579,579,579,579',
'579,579,579,579,,579,578,578,579,,578,,,,,,,,578,578,,578,578,578,578',
',578,578,,,578,,,,,578,578,578,578,,,,,,,,,,,,,578,578,,578,578,578',
'578,578,578,578,578,578,,578,341,341,578,,341,,,,,,,,341,341,,341,341',
'341,341,,341,341,,,341,,,,,341,341,341,341,,,,,,,,,,,,,341,341,,341',
'341,341,341,341,341,341,341,341,,341,637,637,341,,637,,,,,,,,637,637',
',637,637,637,637,,637,637,,,637,,,,,637,637,637,637,,,,,,,,,,,,,637',
'637,,637,637,637,637,637,637,637,637,637,,637,390,390,637,,390,,,,,',
',,390,390,,390,390,390,390,,390,390,,,390,,,,,390,390,390,390,,,,,,',
',,,,,,390,390,,390,390,390,390,390,390,390,390,390,,390,302,302,390',
',302,,,,,,,,302,302,,302,302,302,302,,302,302,,,302,,,,,302,302,302',
'302,,,,,,,,,,,,,302,302,,302,302,302,302,302,302,302,302,302,,302,389',
'389,302,,389,,,,,,,,389,389,,389,389,389,389,,389,389,,,389,,,,,389',
'389,389,389,,,,,,,,,,,,,389,389,,389,389,389,389,389,389,389,389,389',
',389,862,862,389,,862,,,,,,,,862,862,,862,862,862,862,,862,862,,,862',
',,,,862,862,862,862,,,,,,,,,,,,,862,862,,862,862,862,862,862,862,862',
'862,862,,862,639,639,862,,639,,,,,,,,639,639,,639,639,639,639,,639,639',
',,639,,,,,639,639,639,639,,,,,,,,,,,,,639,639,,639,639,639,639,639,639',
'639,639,639,,639,863,863,639,,863,,,,,,,,863,863,,863,863,863,863,,863',
'863,,,863,,,,,863,863,863,863,,,,,,,,,,,,,863,863,,863,863,863,863,863',
'863,863,863,863,,863,,,863,35,35,35,35,35,35,35,35,35,35,35,,35,35,',
',35,35,,,,,,,,,,,,,,35,,35,,35,35,35,35,35,35,35,,35,,,740,740,740,740',
'740,740,740,740,740,740,740,35,740,740,,,740,740,,,,,,,,,,,,,,740,,740',
',740,740,740,740,740,740,740,,740,,,760,760,760,760,760,760,760,760',
'760,760,760,740,760,760,,,760,760,,,,,,,,,,,,,,760,,760,,760,760,760',
'760,760,760,760,,760,,,815,815,815,815,815,815,815,815,815,815,815,760',
'815,815,,,815,815,,,,,,,,,,,,,,815,,815,,815,815,815,815,815,815,815',
',815,,,121,121,121,121,121,121,121,121,121,121,121,815,121,121,,,121',
'121,,,,,,,,,,,,,,121,,121,,121,121,121,121,121,121,121,,121,,,611,611',
'611,611,611,611,611,611,611,611,611,121,611,611,,,611,611,,,,,,,,,,',
',,,611,,611,,611,611,611,611,611,611,611,,611,,,450,450,450,450,450',
'450,450,450,450,450,450,611,450,450,,,450,450,,,,,,,,,,,,,,450,,450',
',450,450,450,450,450,450,450,,450,,,508,508,508,508,508,508,508,508',
'508,508,508,450,508,508,,,508,508,,,,,,,,,,,,,,508,,508,,508,508,508',
'508,508,508,508,,508,,,755,755,755,755,755,755,755,755,755,755,755,508',
'755,755,,,755,755,,,,,,,,,,,,,,755,,755,,755,755,755,755,755,755,755',
',755,,,753,753,753,753,753,753,753,753,753,753,753,755,753,753,,,753',
'753,,,,,,,,,,,,,,753,,753,,753,753,753,753,753,753,753,,753,,,356,356',
'356,356,356,356,356,356,356,356,356,753,356,356,,,356,356,,,,,,,,,,',
',,,356,,356,,356,356,356,356,356,356,356,,356,,,757,757,757,757,757',
'757,757,757,757,757,757,356,757,757,,,757,757,,,,,,,,,,,,,,757,,757',
',757,757,757,757,757,757,757,,757,,,,,,,,,,,,,,757' ]
        racc_action_check = arr = Array.new(22729, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_action_pointer = [
   nil,  4074,  1015,   nil,   -79, 17874,   nil,   883,  8789, 19944,
 19599,   nil,   882, 19024,   881,   919,   nil, 18104,   nil,   nil,
   261,   nil,   nil,   308, 16494, 20832,   nil,   838, 20394, 12009,
   491, 20284,   nil,   411,   nil, 22101,   783,   nil,   852,   877,
   nil,   656,   nil,   791,   nil,   nil, 10974,   nil,   nil,   nil,
  8904,  2450,   386,  7524,   nil,  7409,  7179,  7064,   nil,  6374,
   nil,  6144,   nil,   nil,   nil,   465,   nil,   768,  5569,   nil,
   nil,   nil,   nil,  4764,   nil,  4649,   763,   365,   nil, 20723,
   783,  4419,   nil,   nil,   -22,   479,   nil,    68,   nil,   nil,
   nil,  4879,   nil,  4994,   nil,   835,   107,  5339,   116,   nil,
   nil,   796,   103,   181,   667,   739,   nil,   702,   701,   nil,
   nil,   nil,   391,   -23,   176,   600,   -63,  6949,   nil,   605,
   208, 22285,   505,   nil,   nil,   nil,  2682,  7639,   395,   348,
   372,   321,   347,  8329,   350,   238,   363,   232,  2334,   364,
  9134,   631,   -56,    19,   nil,   nil,   nil,  9594,   nil,   440,
  9824,  9939, 10054,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   273,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   -48,   nil,   nil,   nil,   148,   nil,   nil,   nil,   383,
   -51,   nil,   nil,   nil,   nil,   274,   nil,   nil,   nil,   nil,
   360,   385,   nil,   361,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   533,   nil,   nil,   nil, 20941,   432,   nil,   nil,   nil,   nil,
   480,   nil,   438,   507,   515,  1058, 12124, 12239, 12354, 12469,
 12584, 12699, 12814, 12929, 13044, 13159, 13274, 13389,  4189, 13619,
 13734, 13849, 13964, 14079, 14194, 14309, 14424, 14539, 14654, 14769,
 14884, 14999,   nil, 15114,   -72,   nil,   nil,   552, 15459, 15574,
 15689, 15804, 15919,  1522,   nil,   605,    98,   668,   942,   694,
   697, 21110, 21818, 17069, 17184,   nil,   nil, 17299,   nil,   nil,
   nil,    82, 17529,   586,   nil,   673,   324,   200,   727, 18219,
 18334,   532,   690,   439,   nil,   181,   nil,   nil,   nil,   nil,
 18909,   nil,   393,   756,   -83,   138,   nil,   nil,   nil, 19484,
 21169, 21641, 19829,   nil,   832,   829,   150, 17759,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil, 22561,   nil,   nil,   nil,
   nil,   890,   158, 16379, 21405, 21051,   114,   nil,   nil,   nil,
 11779,   nil, 11664,   204, 11549,   nil, 11319,   nil, 11089,   nil,
 10859,  8559, 21228, 21464,   885,   nil,   478,   -65, 16609, 21877,
 21759,   nil,   887,   nil,   nil,  5454,   nil,     5,  1058,   -21,
   475,   nil,   826, 21346, 21287,   nil,   nil,   nil,   nil,   nil,
   nil, 20980,  8444, 20174,   nil,   nil,   nil,   711,   nil,   nil,
 13504, 15229,   999,   977, 17875,   710,   918,  1522,  1870,   917,
  1986,   456,   481,   826,   279,   566,  1290,  1174,  1058,   942,
  1406,  2566,  1638,   916,  1754,  2450,  2334,   914,  2218,  2102,
 22377, 16264, 16724,   248,  3958,   nil,   nil,   nil,   nil,   nil,
   845,   nil,   nil,   923,  3842,   804,   841,   nil,   nil,   nil,
   nil,   nil,   106,   161,   nil,   nil, 19714,   829,   nil,   822,
   876,   774,   -71,   771,  3146,   nil,   nil,  4535,   768,   nil,
 19369,   765,   nil, 19254,   nil,   nil, 19139,   nil,   nil,  9135,
   nil,   738,   nil,   853,  1290,   nil,   822,   nil, 22423,   nil,
 18794,   nil,   nil,   nil,   nil,   nil,    81,   210,   743, 18679,
   237, 18449,   nil,     0,   716,   307, 17989,   138,    63,   nil,
   nil,   nil,   nil,    61,  1174,   580, 16954,   707,   160,   700,
    93,    26,   683,   -14,   nil,   nil,   nil,  4880,   nil,   639,
   589, 16149,   603,   nil, 15344,   494,   595,   710,   -31,   -62,
   nil,   481,   nil,   484,  1174,   362,   247,   228,   nil,   641,
   606,   nil,   nil,   nil,   nil,   nil,   247, 11434, 21582, 21523,
  1406, 20614,   509,   366,   315,   255,   254,   nil,   nil,  2218,
   nil,   nil,   nil,   nil,   nil,   nil,   298,   nil,   274,   nil,
   651,   -17,   nil, 20504,   196,   190,   nil,   204, 10744, 10629,
   -10, 22331,   nil,   nil, 10514,   nil,    96,   nil,   nil,   594,
   -36,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   132,
    28, 20988,   -28, 10399,   nil,   nil,   -59, 21700,   752, 21995,
 10284,    65, 10169,  9709,   nil,    47,   nil,  9479,   nil,   nil,
   145,  9364,   205,   nil,   nil,   -67,  9249,  9019,   nil,   173,
 20059,   nil,   198,  8674,   nil,   nil,   nil,   nil,   -57,   nil,
   252,   nil,   nil,   nil,   nil,   nil,    29,    34,   nil,  8214,
   282,   285,   317,  8099,  7984,  7869,   328,   546,   nil,  7754,
  2798,   471,   nil,   942,   577,   564,   nil,   nil,   nil,  4130,
   nil,   410,   566,   nil,  7294,   602,   nil,   nil,   505,   567,
   nil,  2914,   672,   nil,   nil,   598,   560,   nil, 19945,   nil,
  3030,   587,   nil,   nil,   690,  6834,   nil,   629,  6719,   nil,
   nil,  6604,   600,   nil,   649,   nil,   650,   728,   -45,   758,
 22147,   655,  6489,   nil,  9595,   nil,   660,    21,  6259,   nil,
  3262,  3378,  5914, 22515,   nil, 22469,   nil, 22607,   nil,   nil,
 22193,   nil,  3494,   nil,  3610,   nil,   nil,  5224,   nil,   nil,
  5109,   nil,   594,   830,   nil,   nil, 10526,   716,   724,   nil,
   nil,   726,   730,   nil,   nil,   nil,   773,   nil,   nil,   nil,
   nil,  3726,    50,   nil,  4534,   857,   nil,   nil,    84,   nil,
   nil,   742,   757,  4304,  5799,   nil,   804,   nil,   nil,   nil,
  6029,  2566,   nil,   886,   787, 22239,   nil,   889,  2102,   891,
  1986,  9825,  1870,   nil,   nil,  1754,   nil,   310,   nil,   nil,
   nil,   nil,  1638,   nil,   861,   275,   205,   199,   nil,   826,
   nil, 11204,   nil, 11894,   810,   823,   nil, 16034,   448,   nil,
   nil,   nil,   846,   nil,   947,   nil,   949,   957,   842,   962,
   134, 17414, 21936, 22054,   376,   857, 17644, 18564,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   911,    37,   462,     8,    34,   nil,   nil, 16839,   886,   887,
   477,  5684,   nil,   nil,   890,   nil ]

racc_action_default = [
    -1,  -501,  -503,  -400,  -273,  -503,  -417,  -390,  -322,   -65,
  -503,  -418,  -396,  -323,  -503,  -307,  -379,  -503,   -71,  -314,
   -34,  -324,  -381,  -432,  -503,  -503,  -325,  -382,  -503,  -503,
  -490,  -503,  -383,  -503,  -275,   -40,  -492,    -5,  -503,   -42,
   -20,    -6,   -43,  -503,  -266,  -431,  -285,  -267,  -430,  -380,
  -503,  -501,   -47,  -288,  -268,  -421,  -356,  -503,  -269,  -503,
  -427,  -274,  -270,  -426,  -423,  -216,  -271,  -503,  -503,  -428,
  -422,  -272,   -35,  -501,  -429,  -424,  -503,  -490,  -425,  -400,
  -503,  -501,  -434,  -398,  -291,  -503,  -295,  -251,  -435,  -400,
  -298,   -70,   -61,  -503,    -2,  -503,  -503,  -503,  -273,  -322,
  -323,  -503,  -432,  -503,  -492,  -503,  -285,  -288,  -356,  -326,
  -338,  -339,  -503,  -350,  -503,  -503,  -273,  -503,  -238,  -261,
  -432,  -217,  -503,  -230,   -45,  -475,  -501,  -503,  -503,  -502,
  -503,  -502,  -503,  -503,   -82,   -66,   -75,  -503,  -501,  -503,
   -68,    -8,  -503,  -503,   -46,   -73,  -310,  -503,  -209,  -503,
  -503,  -503,  -503,  -193,  -168,  -150,  -121,  -169,  -139,  -170,
  -153,  -108,  -141,  -129,  -171,  -126,  -152,  -130,  -157,  -432,
  -172,  -127,  -142,  -117,  -159,  -124,  -136,  -128,  -165,  -118,
  -151,  -123,  -138,  -144,  -119,  -143,  -503,  -317,  -125,  -158,
  -120,  -134,  -109,  -148,  -115,   -99,  -135,  -147,  -160,  -113,
  -100,  -132,  -110,  -167,  -106,  -133,  -111,  -470,  -162,   -96,
  -161,  -107,   -98,  -114,  -163,  -154,  -116,  -146,  -469,  -145,
  -164,   -97,  -140,  -149,  -131,  -112,  -166,  -137,  -156,  -122,
  -155,  -384,  -101,  -132,  -102,  -133,    -9,   -96,  -161,  -154,
  -503,  -164,   -97,  -149,  -503,  -194,  -499,  -498,    -4,  -497,
  -491,  -103,   -14,  -419,  -420,  -501,  -503,  -503,  -503,  -503,
  -503,  -503,  -503,  -503,  -503,  -503,  -503,  -503,  -503,  -503,
  -503,  -503,  -503,  -503,  -503,  -503,  -503,  -503,  -503,  -503,
  -503,  -503,  -493,  -503,  -281,  -347,  -344,  -503,  -503,  -503,
  -503,  -503,  -503,  -501,   -44,   -41,  -503,  -503,  -501,   -61,
  -503,  -503,  -503,  -503,  -503,   -60,  -355,  -501,   -59,  -208,
   -39,  -503,  -503,  -277,  -218,  -492,  -494,  -494,  -503,  -503,
  -503,  -503,  -491,  -490,  -412,  -503,  -414,  -413,  -415,  -411,
  -503,  -472,  -494,  -503,  -494,  -503,  -360,  -292,  -357,  -501,
  -503,  -503,  -503,  -290,  -503,   -53,  -503,  -503,   -69,   -38,
   896,  -402,  -401,  -387,  -405,  -403,  -182,   -30,  -304,  -419,
  -420,  -503,  -281,  -501,  -503,  -503,  -503,  -392,  -389,  -388,
  -503,  -258,  -503,  -281,  -503,  -231,  -503,  -260,  -503,  -233,
  -503,  -501,  -503,  -503,  -502,   -74,   -81,  -503,  -501,  -503,
  -503,   -67,  -503,  -395,  -394,  -503,   -94,  -503,   -91,  -503,
  -503,  -273,   -92,  -503,  -503,  -315,   -36,   -37,  -489,  -319,
  -488,  -450,  -503,  -503,   -13,   -12,   -11,    -7,  -500,  -104,
  -503,  -503,  -503,  -371,  -503,  -203,  -189,  -184,  -204,  -188,
  -205,  -185,  -210,  -200,  -186,  -211,  -202,  -201,  -212,  -199,
  -213,  -195,  -206,  -187,  -207,  -196,  -197,  -190,  -198,  -183,
  -214,  -503,  -503,  -501,  -501,   -15,   -16,   -17,   -18,   -19,
  -503,  -329,  -328,  -327,  -501,   -62,  -503,  -279,  -484,  -481,
  -483,  -482,  -251,  -251,  -252,  -253,  -254,  -503,  -287,  -503,
  -230,  -492,  -492,  -502,  -501,   -31,  -261,  -173,  -503,   -23,
  -503,  -492,  -219,  -496,  -495,  -220,  -496,  -222,  -283,  -492,
   -33,   -32,   -24,  -503,  -501,  -363,  -503,  -416,  -175,   -25,
  -496,  -474,  -284,  -473,  -399,  -385,  -501,  -501,  -503,  -487,
  -481,  -486,  -354,  -482,  -251,  -481,  -501,  -482,  -503,  -351,
   -54,   -50,  -386,  -503,  -501,  -503,  -503,  -503,  -485,  -503,
  -280,  -481,  -501,  -482,  -393,  -391,  -477,  -173,  -259,  -262,
  -502,  -503,  -503,  -476,  -503,  -503,  -485,  -280,  -481,  -482,
  -237,  -503,   -72,  -503,   -78,   -80,  -481,  -482,  -397,  -311,
  -503,  -437,  -308,  -436,   -93,   -91,   -92,  -501,  -503,  -503,
  -501,  -503,  -503,  -468,  -468,  -468,  -454,  -461,  -449,  -501,
  -460,  -455,  -465,  -458,  -452,  -464,  -463,  -451,  -503,  -453,
  -450,  -492,   -10,  -503,  -191,  -192,  -276,  -501,  -501,  -503,
  -503,  -181,  -345,  -342,  -503,  -340,  -503,   -22,  -330,  -501,
   -62,  -229,  -349,  -228,   -49,  -348,   -48,  -250,  -256,  -503,
  -503,   -40,  -502,  -503,  -286,  -224,  -503,  -503,  -503,  -503,
  -503,  -501,  -503,  -503,  -265,  -503,  -262,  -503,  -223,  -302,
  -503,  -503,  -503,  -361,  -358,  -282,  -503,  -503,  -353,   -57,
  -503,  -352,   -55,  -503,  -332,  -296,  -333,  -331,  -501,  -299,
  -503,  -407,  -404,  -408,  -410,  -409,  -503,  -282,  -235,  -503,
  -502,  -502,  -282,  -503,  -503,  -503,   -76,  -503,  -439,  -503,
  -501,  -503,   -95,   -91,   -92,  -503,  -320,  -441,  -445,  -503,
  -447,  -503,  -503,  -448,  -503,  -503,  -462,  -466,  -492,  -503,
  -105,  -501,  -501,  -336,  -373,  -501,  -372,  -374,  -215,  -289,
  -501,  -503,  -341,   -21,  -503,  -503,  -334,  -503,  -503,  -255,
  -243,  -503,  -502,  -225,  -501,  -226,  -501,  -503,  -492,  -503,
  -174,  -263,  -503,  -278,  -492,  -303,  -365,  -503,  -503,  -301,
  -501,  -501,  -503,  -179,   -29,  -180,   -58,  -177,   -27,   -56,
  -178,   -28,  -501,   -51,  -501,  -406,  -305,  -503,  -232,  -234,
  -503,  -312,  -503,  -503,  -282,  -316,  -450,  -468,  -468,  -467,
  -456,  -468,  -503,  -459,  -457,  -318,  -503,  -471,  -337,    -3,
  -378,  -501,  -503,  -376,  -503,  -503,  -343,  -293,  -503,  -257,
  -240,  -502,  -502,  -503,  -503,  -249,  -503,  -294,  -264,  -221,
  -503,  -501,  -367,  -503,  -503,  -176,   -26,  -503,  -501,  -503,
  -501,  -502,  -501,  -438,  -309,  -501,  -443,  -503,  -444,  -446,
  -440,  -377,  -501,  -375,  -503,  -503,   -90,   -83,  -346,  -501,
  -239,  -503,  -245,  -503,  -502,  -502,  -227,  -503,  -501,  -362,
  -359,  -297,  -503,  -300,  -503,  -236,  -503,  -503,  -468,  -371,
   -89,  -501,  -503,  -503,  -501,  -502,  -503,  -503,  -241,  -244,
  -366,  -369,  -368,  -364,   -52,  -306,  -313,  -321,  -442,  -370,
  -503,  -485,   -88,  -481,  -482,  -335,  -246,  -503,  -502,  -502,
   -84,  -503,  -242,  -247,  -502,  -248 ]

clist = [
'121,111,187,101,109,121,503,607,109,148,123,482,589,318,195,123,153',
'195,464,131,195,245,234,236,131,234,251,310,306,283,248,553,305,484',
'246,308,485,530,121,588,118,297,299,141,500,118,724,124,123,309,574',
'422,144,665,783,776,324,131,669,612,712,625,96,348,218,121,345,357,195',
'778,333,781,337,121,630,315,397,321,118,405,306,246,698,700,703,294',
'367,495,497,356,109,474,334,628,739,603,135,361,572,129,818,472,473',
'511,129,513,668,186,409,121,255,491,391,342,661,762,347,764,536,309',
'820,147,653,654,690,121,395,687,387,299,661,822,150,580,411,581,727',
'129,325,109,524,526,453,720,517,751,109,553,346,109,516,750,747,873',
'651,715,792,231,335,287,114,366,413,142,672,542,535,534,689,708,777',
'252,332,250,789,780,1,412,2,,783,,524,526,,,,,,,542,652,,,,,,858,,,',
'766,,,542,,,,,,,,,,,,,379,,,,324,,,,,,,588,692,,,,195,,,,,,,,,,,94,',
',,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440',
'441,442,443,444,445,446,447,448,449,763,450,826,828,,518,829,,489,417',
',,,,466,299,502,885,,,300,121,121,,,121,509,872,,537,487,123,123,514',
'492,480,,499,121,,131,131,529,80,131,,,555,508,506,625,459,80,246,563',
'519,553,121,714,,,118,118,,544,118,,315,475,477,738,,481,,,,,756,,519',
'759,121,,878,,,,,356,,121,315,547,80,121,300,508,519,121,121,,,695,825',
'519,542,121,300,553,315,,705,,550,,,315,,519,,129,129,,,483,,,573,195',
'488,588,,296,234,602,,,488,604,605,,311,,,,,,,,,,,,,,,,,,323,,,,734',
',736,,,80,879,611,,,,,,,624,626,,80,,,,,,,,,,,,,,631,811,560,,,,636',
'638,,,,,,,121,,645,121,773,632,121,,,,648,,553,,658,,,,,,121,659,,662',
',,627,,,658,,,832,,,691,,,839,,,,,,,,,,,,667,871,,87,460,667,553,,,300',
'87,121,87,,121,87,,,,,,,,,,,696,,,,,,,,80,519,,121,195,80,,,688,,,,',
'315,87,,,,87,87,697,,,,,87,195,87,709,,,234,710,,121,718,87,,,,,87,80',
'80,111,87,721,109,80,,,,856,,,857,,,,121,754,87,,,758,87,121,761,740',
'121,678,,,744,,,737,121,455,456,457,458,753,755,,550,757,,,760,,,,,87',
',,542,,,,,,,,121,87,,,753,757,760,,67,667,,,110,,87,87,,67,,,771,,,',
',121,616,528,488,,786,,533,,,,619,,,,,,,,,,,730,,121,,816,121,,,,641',
',67,,806,,,121,,,809,,802,121,,746,,815,,,650,,,,,,,,,,,,821,800,,815',
',,,768,769,,,80,,,,,,823,670,,,80,,,,87,,,,,87,,,,109,,121,121,,,85',
'80,880,121,112,67,,132,139,85,,,132,,,,,67,,805,801,80,,87,87,87,87',
'87,87,,,,,87,121,,121,,87,87,121,,87,,,132,,87,,132,85,80,519,865,121',
'87,132,,132,121,121,,,,315,87,,132,,,,,132,,87,,132,87,,,121,,87,,121',
',,,840,842,139,,132,676,,,132,80,87,,,,,,,,80,,855,,,,,,,,87,,,,,,,87',
',85,,,,67,87,868,869,,67,,,85,,139,,,,,,,400,87,,400,132,132,886,,,788',
',,,,,,,,795,,,,,,,67,67,,,892,893,67,,,,895,,,,,87,,,87,,,,,813,814',
',,,87,,,,,,,817,80,819,,,87,,,,,,,,87,,,,,,,,,80,,,,,,,831,,80,,87,',
',,,,,772,,,85,,,,,85,848,,,,,,,852,,854,,,80,80,87,,87,314,,,,859,,',
'80,331,80,798,864,,,,132,132,132,132,85,85,,,,,85,,,,,132,132,,,132',
',80,,,132,87,,,87,,,,132,,,,,87,,,,80,132,,,,67,,80,,80,132,80,,132',
'80,67,,,132,,,80,,,,,,,80,,,,,,132,67,,,,,,,,,,,,87,,,,,132,,,67,,,',
'132,23,,,87,102,,132,87,136,23,87,,,,,,,,,,,,,132,169,67,,,,,,,,,,,87',
'87,,,,,,,,,,,,,23,,,,,,,,87,,,,132,,,85,,87,,,,67,87,,,85,,,,,67,,,',
',,,132,,,136,,,,,85,,87,87,87,,,,,,110,,,,87,,87,,,,85,,,479,,4,,,,98',
'23,,,134,4,,,,,,,,23,87,136,,,,,,85,169,132,,169,314,,,,,,,,87,,,,,',
',87,,87,,87,4,,87,,314,,,,,87,,67,,,,,87,,132,,,85,314,,,,,,,314,85',
',67,,,,,,87,,134,67,,,,,,,,295,,,,,,112,,,295,,,,,,,,,313,,,,67,67,',
',4,295,,,23,,132,,67,23,67,,4,,134,,,349,,615,,401,132,,401,,132,,,132',
',,,,,,,67,623,623,833,,,,371,,23,23,,,,,23,,,132,85,67,,,384,,,,67,',
'67,,67,,,67,,,,406,407,85,67,,,,615,615,,67,85,,,,,132,623,,,,,,,,,',
',,,,,,623,,,,,,,,85,85,132,,,,,,4,,,,85,4,85,,,,,,,,,,,,,314,,,,,,,',
',,,,,,85,,,835,,,,,,4,4,,,,,4,713,717,,,85,,,,,,,85,713,85,,85,,,85',
',,,,,,85,,,,,,,85,,713,23,,,,295,295,295,295,,,23,,,,,,,,,132,,,,,,',
'615,,,,23,486,,,,,,,,501,,,,,,,,,,,23,,,,,,,,295,,,,,295,,,,,,,790,',
',793,,,,,,,23,,,,,,,,,,,546,623,,623,549,,,,552,,,,,,,,,,,,569,,,,,',
',,,4,,,,,,23,,601,,4,,,,,23,,,,,,,,,,,,,,,4,,,,,,,,,,102,,,,,,,610,',
',4,,,,,,,,,,,,,,,,,,,,,,313,,,629,,,,,4,674,,,,,713,,,644,,,646,,,552',
',,,314,,,713,,,,,,,646,,,,,,,23,,,,,,,,,,4,,,,,,295,,,4,,23,,,,,,,,',
'23,,,,680,,,681,,,,,,,98,,,,,,,,,,,,,,,,23,23,,,,,,,,,,,23,,23,,,,,',
',,,,,,,,,,,716,,,,,,,,,,23,,,837,,,,,,,,,,,,732,,,,4,23,,549,,,741,',
'23,,23,,23,,486,23,,,,,,4,23,,,,,,,23,4,,,,,,,,,,,,552,,,,,,,295,,,',
',,,,,,,4,4,,,,,,784,,,,,4,,4,,,,,,,,,,,295,,,,,,,,,552,,,,,,,4,,,836',
'808,,,,,,812,,,,,,,,,,4,,,,,,,4,,4,,4,,,4,,,,,,,4,,,,,,,4,,,,,,,,,,',
',,,,,,844,845,,,,,,646,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,549,,552,,,,870',
',,,,,,,,,,,,,,,,,,888,889,,,,,,,,,,,,,,,,,,,,552,,,,894' ]
        racc_goto_table = arr = Array.new(2251, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

clist = [
'28,18,48,82,54,28,81,5,54,28,29,32,85,21,49,29,28,49,78,57,49,28,51',
'13,57,51,13,17,58,53,9,146,34,78,84,34,23,35,28,140,61,41,40,11,23,61',
'79,31,29,28,46,3,31,80,142,105,48,57,80,36,6,59,125,44,74,28,34,17,49',
'138,75,138,76,28,65,29,47,9,61,47,58,84,139,139,139,31,128,56,56,28',
'54,63,57,62,6,52,43,53,83,55,38,33,33,56,55,56,37,86,87,28,88,89,44',
'90,59,91,92,93,94,28,95,96,36,36,97,28,98,99,41,40,59,100,101,102,103',
'104,66,55,125,54,33,33,107,108,111,112,54,146,125,54,113,114,115,116',
'117,118,119,123,124,27,126,127,26,129,130,33,131,132,134,135,137,14',
'55,12,7,141,4,145,1,,142,,33,33,,,,,,,33,81,,,,,,138,,,,80,,,33,,,,',
',,,,,,,,60,,,,48,,,,,,,140,46,,,,49,,,,,,,,,,,2,,,,28,28,28,28,28,28',
'28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,36,28,139',
'139,,21,139,,17,11,,,,,41,40,17,79,,,2,28,28,,,28,17,6,,21,28,29,29',
'128,53,29,,28,28,,57,57,58,19,57,,,21,28,9,59,11,19,84,21,49,146,28',
'23,,,61,61,,128,61,,29,31,31,32,,31,,,,,35,,49,35,28,,139,,,,,28,,28',
'29,28,19,28,2,28,49,28,28,,,3,85,49,33,28,2,146,29,,3,,57,,,29,,49,',
'55,55,,,55,,,84,49,55,140,,15,51,13,,,55,28,28,,15,,,,,,,,,,,,,,,,,',
'15,,,,33,,33,,,19,5,28,,,,,,,34,34,,19,,,,,,,,,,,,,,28,78,60,,,,53,53',
',,,,,,28,,53,28,3,57,28,,,,53,,146,,58,,,,,,28,34,,34,,,61,,,58,,,78',
',,21,,,78,,,,,,,,,,,,84,81,,39,2,84,146,,,2,39,28,39,,28,39,,,,,,,,',
',,48,,,,,,,,19,49,,28,49,19,,,84,,,,,29,39,,,,39,39,84,,,,,39,49,39',
'53,,,51,13,,28,28,39,,,,,39,19,19,18,39,82,54,19,,,,3,,,3,,,,28,17,39',
',,17,39,28,17,28,28,60,,,28,,,29,28,15,15,15,15,28,28,,57,28,,,28,,',
',,39,,,33,,,,,,,,28,39,,,28,28,28,,16,84,,,16,,39,39,,16,,,84,,,,,28',
'2,15,55,,53,,15,,,,2,,,,,,,,,,,60,,28,,17,28,,,,2,,16,,53,,,28,,,53',
',57,28,,55,,28,,,2,,,,,,,,,,,,28,61,,28,,,,60,60,,,19,,,,,,84,2,,,19',
',,,39,,,,,39,,,,54,,28,28,,,20,19,21,28,20,16,,20,20,20,,,20,,,,,16',
',60,55,19,,39,39,39,39,39,39,,,,,39,28,,28,,39,39,28,,39,,,20,,39,,20',
'20,19,49,57,28,39,20,,20,28,28,,,,29,39,,20,,,,,20,,39,,20,39,,,28,',
'39,,28,,,,60,60,20,,20,15,,,20,19,39,,,,,,,,19,,60,,,,,,,,39,,,,,,,39',
',20,,,,16,39,60,60,,16,,,20,,20,,,,,,,20,39,,20,20,20,60,,,2,,,,,,,',
',2,,,,,,,16,16,,,60,60,16,,,,60,,,,,39,,,39,,,,,2,2,,,,39,,,,,,,2,19',
'2,,,39,,,,,,,,39,,,,,,,,,19,,,,,,,2,,19,,39,,,,,,,15,,,20,,,,,20,2,',
',,,,,2,,2,,,19,19,39,,39,10,,,,2,,,19,10,19,15,2,,,,20,20,20,20,20,20',
',,,,20,,,,,20,20,,,20,,19,,,20,39,,,39,,,,20,,,,,39,,,,19,20,,,,16,',
'19,,19,20,19,,20,19,16,,,20,,,19,,,,,,,19,,,,,,20,16,,,,,,,,,,,,39,',
',,,20,,,16,,,,20,45,,,39,45,,20,39,45,45,39,,,,,,,,,,,,,20,45,16,,,',
',,,,,,,39,39,,,,,,,,,,,,,45,,,,,,,,39,,,,20,,,20,,39,,,,16,39,,,20,',
',,,16,,,,,,,20,,,45,,,,,20,,39,39,39,,,,,,16,,,,39,,39,,,,20,,,10,,22',
',,,22,45,,,22,22,,,,,,,,45,39,45,,,,,,20,45,20,,45,10,,,,,,,,39,,,,',
',,39,,39,,39,22,,39,,10,,,,,39,,16,,,,,39,,20,,,20,10,,,,,,,10,20,,16',
',,,,,39,,22,16,,,,,,,,25,,,,,,20,,,25,,,,,,,,,25,,,,16,16,,,22,25,,',
'45,,20,,16,45,16,,22,,22,,,25,,10,,22,20,,22,,20,,,20,,,,,,,,16,10,10',
'16,,,,24,,45,45,,,,,45,,,20,20,16,,,24,,,,16,,16,,16,,,16,,,,25,25,20',
'16,,,,10,10,,16,20,,,,,20,10,,,,,,,,,,,,,,,,10,,,,,,,,20,20,20,,,,,',
'22,,,,20,22,20,,,,,,,,,,,,,10,,,,,,,,,,,,,,20,,,20,,,,,,22,22,,,,,22',
'10,10,,,20,,,,,,,20,10,20,,20,,,20,,,,,,,20,,,,,,,20,,10,45,,,,25,25',
'25,25,,,45,,,,,,,,,20,,,,,,,10,,,,45,24,,,,,,,,24,,,,,,,,,,,45,,,,,',
',,25,,,,,25,,,,,,,10,,,10,,,,,,,45,,,,,,,,,,,24,10,,10,24,,,,24,,,,',
',,,,,,,25,,,,,,,,,22,,,,,,45,,25,,22,,,,,45,,,,,,,,,,,,,,,22,,,,,,,',
',,45,,,,,,,25,,,22,,,,,,,,,,,,,,,,,,,,,,25,,,24,,,,,22,22,,,,,10,,,24',
',,24,,,24,,,,10,,,10,,,,,,,24,,,,,,,45,,,,,,,,,,22,,,,,,25,,,22,,45',
',,,,,,,,45,,,,24,,,24,,,,,,,22,,,,,,,,,,,,,,,,45,45,,,,,,,,,,,45,,45',
',,,,,,,,,,,,,,,,24,,,,,,,,,,45,,,45,,,,,,,,,,,,24,,,,22,45,,24,,,24',
',45,,45,,45,,24,45,,,,,,22,45,,,,,,,45,22,,,,,,,,,,,,24,,,,,,,25,,,',
',,,,,,,22,22,,,,,,24,,,,,22,,22,,,,,,,,,,,25,,,,,,,,,24,,,,,,,22,,,22',
'24,,,,,,24,,,,,,,,,,22,,,,,,,22,,22,,22,,,22,,,,,,,22,,,,,,,22,,,,,',
',,,,,,,,,,,24,24,,,,,,24,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,24,,24,,,,24',
',,,,,,,,,,,,,,,,,,24,24,,,,,,,,,,,,,,,,,,,,24,,,,24' ]
        racc_goto_check = arr = Array.new(2251, nil)
        idx = 0
        clist.each do |str|
          str.split(',', -1).each do |i|
            arr[idx] = i.to_i unless i.empty?
            idx += 1
          end
        end

racc_goto_pointer = [
   nil,   178,   243,  -204,   176,  -416,  -547,  -538,   nil,     0,
   998,    33,   143,    -5,   140,   356,   678,   -30,    -4,   316,
   798,   -60,  1306,  -276,  1359,  1356,   -74,   119,    -8,     2,
   nil,    39,  -296,  -200,   -21,  -308,  -394,  -425,  -663,   534,
    -9,   -10,   nil,    87,   -28,  1186,  -349,   -71,   -23,   -11,
   nil,    -6,  -324,    -7,    -1,    91,  -229,    11,   -28,  -412,
    86,    32,  -383,  -212,   nil,  -402,  -492,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    39,   -11,   -12,   nil,  -278,  -573,
  -475,  -315,    -2,  -299,     4,  -399,    82,   -78,    76,  -202,
    27,  -550,    26,  -552,  -240,  -646,   106,  -448,   -20,  -442,
  -640,   113,  -272,   -53,  -274,  -641,   nil,  -144,  -469,   nil,
   nil,  -194,  -509,  -186,  -502,  -499,  -695,  -351,  -453,  -559,
   nil,   nil,   nil,   130,    75,    59,   153,    47,   -28,   151,
  -371,  -189,  -187,   nil,  -403,  -431,   nil,  -529,  -630,  -501,
  -372,  -524,  -647,   nil,   nil,   -30,  -349 ]

racc_goto_default = [
   nil,   nil,   423,   nil,   nil,   nil,   726,   nil,    30,   nil,
    37,    41,   322,   nil,   nil,   nil,   128,    72,    76,   130,
   149,   nil,   116,   nil,   119,    20,   nil,   nil,    35,    39,
    42,   nil,    52,   539,   nil,   nil,   nil,   nil,   nil,   113,
    92,   nil,     9,    14,    18,   120,   396,   nil,   232,   468,
   200,    49,   nil,   nil,    65,   316,   nil,   317,   621,   622,
   375,   548,   nil,   nil,   303,   nil,   nil,   377,    44,    47,
    54,    58,    62,    66,    71,   nil,   343,    84,   nil,   nil,
   nil,   nil,   nil,   nil,   463,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   285,   nil,   nil,   522,
   344,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    16,    22,    27,    32,   nil,   nil,   nil,   nil,   352,   nil,
   nil,   nil,   nil,   329,   nil,   582,   583,   584,   585,   nil,
   779,   591,   593,   596,   598,   nil,   125 ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 134, :_reduce_1,
  2, 131, :_reduce_2,
  4, 133, :_reduce_3,
  2, 132, :_reduce_4,
  1, 138, :_reduce_none,
  1, 138, :_reduce_none,
  3, 138, :_reduce_7,
  2, 138, :_reduce_8,
  0, 156, :_reduce_9,
  4, 141, :_reduce_10,
  3, 141, :_reduce_11,
  3, 141, :_reduce_12,
  3, 141, :_reduce_13,
  2, 141, :_reduce_14,
  3, 141, :_reduce_15,
  3, 141, :_reduce_16,
  3, 141, :_reduce_17,
  3, 141, :_reduce_18,
  3, 141, :_reduce_19,
  0, 157, :_reduce_20,
  5, 141, :_reduce_21,
  4, 141, :_reduce_22,
  3, 141, :_reduce_23,
  3, 141, :_reduce_24,
  3, 141, :_reduce_25,
  6, 141, :_reduce_26,
  5, 141, :_reduce_27,
  5, 141, :_reduce_28,
  5, 141, :_reduce_29,
  3, 141, :_reduce_30,
  3, 141, :_reduce_31,
  3, 141, :_reduce_32,
  3, 141, :_reduce_33,
  1, 141, :_reduce_none,
  1, 155, :_reduce_none,
  3, 155, :_reduce_36,
  3, 155, :_reduce_37,
  2, 155, :_reduce_38,
  2, 155, :_reduce_39,
  1, 155, :_reduce_none,
  1, 145, :_reduce_41,
  1, 147, :_reduce_none,
  1, 147, :_reduce_none,
  2, 147, :_reduce_44,
  2, 147, :_reduce_45,
  2, 147, :_reduce_46,
  1, 160, :_reduce_none,
  4, 160, :_reduce_48,
  4, 160, :_reduce_49,
  0, 167, :_reduce_50,
  0, 168, :_reduce_51,
  6, 165, :_reduce_52,
  2, 159, :_reduce_53,
  3, 159, :_reduce_54,
  4, 159, :_reduce_55,
  5, 159, :_reduce_56,
  4, 159, :_reduce_57,
  5, 159, :_reduce_58,
  2, 159, :_reduce_59,
  2, 159, :_reduce_60,
  1, 148, :_reduce_none,
  3, 148, :_reduce_62,
  1, 171, :_reduce_none,
  3, 171, :_reduce_64,
  1, 170, :_reduce_65,
  2, 170, :_reduce_66,
  3, 170, :_reduce_67,
  2, 170, :_reduce_68,
  2, 170, :_reduce_69,
  1, 170, :_reduce_70,
  1, 173, :_reduce_none,
  3, 173, :_reduce_72,
  2, 172, :_reduce_73,
  3, 172, :_reduce_74,
  1, 174, :_reduce_75,
  4, 174, :_reduce_76,
  3, 174, :_reduce_77,
  3, 174, :_reduce_78,
  3, 174, :_reduce_79,
  3, 174, :_reduce_80,
  2, 174, :_reduce_81,
  1, 174, :_reduce_82,
  1, 146, :_reduce_83,
  4, 146, :_reduce_84,
  3, 146, :_reduce_85,
  3, 146, :_reduce_86,
  3, 146, :_reduce_87,
  3, 146, :_reduce_88,
  2, 146, :_reduce_89,
  1, 146, :_reduce_90,
  1, 176, :_reduce_91,
  1, 176, :_reduce_none,
  2, 177, :_reduce_93,
  1, 177, :_reduce_94,
  3, 177, :_reduce_95,
  1, 178, :_reduce_none,
  1, 178, :_reduce_none,
  1, 178, :_reduce_none,
  1, 178, :_reduce_99,
  1, 178, :_reduce_100,
  1, 143, :_reduce_101,
  1, 143, :_reduce_102,
  1, 144, :_reduce_103,
  0, 182, :_reduce_104,
  4, 144, :_reduce_105,
  1, 179, :_reduce_none,
  1, 179, :_reduce_none,
  1, 179, :_reduce_none,
  1, 179, :_reduce_none,
  1, 179, :_reduce_none,
  1, 179, :_reduce_none,
  1, 179, :_reduce_none,
  1, 179, :_reduce_none,
  1, 179, :_reduce_none,
  1, 179, :_reduce_none,
  1, 179, :_reduce_none,
  1, 179, :_reduce_none,
  1, 179, :_reduce_none,
  1, 179, :_reduce_none,
  1, 179, :_reduce_none,
  1, 179, :_reduce_none,
  1, 179, :_reduce_none,
  1, 179, :_reduce_none,
  1, 179, :_reduce_none,
  1, 179, :_reduce_none,
  1, 179, :_reduce_none,
  1, 179, :_reduce_none,
  1, 179, :_reduce_none,
  1, 179, :_reduce_none,
  1, 179, :_reduce_none,
  1, 179, :_reduce_none,
  1, 180, :_reduce_none,
  1, 180, :_reduce_none,
  1, 180, :_reduce_none,
  1, 180, :_reduce_none,
  1, 180, :_reduce_none,
  1, 180, :_reduce_none,
  1, 180, :_reduce_none,
  1, 180, :_reduce_none,
  1, 180, :_reduce_none,
  1, 180, :_reduce_none,
  1, 180, :_reduce_none,
  1, 180, :_reduce_none,
  1, 180, :_reduce_none,
  1, 180, :_reduce_none,
  1, 180, :_reduce_none,
  1, 180, :_reduce_none,
  1, 180, :_reduce_none,
  1, 180, :_reduce_none,
  1, 180, :_reduce_none,
  1, 180, :_reduce_none,
  1, 180, :_reduce_none,
  1, 180, :_reduce_none,
  1, 180, :_reduce_none,
  1, 180, :_reduce_none,
  1, 180, :_reduce_none,
  1, 180, :_reduce_none,
  1, 180, :_reduce_none,
  1, 180, :_reduce_none,
  1, 180, :_reduce_none,
  1, 180, :_reduce_none,
  1, 180, :_reduce_none,
  1, 180, :_reduce_none,
  1, 180, :_reduce_none,
  1, 180, :_reduce_none,
  1, 180, :_reduce_none,
  1, 180, :_reduce_none,
  1, 180, :_reduce_none,
  1, 180, :_reduce_none,
  1, 180, :_reduce_none,
  1, 180, :_reduce_none,
  1, 180, :_reduce_none,
  3, 158, :_reduce_173,
  5, 158, :_reduce_174,
  3, 158, :_reduce_175,
  6, 158, :_reduce_176,
  5, 158, :_reduce_177,
  5, 158, :_reduce_178,
  5, 158, :_reduce_179,
  5, 158, :_reduce_180,
  4, 158, :_reduce_181,
  3, 158, :_reduce_182,
  3, 158, :_reduce_183,
  3, 158, :_reduce_184,
  3, 158, :_reduce_185,
  3, 158, :_reduce_186,
  3, 158, :_reduce_187,
  3, 158, :_reduce_188,
  3, 158, :_reduce_189,
  3, 158, :_reduce_190,
  4, 158, :_reduce_191,
  4, 158, :_reduce_192,
  2, 158, :_reduce_193,
  2, 158, :_reduce_194,
  3, 158, :_reduce_195,
  3, 158, :_reduce_196,
  3, 158, :_reduce_197,
  3, 158, :_reduce_198,
  3, 158, :_reduce_199,
  3, 158, :_reduce_200,
  3, 158, :_reduce_201,
  3, 158, :_reduce_202,
  3, 158, :_reduce_203,
  3, 158, :_reduce_204,
  3, 158, :_reduce_205,
  3, 158, :_reduce_206,
  3, 158, :_reduce_207,
  2, 158, :_reduce_208,
  2, 158, :_reduce_209,
  3, 158, :_reduce_210,
  3, 158, :_reduce_211,
  3, 158, :_reduce_212,
  3, 158, :_reduce_213,
  3, 158, :_reduce_214,
  5, 158, :_reduce_215,
  1, 158, :_reduce_none,
  1, 154, :_reduce_217,
  1, 151, :_reduce_none,
  2, 151, :_reduce_219,
  2, 151, :_reduce_220,
  5, 151, :_reduce_221,
  2, 151, :_reduce_222,
  3, 151, :_reduce_223,
  3, 188, :_reduce_224,
  4, 188, :_reduce_225,
  4, 188, :_reduce_226,
  6, 188, :_reduce_227,
  1, 189, :_reduce_none,
  1, 189, :_reduce_none,
  1, 161, :_reduce_230,
  2, 161, :_reduce_231,
  5, 161, :_reduce_232,
  2, 161, :_reduce_233,
  5, 161, :_reduce_234,
  4, 161, :_reduce_235,
  7, 161, :_reduce_236,
  3, 161, :_reduce_237,
  1, 161, :_reduce_none,
  4, 192, :_reduce_239,
  3, 192, :_reduce_240,
  5, 192, :_reduce_241,
  7, 192, :_reduce_242,
  2, 192, :_reduce_243,
  5, 192, :_reduce_244,
  4, 192, :_reduce_245,
  6, 192, :_reduce_246,
  7, 192, :_reduce_247,
  9, 192, :_reduce_248,
  3, 192, :_reduce_249,
  1, 192, :_reduce_none,
  0, 194, :_reduce_251,
  2, 164, :_reduce_252,
  1, 193, :_reduce_none,
  0, 195, :_reduce_254,
  3, 193, :_reduce_255,
  0, 196, :_reduce_256,
  4, 193, :_reduce_257,
  2, 191, :_reduce_258,
  2, 190, :_reduce_259,
  1, 190, :_reduce_none,
  1, 185, :_reduce_261,
  3, 185, :_reduce_262,
  3, 153, :_reduce_263,
  4, 153, :_reduce_264,
  2, 153, :_reduce_265,
  1, 184, :_reduce_none,
  1, 184, :_reduce_none,
  1, 184, :_reduce_none,
  1, 184, :_reduce_none,
  1, 184, :_reduce_none,
  1, 184, :_reduce_none,
  1, 184, :_reduce_none,
  1, 184, :_reduce_none,
  1, 184, :_reduce_274,
  0, 218, :_reduce_275,
  4, 184, :_reduce_276,
  0, 219, :_reduce_277,
  5, 184, :_reduce_278,
  3, 184, :_reduce_279,
  3, 184, :_reduce_280,
  2, 184, :_reduce_281,
  4, 184, :_reduce_282,
  3, 184, :_reduce_283,
  3, 184, :_reduce_284,
  1, 184, :_reduce_285,
  4, 184, :_reduce_286,
  3, 184, :_reduce_287,
  1, 184, :_reduce_288,
  5, 184, :_reduce_289,
  2, 184, :_reduce_290,
  1, 184, :_reduce_none,
  2, 184, :_reduce_292,
  6, 184, :_reduce_293,
  6, 184, :_reduce_294,
  0, 220, :_reduce_295,
  0, 221, :_reduce_296,
  7, 184, :_reduce_297,
  0, 222, :_reduce_298,
  0, 223, :_reduce_299,
  7, 184, :_reduce_300,
  5, 184, :_reduce_301,
  4, 184, :_reduce_302,
  5, 184, :_reduce_303,
  0, 224, :_reduce_304,
  0, 225, :_reduce_305,
  9, 184, :_reduce_306,
  0, 226, :_reduce_307,
  0, 227, :_reduce_308,
  7, 184, :_reduce_309,
  0, 228, :_reduce_310,
  0, 229, :_reduce_311,
  0, 230, :_reduce_312,
  9, 184, :_reduce_313,
  0, 231, :_reduce_314,
  0, 232, :_reduce_315,
  6, 184, :_reduce_316,
  0, 233, :_reduce_317,
  6, 184, :_reduce_318,
  0, 234, :_reduce_319,
  0, 235, :_reduce_320,
  9, 184, :_reduce_321,
  1, 184, :_reduce_322,
  1, 184, :_reduce_323,
  1, 184, :_reduce_324,
  1, 184, :_reduce_325,
  1, 150, :_reduce_326,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  1, 208, :_reduce_none,
  2, 208, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 210, :_reduce_none,
  1, 209, :_reduce_none,
  5, 209, :_reduce_335,
  1, 136, :_reduce_none,
  2, 136, :_reduce_337,
  1, 212, :_reduce_none,
  1, 212, :_reduce_339,
  1, 166, :_reduce_none,
  2, 166, :_reduce_341,
  1, 166, :_reduce_342,
  3, 166, :_reduce_343,
  0, 237, :_reduce_344,
  0, 238, :_reduce_345,
  6, 236, :_reduce_346,
  2, 162, :_reduce_347,
  4, 162, :_reduce_348,
  4, 162, :_reduce_349,
  0, 240, :_reduce_350,
  3, 207, :_reduce_351,
  4, 207, :_reduce_352,
  4, 207, :_reduce_353,
  3, 207, :_reduce_354,
  2, 207, :_reduce_355,
  1, 207, :_reduce_356,
  0, 241, :_reduce_357,
  0, 242, :_reduce_358,
  6, 206, :_reduce_359,
  0, 243, :_reduce_360,
  0, 244, :_reduce_361,
  6, 206, :_reduce_362,
  0, 247, :_reduce_363,
  6, 211, :_reduce_364,
  1, 245, :_reduce_none,
  4, 245, :_reduce_366,
  2, 245, :_reduce_367,
  1, 246, :_reduce_none,
  1, 246, :_reduce_none,
  6, 135, :_reduce_370,
  0, 135, :_reduce_371,
  1, 248, :_reduce_372,
  1, 248, :_reduce_none,
  1, 248, :_reduce_none,
  2, 249, :_reduce_375,
  1, 249, :_reduce_none,
  2, 137, :_reduce_377,
  1, 137, :_reduce_none,
  1, 198, :_reduce_379,
  1, 198, :_reduce_380,
  1, 198, :_reduce_none,
  1, 199, :_reduce_382,
  1, 252, :_reduce_none,
  2, 252, :_reduce_384,
  3, 253, :_reduce_385,
  3, 200, :_reduce_386,
  3, 201, :_reduce_387,
  3, 202, :_reduce_388,
  3, 202, :_reduce_389,
  0, 256, :_reduce_390,
  3, 256, :_reduce_391,
  1, 257, :_reduce_none,
  2, 257, :_reduce_393,
  3, 203, :_reduce_394,
  3, 203, :_reduce_395,
  0, 259, :_reduce_396,
  3, 259, :_reduce_397,
  0, 254, :_reduce_398,
  2, 254, :_reduce_399,
  0, 255, :_reduce_400,
  2, 255, :_reduce_401,
  1, 258, :_reduce_402,
  0, 261, :_reduce_403,
  3, 258, :_reduce_404,
  0, 262, :_reduce_405,
  4, 258, :_reduce_406,
  1, 260, :_reduce_407,
  1, 260, :_reduce_408,
  1, 260, :_reduce_409,
  1, 260, :_reduce_none,
  2, 181, :_reduce_411,
  1, 263, :_reduce_none,
  1, 263, :_reduce_none,
  1, 263, :_reduce_none,
  1, 263, :_reduce_none,
  3, 251, :_reduce_416,
  1, 250, :_reduce_none,
  1, 250, :_reduce_none,
  2, 250, :_reduce_419,
  2, 250, :_reduce_420,
  1, 175, :_reduce_none,
  1, 175, :_reduce_none,
  1, 175, :_reduce_none,
  1, 175, :_reduce_none,
  1, 175, :_reduce_none,
  1, 175, :_reduce_426,
  1, 175, :_reduce_427,
  1, 175, :_reduce_428,
  1, 175, :_reduce_429,
  1, 175, :_reduce_430,
  1, 175, :_reduce_431,
  1, 204, :_reduce_432,
  1, 149, :_reduce_433,
  1, 152, :_reduce_434,
  1, 152, :_reduce_435,
  1, 213, :_reduce_436,
  0, 264, :_reduce_437,
  4, 213, :_reduce_438,
  2, 213, :_reduce_439,
  4, 215, :_reduce_440,
  2, 215, :_reduce_441,
  6, 265, :_reduce_442,
  4, 265, :_reduce_443,
  4, 265, :_reduce_444,
  2, 265, :_reduce_445,
  4, 265, :_reduce_446,
  2, 265, :_reduce_447,
  2, 265, :_reduce_448,
  1, 265, :_reduce_449,
  0, 265, :_reduce_450,
  1, 271, :_reduce_451,
  1, 271, :_reduce_452,
  1, 271, :_reduce_453,
  1, 271, :_reduce_454,
  1, 266, :_reduce_455,
  3, 266, :_reduce_456,
  3, 272, :_reduce_457,
  1, 267, :_reduce_458,
  3, 267, :_reduce_459,
  1, 273, :_reduce_none,
  1, 273, :_reduce_none,
  2, 268, :_reduce_462,
  1, 268, :_reduce_463,
  1, 274, :_reduce_none,
  1, 274, :_reduce_none,
  2, 270, :_reduce_466,
  2, 269, :_reduce_467,
  0, 269, :_reduce_468,
  1, 216, :_reduce_none,
  0, 275, :_reduce_470,
  5, 216, :_reduce_471,
  1, 205, :_reduce_472,
  2, 205, :_reduce_473,
  2, 205, :_reduce_474,
  1, 187, :_reduce_none,
  3, 187, :_reduce_476,
  3, 276, :_reduce_477,
  1, 169, :_reduce_none,
  1, 169, :_reduce_none,
  1, 169, :_reduce_none,
  1, 163, :_reduce_none,
  1, 163, :_reduce_none,
  1, 163, :_reduce_none,
  1, 163, :_reduce_none,
  1, 239, :_reduce_none,
  1, 239, :_reduce_none,
  1, 239, :_reduce_none,
  1, 217, :_reduce_none,
  1, 217, :_reduce_none,
  0, 139, :_reduce_none,
  1, 139, :_reduce_none,
  0, 183, :_reduce_none,
  1, 183, :_reduce_none,
  0, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 186, :_reduce_none,
  1, 214, :_reduce_497,
  1, 214, :_reduce_none,
  1, 142, :_reduce_none,
  2, 142, :_reduce_500,
  0, 140, :_reduce_501,
  0, 197, :_reduce_502 ]

racc_reduce_n = 503

racc_shift_n = 896

racc_token_table = {
  false => 0,
  :error => 1,
  :kCLASS => 2,
  :kMODULE => 3,
  :kDEF => 4,
  :kUNDEF => 5,
  :kBEGIN => 6,
  :kRESCUE => 7,
  :kENSURE => 8,
  :kEND => 9,
  :kIF => 10,
  :kUNLESS => 11,
  :kTHEN => 12,
  :kELSIF => 13,
  :kELSE => 14,
  :kCASE => 15,
  :kWHEN => 16,
  :kWHILE => 17,
  :kUNTIL => 18,
  :kFOR => 19,
  :kBREAK => 20,
  :kNEXT => 21,
  :kREDO => 22,
  :kRETRY => 23,
  :kIN => 24,
  :kDO => 25,
  :kDO_COND => 26,
  :kDO_BLOCK => 27,
  :kRETURN => 28,
  :kYIELD => 29,
  :kSUPER => 30,
  :kSELF => 31,
  :kNIL => 32,
  :kTRUE => 33,
  :kFALSE => 34,
  :kAND => 35,
  :kOR => 36,
  :kNOT => 37,
  :kIF_MOD => 38,
  :kUNLESS_MOD => 39,
  :kWHILE_MOD => 40,
  :kUNTIL_MOD => 41,
  :kRESCUE_MOD => 42,
  :kALIAS => 43,
  :kDEFINED => 44,
  :klBEGIN => 45,
  :klEND => 46,
  :k__LINE__ => 47,
  :k__FILE__ => 48,
  :tIDENTIFIER => 49,
  :tFID => 50,
  :tGVAR => 51,
  :tIVAR => 52,
  :tCONSTANT => 53,
  :tCVAR => 54,
  :tNTH_REF => 55,
  :tBACK_REF => 56,
  :tSTRING_CONTENT => 57,
  :tINTEGER => 58,
  :tFLOAT => 59,
  :tREGEXP_END => 60,
  :tUPLUS => 61,
  :tUMINUS => 62,
  :tUMINUS_NUM => 63,
  :tPOW => 64,
  :tCMP => 65,
  :tEQ => 66,
  :tEQQ => 67,
  :tNEQ => 68,
  :tGEQ => 69,
  :tLEQ => 70,
  :tANDOP => 71,
  :tOROP => 72,
  :tMATCH => 73,
  :tNMATCH => 74,
  :tDOT => 75,
  :tDOT2 => 76,
  :tDOT3 => 77,
  :tAREF => 78,
  :tASET => 79,
  :tLSHFT => 80,
  :tRSHFT => 81,
  :tCOLON2 => 82,
  :tCOLON3 => 83,
  :tOP_ASGN => 84,
  :tASSOC => 85,
  :tLPAREN => 86,
  :tLPAREN2 => 87,
  :tRPAREN => 88,
  :tLPAREN_ARG => 89,
  :tLBRACK => 90,
  :tRBRACK => 91,
  :tLBRACE => 92,
  :tLBRACE_ARG => 93,
  :tSTAR => 94,
  :tSTAR2 => 95,
  :tAMPER => 96,
  :tAMPER2 => 97,
  :tTILDE => 98,
  :tPERCENT => 99,
  :tDIVIDE => 100,
  :tPLUS => 101,
  :tMINUS => 102,
  :tLT => 103,
  :tGT => 104,
  :tPIPE => 105,
  :tBANG => 106,
  :tCARET => 107,
  :tLCURLY => 108,
  :tRCURLY => 109,
  :tBACK_REF2 => 110,
  :tSYMBEG => 111,
  :tSTRING_BEG => 112,
  :tXSTRING_BEG => 113,
  :tREGEXP_BEG => 114,
  :tWORDS_BEG => 115,
  :tAWORDS_BEG => 116,
  :tSTRING_DBEG => 117,
  :tSTRING_DVAR => 118,
  :tSTRING_END => 119,
  :tLAST_TOKEN => 120,
  "?" => 121,
  ":" => 122,
  "=" => 123,
  :tLOWEST => 124,
  "[" => 125,
  "," => 126,
  " " => 127,
  "\n" => 128,
  ";" => 129 }

racc_nt_base = 130

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "kCLASS",
  "kMODULE",
  "kDEF",
  "kUNDEF",
  "kBEGIN",
  "kRESCUE",
  "kENSURE",
  "kEND",
  "kIF",
  "kUNLESS",
  "kTHEN",
  "kELSIF",
  "kELSE",
  "kCASE",
  "kWHEN",
  "kWHILE",
  "kUNTIL",
  "kFOR",
  "kBREAK",
  "kNEXT",
  "kREDO",
  "kRETRY",
  "kIN",
  "kDO",
  "kDO_COND",
  "kDO_BLOCK",
  "kRETURN",
  "kYIELD",
  "kSUPER",
  "kSELF",
  "kNIL",
  "kTRUE",
  "kFALSE",
  "kAND",
  "kOR",
  "kNOT",
  "kIF_MOD",
  "kUNLESS_MOD",
  "kWHILE_MOD",
  "kUNTIL_MOD",
  "kRESCUE_MOD",
  "kALIAS",
  "kDEFINED",
  "klBEGIN",
  "klEND",
  "k__LINE__",
  "k__FILE__",
  "tIDENTIFIER",
  "tFID",
  "tGVAR",
  "tIVAR",
  "tCONSTANT",
  "tCVAR",
  "tNTH_REF",
  "tBACK_REF",
  "tSTRING_CONTENT",
  "tINTEGER",
  "tFLOAT",
  "tREGEXP_END",
  "tUPLUS",
  "tUMINUS",
  "tUMINUS_NUM",
  "tPOW",
  "tCMP",
  "tEQ",
  "tEQQ",
  "tNEQ",
  "tGEQ",
  "tLEQ",
  "tANDOP",
  "tOROP",
  "tMATCH",
  "tNMATCH",
  "tDOT",
  "tDOT2",
  "tDOT3",
  "tAREF",
  "tASET",
  "tLSHFT",
  "tRSHFT",
  "tCOLON2",
  "tCOLON3",
  "tOP_ASGN",
  "tASSOC",
  "tLPAREN",
  "tLPAREN2",
  "tRPAREN",
  "tLPAREN_ARG",
  "tLBRACK",
  "tRBRACK",
  "tLBRACE",
  "tLBRACE_ARG",
  "tSTAR",
  "tSTAR2",
  "tAMPER",
  "tAMPER2",
  "tTILDE",
  "tPERCENT",
  "tDIVIDE",
  "tPLUS",
  "tMINUS",
  "tLT",
  "tGT",
  "tPIPE",
  "tBANG",
  "tCARET",
  "tLCURLY",
  "tRCURLY",
  "tBACK_REF2",
  "tSYMBEG",
  "tSTRING_BEG",
  "tXSTRING_BEG",
  "tREGEXP_BEG",
  "tWORDS_BEG",
  "tAWORDS_BEG",
  "tSTRING_DBEG",
  "tSTRING_DVAR",
  "tSTRING_END",
  "tLAST_TOKEN",
  "\"?\"",
  "\":\"",
  "\"=\"",
  "tLOWEST",
  "\"[\"",
  "\",\"",
  "\" \"",
  "\"\\n\"",
  "\";\"",
  "$start",
  "program",
  "compstmt",
  "bodystmt",
  "@1",
  "opt_rescue",
  "opt_else",
  "opt_ensure",
  "stmts",
  "opt_terms",
  "none",
  "stmt",
  "terms",
  "fitem",
  "undef_list",
  "expr_value",
  "lhs",
  "command_call",
  "mlhs",
  "var_lhs",
  "primary_value",
  "aref_args",
  "backref",
  "mrhs",
  "arg_value",
  "expr",
  "@2",
  "@3",
  "arg",
  "command",
  "block_command",
  "call_args",
  "block_call",
  "operation2",
  "command_args",
  "cmd_brace_block",
  "opt_block_var",
  "@4",
  "@5",
  "operation",
  "mlhs_basic",
  "mlhs_entry",
  "mlhs_head",
  "mlhs_item",
  "mlhs_node",
  "variable",
  "cname",
  "cpath",
  "fname",
  "op",
  "reswords",
  "symbol",
  "@6",
  "opt_nl",
  "primary",
  "args",
  "trailer",
  "assocs",
  "paren_args",
  "opt_paren_args",
  "opt_block_arg",
  "block_arg",
  "call_args2",
  "open_args",
  "@7",
  "@8",
  "@9",
  "none_block_pass",
  "literal",
  "strings",
  "xstring",
  "regexp",
  "words",
  "awords",
  "var_ref",
  "assoc_list",
  "brace_block",
  "method_call",
  "then",
  "if_tail",
  "do",
  "case_body",
  "block_var",
  "superclass",
  "term",
  "f_arglist",
  "singleton",
  "dot_or_colon",
  "@10",
  "@11",
  "@12",
  "@13",
  "@14",
  "@15",
  "@16",
  "@17",
  "@18",
  "@19",
  "@20",
  "@21",
  "@22",
  "@23",
  "@24",
  "@25",
  "@26",
  "@27",
  "do_block",
  "@28",
  "@29",
  "operation3",
  "@30",
  "@31",
  "@32",
  "@33",
  "@34",
  "when_args",
  "cases",
  "@35",
  "exc_list",
  "exc_var",
  "numeric",
  "dsym",
  "string",
  "string1",
  "string_contents",
  "xstring_contents",
  "word_list",
  "word",
  "string_content",
  "qword_list",
  "string_dvar",
  "@36",
  "@37",
  "sym",
  "@38",
  "f_args",
  "f_arg",
  "f_optarg",
  "f_rest_arg",
  "opt_f_block_arg",
  "f_block_arg",
  "f_norm_arg",
  "f_opt",
  "restarg_mark",
  "blkarg_mark",
  "@39",
  "assoc" ]

Racc_debug_parser = true

##### State transition tables end #####

# reduce 0 omitted

def _reduce_1(val, _values, result)
                  self.lexer.lex_state = :expr_beg
                
    result
end

def _reduce_2(val, _values, result)
                  result = val[1]
                
    result
end

def _reduce_3(val, _values, result)
                  result = val[0]

                  if val[1] then
                    result = s(:rescue)
                    result << val[0] if val[0]

                    resbody = val[1]

                    while resbody do
                      result << resbody
                      resbody = resbody.resbody(true)
                    end

                    result << val[2] if val[2]

                    result.line = (val[0] || val[1]).line
                  elsif not val[2].nil? then
                    warning("else without rescue is useless")
                    result = block_append(result, val[2])
                  end

                  result = s(:ensure, result, val[3]).compact if val[3]
                  # result.minimize_line if result
                
    result
end

def _reduce_4(val, _values, result)
                 result = void_stmts(val[0])
                 result = remove_begin(result) if result
               
    result
end

# reduce 5 omitted

# reduce 6 omitted

def _reduce_7(val, _values, result)
                 result = self.block_append(val[0], val[2])
               
    result
end

def _reduce_8(val, _values, result)
                 result = val[1];
               
    result
end

def _reduce_9(val, _values, result)
                  lexer.lex_state = :expr_fname
                  result = self.lexer.lineno
                
    result
end

def _reduce_10(val, _values, result)
                  result = s(:alias, val[1], val[3]).line(val[2])
                
    result
end

def _reduce_11(val, _values, result)
                  result = s(:valias, val[1].to_sym, val[2].to_sym)
                 
    result
end

def _reduce_12(val, _values, result)
                 result = s(:valias, val[1].to_sym, :"$#{val[2]}")
               
    result
end

def _reduce_13(val, _values, result)
                  yyerror("can't make alias for the number variables");
                 
    result
end

def _reduce_14(val, _values, result)
                  result = val[1]
                 
    result
end

def _reduce_15(val, _values, result)
                 val[2] = cond val[2]
                 if val[2][0] == :not then
                   result = s(:if, val[2].last, nil, val[0])
                 else
                   result = s(:if, val[2], val[0], nil)
                 end
               
    result
end

def _reduce_16(val, _values, result)
                 val[2] = cond val[2]
                 if val[2][0] == :not then
                   result = s(:if, val[2].last, val[0], nil)
                 else
                   result = s(:if, val[2], nil, val[0])
                 end
               
    result
end

def _reduce_17(val, _values, result)
                 block, expr, pre = val[0], val[2], true
                 line = block.line

                 block, pre = block.last, false if block[0] == :begin

                 expr = cond expr
                 if expr.first == :not then
                   result = s(:until, expr.last, block, pre)
                 else
                   result = s(:while, expr, block, pre)
                 end

                 result.line = line
               
    result
end

def _reduce_18(val, _values, result)
 # REFACTOR
                 block, expr, pre = val[0], val[2], true
                 line = block.line

                 block, pre = block.last, false if block[0] == :begin

                 expr = cond expr
                 if expr[0] == :not then
                   result = s(:while, expr.last, block, pre)
                 else
                   result = s(:until, expr, block, pre)
                 end
                 result.line = line
               
    result
end

def _reduce_19(val, _values, result)
                  result = s(:rescue, val[0], s(:resbody, s(:array), val[2]))
                  result.minimize_line
                 
    result
end

def _reduce_20(val, _values, result)
                 if (self.in_def || self.in_single > 0) then
                   # yyerror("BEGIN in method"); HACK
                 end
                 self.env.extend;
               
    result
end

def _reduce_21(val, _values, result)
                 result = new_iter s(:preexe), nil, val[3] # TODO: add test?
                 result = nil # TODO: since it isn't supposed to go in the AST
               
    result
end

def _reduce_22(val, _values, result)
                 if (self.in_def || self.in_single > 0) then
                   # yyerror("END in method; use at_exit"); HACK
                 end
                 result = new_iter s(:postexe), nil, val[2]
               
    result
end

def _reduce_23(val, _values, result)
                  result = self.node_assign(val[0], val[2])
                 
    result
end

def _reduce_24(val, _values, result)
                  val[2] = value_expr(val[2])
                  result = val[0] << if val[0][1] then
                                       s(:to_ary, val[2])
                                     else
                                       val[0].delete_at 1 # remove the nil
                                       s(:array, val[2])
                                     end
                 
    result
end

def _reduce_25(val, _values, result)
                  name = val[0].last
                  asgn_op = val[1].to_sym
                  val[2] = value_expr(val[2])

                  case asgn_op
                  when :"||" then
                    val[0][2] = (val[2]);
                    result = s(:op_asgn_or,  self.gettable(name), val[0])
                  when :"&&" then
                    val[0][2] = (val[2]);
                    result = s(:op_asgn_and, self.gettable(name), val[0])
                  else
                    result = val[0]
                    result << new_call(self.gettable(name), asgn_op,
                                s(:arglist, val[2]))
                  end
                  # result.line = val[0].line
                 
    result
end

def _reduce_26(val, _values, result)
                  result = s(:op_asgn1, val[0], val[2], val[4].to_sym, val[5]);
                 
    result
end

def _reduce_27(val, _values, result)
                  result = s(:op_asgn, val[0], val[4], val[2], val[3]);
                 
    result
end

def _reduce_28(val, _values, result)
                  result = s(:op_asgn, val[0], val[4], val[2], val[3]);
                 
    result
end

def _reduce_29(val, _values, result)
                  result = s(:op_asgn, val[0], val[4], val[2], val[3]);
                 
    result
end

def _reduce_30(val, _values, result)
                  self.backref_assign_error(val[0]);
                 
    result
end

def _reduce_31(val, _values, result)
                  result = self.node_assign(val[0], s(:svalue, val[2]))
                 
    result
end

def _reduce_32(val, _values, result)
                 result = val[0] << if val[0][1] then
                                      s(:to_ary, val[2])
                                    else
                                      val[0].delete_at 1 if val[0][1].nil?
                                      s(:array, val[2])
                                    end
               
    result
end

def _reduce_33(val, _values, result)
                 val[0].delete_at 1 if val[0][1].nil?
                 result = val[0] << val[2]
               
    result
end

# reduce 34 omitted

# reduce 35 omitted

def _reduce_36(val, _values, result)
                  result = logop(:and, val[0], val[2])
                 
    result
end

def _reduce_37(val, _values, result)
                  result = logop(:or, val[0], val[2])
                 
    result
end

def _reduce_38(val, _values, result)
                  result = s(:not, val[1])
                 
    result
end

def _reduce_39(val, _values, result)
                  result = s(:not, val[1])
                 
    result
end

# reduce 40 omitted

def _reduce_41(val, _values, result)
                  result = value_expr(val[0])
                
    result
end

# reduce 42 omitted

# reduce 43 omitted

def _reduce_44(val, _values, result)
                 result = s(:return, ret_args(val[1]))
               
    result
end

def _reduce_45(val, _values, result)
                 result = s(:break, ret_args(val[1]))
               
    result
end

def _reduce_46(val, _values, result)
                 result = s(:next, ret_args(val[1]))
               
    result
end

# reduce 47 omitted

def _reduce_48(val, _values, result)
                  result = new_call val[0], val[2], val[3]
                
    result
end

def _reduce_49(val, _values, result)
                  result = new_call val[0], val[2], val[3]
                
    result
end

def _reduce_50(val, _values, result)
                    self.env.extend :dynamic
                    result = self.lexer.lineno
                  
    result
end

def _reduce_51(val, _values, result)
 result = self.env.dynamic.keys 
    result
end

def _reduce_52(val, _values, result)
                    result = new_iter nil, val[2], val[4]
                    result.line = val[1]
                    self.env.unextend
                  
    result
end

def _reduce_53(val, _values, result)
                 result = new_call nil, val[0].to_sym, val[1]
               
    result
end

def _reduce_54(val, _values, result)
                 result = new_call nil, val[0].to_sym, val[1]
                 if val[2] then
                   if result[0] == :block_pass then
                      raise "both block arg and actual block given"
                   end
                   result, operation = val[2], result
                   result.insert 1, operation
                 end
               
    result
end

def _reduce_55(val, _values, result)
                 result = new_call val[0], val[2].to_sym, val[3]
               
    result
end

def _reduce_56(val, _values, result)
                 result = new_call val[0], val[2].to_sym, val[3]
               
    result
end

def _reduce_57(val, _values, result)
                 result = new_call val[0], val[2].to_sym, val[3]
               
    result
end

def _reduce_58(val, _values, result)
                 result = new_call val[0], val[2].to_sym, val[3]
                 if val[4] then
                   if result[0] == :block_pass then # REFACTOR
                     raise "both block arg and actual block given"
                   end
                   val[2] << result
                   result = val[2]
                 end
               
    result
end

def _reduce_59(val, _values, result)
                 result = new_super val[1]
               
    result
end

def _reduce_60(val, _values, result)
                 result = new_yield val[1]
               
    result
end

# reduce 61 omitted

def _reduce_62(val, _values, result)
                  result = val[1];
                 
    result
end

# reduce 63 omitted

def _reduce_64(val, _values, result)
                  result = s(:masgn, s(:array, val[1]));
                
    result
end

def _reduce_65(val, _values, result)
                  result = s(:masgn, val[0]);
                
    result
end

def _reduce_66(val, _values, result)
                  result = s(:masgn, val[0] << val[1].compact);
                
    result
end

def _reduce_67(val, _values, result)
                  result = s(:masgn, val[0], val[2]);
                
    result
end

def _reduce_68(val, _values, result)
                  result = s(:masgn, val[0], s(:splat))
                
    result
end

def _reduce_69(val, _values, result)
                  result = s(:masgn, nil, val[1]);
                
    result
end

def _reduce_70(val, _values, result)
                  result = s(:masgn, nil, s(:splat))
                
    result
end

# reduce 71 omitted

def _reduce_72(val, _values, result)
                  result = val[1];
                
    result
end

def _reduce_73(val, _values, result)
                  result = s(:array, val[0])
                
    result
end

def _reduce_74(val, _values, result)
                  result = val[0] << val[1].compact
                
    result
end

def _reduce_75(val, _values, result)
                 result = self.assignable(val[0])
               
    result
end

def _reduce_76(val, _values, result)
                 result = self.aryset(val[0], val[2]);
               
    result
end

def _reduce_77(val, _values, result)
                 result = s(:attrasgn, val[0], :"#{val[2]}=", s(:arglist));
               
    result
end

def _reduce_78(val, _values, result)
                 result = s(:attrasgn, val[0], :"#{val[2]}=", s(:arglist));
               
    result
end

def _reduce_79(val, _values, result)
                 result = s(:attrasgn, val[0], :"#{val[2]}=", s(:arglist));
               
    result
end

def _reduce_80(val, _values, result)
                 if (self.in_def || self.in_single > 0) then
                   yyerror("dynamic constant assignment");
                 end

                 result = s(:const, s(:colon2, val[0], val[2].to_sym), nil)
               
    result
end

def _reduce_81(val, _values, result)
                 if (self.in_def || self.in_single > 0) then
                   yyerror("dynamic constant assignment");
                 end

                 result = s(:const, nil, s(:colon3, val[1].to_sym))
               
    result
end

def _reduce_82(val, _values, result)
                  self.backref_assign_error(val[0]);
                 
    result
end

def _reduce_83(val, _values, result)
                 result = self.assignable(val[0])
               
    result
end

def _reduce_84(val, _values, result)
                 result = self.aryset(val[0], val[2]);
               
    result
end

def _reduce_85(val, _values, result)
                 result = s(:attrasgn, val[0], :"#{val[2]}=")
               
    result
end

def _reduce_86(val, _values, result)
                 result = s(:attrasgn, val[0], :"#{val[2]}=")
               
    result
end

def _reduce_87(val, _values, result)
                 result = s(:attrasgn, val[0], :"#{val[2]}=")
               
    result
end

def _reduce_88(val, _values, result)
                 if (self.in_def || self.in_single > 0) then
                   yyerror("dynamic constant assignment")
                 end

                 result = s(:const,
                            s(:colon2, val[0], val[2].to_sym))
                 
    result
end

def _reduce_89(val, _values, result)
                  if (self.in_def || self.in_single > 0) then
                    yyerror("dynamic constant assignment");
                  end

                  result = s(:const, s(:colon3, val[1].to_sym))
                  
    result
end

def _reduce_90(val, _values, result)
                   self.backref_assign_error(val[0]);
                 
    result
end

def _reduce_91(val, _values, result)
                  yyerror("class/module name must be CONSTANT");
                 
    result
end

# reduce 92 omitted

def _reduce_93(val, _values, result)
                  result = s(:colon3, val[1].to_sym)
                 
    result
end

def _reduce_94(val, _values, result)
                  result = val[0].to_sym
                 
    result
end

def _reduce_95(val, _values, result)
                  result = s(:colon2, val[0], val[2].to_sym);
                 
    result
end

# reduce 96 omitted

# reduce 97 omitted

# reduce 98 omitted

def _reduce_99(val, _values, result)
                  lexer.lex_state = :expr_end
                  result = val[0];
                
    result
end

def _reduce_100(val, _values, result)
                  lexer.lex_state = :expr_end
                  result = val[0];
                
    result
end

def _reduce_101(val, _values, result)
 result = s(:lit, val[0].to_sym) 
    result
end

def _reduce_102(val, _values, result)
 result = s(:lit, val[0]) 
    result
end

def _reduce_103(val, _values, result)
                  result = s(:undef, val[0])
                 
    result
end

def _reduce_104(val, _values, result)
                  lexer.lex_state = :expr_fname
                
    result
end

def _reduce_105(val, _values, result)
                  result = self.block_append(val[0], s(:undef, val[3]))
                
    result
end

# reduce 106 omitted

# reduce 107 omitted

# reduce 108 omitted

# reduce 109 omitted

# reduce 110 omitted

# reduce 111 omitted

# reduce 112 omitted

# reduce 113 omitted

# reduce 114 omitted

# reduce 115 omitted

# reduce 116 omitted

# reduce 117 omitted

# reduce 118 omitted

# reduce 119 omitted

# reduce 120 omitted

# reduce 121 omitted

# reduce 122 omitted

# reduce 123 omitted

# reduce 124 omitted

# reduce 125 omitted

# reduce 126 omitted

# reduce 127 omitted

# reduce 128 omitted

# reduce 129 omitted

# reduce 130 omitted

# reduce 131 omitted

# reduce 132 omitted

# reduce 133 omitted

# reduce 134 omitted

# reduce 135 omitted

# reduce 136 omitted

# reduce 137 omitted

# reduce 138 omitted

# reduce 139 omitted

# reduce 140 omitted

# reduce 141 omitted

# reduce 142 omitted

# reduce 143 omitted

# reduce 144 omitted

# reduce 145 omitted

# reduce 146 omitted

# reduce 147 omitted

# reduce 148 omitted

# reduce 149 omitted

# reduce 150 omitted

# reduce 151 omitted

# reduce 152 omitted

# reduce 153 omitted

# reduce 154 omitted

# reduce 155 omitted

# reduce 156 omitted

# reduce 157 omitted

# reduce 158 omitted

# reduce 159 omitted

# reduce 160 omitted

# reduce 161 omitted

# reduce 162 omitted

# reduce 163 omitted

# reduce 164 omitted

# reduce 165 omitted

# reduce 166 omitted

# reduce 167 omitted

# reduce 168 omitted

# reduce 169 omitted

# reduce 170 omitted

# reduce 171 omitted

# reduce 172 omitted

def _reduce_173(val, _values, result)
                 result = self.node_assign(val[0], val[2])
               
    result
end

def _reduce_174(val, _values, result)
                 result = self.node_assign(val[0],
                            s(:rescue, val[2], s(:resbody, s(:array), val[4])))
                 # result.line = val[0].line
               
    result
end

def _reduce_175(val, _values, result)
                 lhs, asgn_op, arg = val[0], val[1].to_sym, val[2]
                 name = lhs.value

                 arg = remove_begin(arg)

                 result = case asgn_op # REFACTOR
                          when :"||" then
                            lhs << arg
                            s(:op_asgn_or, self.gettable(name), lhs)
                          when :"&&" then
                            lhs << arg
                            s(:op_asgn_and, self.gettable(name), lhs)
                          else
                            # TODO: why [2] ?
                            lhs[2] = new_call(self.gettable(name), asgn_op,
                                              s(:arglist, arg))
                            lhs
                          end
                 result.line = lhs.line
               
    result
end

def _reduce_176(val, _values, result)
                  result = s(:op_asgn1, val[0], val[2], val[4].to_sym, val[5]);
                  val[2][0] = :arglist
                 
    result
end

def _reduce_177(val, _values, result)
                  result = s(:op_asgn2, val[0], :"#{val[2]}=", val[3].to_sym, val[4]);
                 
    result
end

def _reduce_178(val, _values, result)
                  result = s(:op_asgn2, val[0], :"#{val[2]}=", val[3].to_sym, val[4])
                 
    result
end

def _reduce_179(val, _values, result)
                  result = s(:op_asgn, val[0], val[4], val[2], val[3]);
                 
    result
end

def _reduce_180(val, _values, result)
                 yyerror("constant re-assignment");
                 
    result
end

def _reduce_181(val, _values, result)
                 yyerror("constant re-assignment");
                 
    result
end

def _reduce_182(val, _values, result)
                  self.backref_assign_error(val[0]);
                 
    result
end

def _reduce_183(val, _values, result)
                 v1, v2 = val[0], val[2]
                 if v1.node_type == :lit and v2.node_type == :lit and Fixnum === v1.last and Fixnum === v2.last then
                   result = s(:lit, (v1.last)..(v2.last))
                 else
                   result = s(:dot2, v1, v2)
                 end
               
    result
end

def _reduce_184(val, _values, result)
                 v1, v2 = val[0], val[2]
                 if v1.node_type == :lit and v2.node_type == :lit and Fixnum === v1.last and Fixnum === v2.last then
                   result = s(:lit, (v1.last)...(v2.last))
                 else
                   result = s(:dot3, v1, v2)
                 end
               
    result
end

def _reduce_185(val, _values, result)
                  result = new_call val[0], :+, s(:arglist, val[2])
                 
    result
end

def _reduce_186(val, _values, result)
                  result = new_call val[0], :-, s(:arglist, val[2])
                 
    result
end

def _reduce_187(val, _values, result)
                  result = new_call val[0], :*, s(:arglist, val[2])
                 
    result
end

def _reduce_188(val, _values, result)
                  result = new_call val[0], :"/", s(:arglist, val[2])
                 
    result
end

def _reduce_189(val, _values, result)
                  result = new_call val[0], :%, s(:arglist, val[2])
                 
    result
end

def _reduce_190(val, _values, result)
                 result = new_call val[0], :**, s(:arglist, val[2])
                 
    result
end

def _reduce_191(val, _values, result)
                  result = new_call(new_call(s(:lit, val[1]), :"**", s(:arglist, val[3])), :"-@", s(:arglist))
                 
    result
end

def _reduce_192(val, _values, result)
                  result = new_call(new_call(s(:lit, val[1]), :"**", s(:arglist, val[3])), :"-@", s(:arglist));
                 
    result
end

def _reduce_193(val, _values, result)
                  if val[1][0] == :lit then
                    result = val[1]
                  else
                    result = new_call val[1], :"+@", s(:arglist)
                  end
                 
    result
end

def _reduce_194(val, _values, result)
                  result = new_call val[1], :"-@", s(:arglist)
                 
    result
end

def _reduce_195(val, _values, result)
                  result = new_call val[0], :"|", s(:arglist, val[2])
                 
    result
end

def _reduce_196(val, _values, result)
                  result = new_call val[0], :"^", s(:arglist, val[2])
                 
    result
end

def _reduce_197(val, _values, result)
                  result = new_call val[0], :"&", s(:arglist, val[2])
                 
    result
end

def _reduce_198(val, _values, result)
                  result = new_call val[0], :"<=>", s(:arglist, val[2])
                 
    result
end

def _reduce_199(val, _values, result)
                  result = new_call val[0], :">", s(:arglist, val[2])
                 
    result
end

def _reduce_200(val, _values, result)
                  result = new_call val[0], :">=", s(:arglist, val[2])
                 
    result
end

def _reduce_201(val, _values, result)
                  result = new_call val[0], :"<", s(:arglist, val[2])
                 
    result
end

def _reduce_202(val, _values, result)
                  result = new_call val[0], :"<=", s(:arglist, val[2])
                 
    result
end

def _reduce_203(val, _values, result)
                  result = new_call val[0], :"==", s(:arglist, val[2])
                 
    result
end

def _reduce_204(val, _values, result)
                  result = new_call val[0], :"===", s(:arglist, val[2])
                 
    result
end

def _reduce_205(val, _values, result)
                  val[0] = value_expr val[0] # TODO: port call_op and clean these
                  val[2] = value_expr val[2]
                  result = s(:not, new_call(val[0], :"==", s(:arglist, val[2])))
                 
    result
end

def _reduce_206(val, _values, result)
                  result = self.get_match_node(val[0], val[2])
                 
    result
end

def _reduce_207(val, _values, result)
                  result = s(:not, self.get_match_node(val[0], val[2]))
                 
    result
end

def _reduce_208(val, _values, result)
                  result = s(:not, val[1])
                 
    result
end

def _reduce_209(val, _values, result)
                  val[2] = value_expr val[2]
                  result = new_call val[1], :"~", s(:arglist)
                 
    result
end

def _reduce_210(val, _values, result)
                  val[0] = value_expr val[0]
                  val[2] = value_expr val[2]
                  result = new_call val[0], :"\<\<", s(:arglist, val[2])
                 
    result
end

def _reduce_211(val, _values, result)
                  val[0] = value_expr val[0]
                  val[2] = value_expr val[2]
                  result = new_call val[0], :">>", s(:arglist, val[2])
                 
    result
end

def _reduce_212(val, _values, result)
                  result = logop(:and, val[0], val[2])
                 
    result
end

def _reduce_213(val, _values, result)
                  result = logop(:or, val[0], val[2])
                 
    result
end

def _reduce_214(val, _values, result)
                  result = s(:defined, val[2]);
                 
    result
end

def _reduce_215(val, _values, result)
                 result = s(:if, val[0], val[2], val[4]);
               
    result
end

# reduce 216 omitted

def _reduce_217(val, _values, result)
                  result = value_expr(val[0])
                 
    result
end

# reduce 218 omitted

def _reduce_219(val, _values, result)
                 warning("parenthesize argument(s) for future version");
                 result = s(:array, val[0]);
               
    result
end

def _reduce_220(val, _values, result)
                 result = val[0];
               
    result
end

def _reduce_221(val, _values, result)
                 result = self.arg_concat(val[0], val[3])
               
    result
end

def _reduce_222(val, _values, result)
                 result = s(:array, s(:hash, *val[0].values))
               
    result
end

def _reduce_223(val, _values, result)
                 result = s(:splat, val[1])
                 result.paren = true
               
    result
end

def _reduce_224(val, _values, result)
                  result = val[1]
                 
    result
end

def _reduce_225(val, _values, result)
                  result = val[1];
                 
    result
end

def _reduce_226(val, _values, result)
                  warning("parenthesize argument(s) for future version");
                  result = s(:array, val[1]);
                 
    result
end

def _reduce_227(val, _values, result)
                  warning("parenthesize argument(s) for future version");
                  result = val[1].add(val[3]);
                 
    result
end

# reduce 228 omitted

# reduce 229 omitted

def _reduce_230(val, _values, result)
                  warning("parenthesize argument(s) for future version");
                  result = s(:array, val[0])
                 
    result
end

def _reduce_231(val, _values, result)
                 result = self.arg_blk_pass(val[0], val[1]);
               
    result
end

def _reduce_232(val, _values, result)
                 result = self.arg_concat(val[0], val[3]);
                 result = self.arg_blk_pass(result, val[4]);
               
    result
end

def _reduce_233(val, _values, result)
                 result = s(:array, s(:hash, *val[0].values))
                 result = self.arg_blk_pass(result, val[1]);
               
    result
end

def _reduce_234(val, _values, result)
                 result = self.arg_concat(s(:array, s(:hash, *val[0].values)), val[3])
                 result = self.arg_blk_pass(result, val[4]);
               
    result
end

def _reduce_235(val, _values, result)
                 result = val[0] << s(:hash, *val[2].values)
                 result = self.arg_blk_pass(result, val[3]);
               
    result
end

def _reduce_236(val, _values, result)
                 val[0] << s(:hash, *val[2].values)
                 result = self.arg_concat(val[0], val[5])
                 result = self.arg_blk_pass(result, val[6]);
               
    result
end

def _reduce_237(val, _values, result)
                  result = self.arg_blk_pass(s(:splat, val[1]), val[2])
                 
    result
end

# reduce 238 omitted

def _reduce_239(val, _values, result)
                  args = self.list_prepend(val[0], val[2])
                  result = self.arg_blk_pass(args, val[3])
                 
    result
end

def _reduce_240(val, _values, result)
                  result = self.arg_blk_pass(val[0], val[2]);
                 
    result
end

def _reduce_241(val, _values, result)
                  result = self.arg_concat(s(:array, val[0]), val[3]);
                  result = self.arg_blk_pass(result, val[4]);
                 
    result
end

def _reduce_242(val, _values, result)
                  result = self.arg_concat(s(:array, val[0], s(:hash, *val[2].values)), val[5])
                  result = self.arg_blk_pass(result, val[6]);
                 
    result
end

def _reduce_243(val, _values, result)
                  result = s(:array, s(:hash, *val[0].values));
                  result = self.arg_blk_pass(result, val[1]);
                 
    result
end

def _reduce_244(val, _values, result)
                  result = s(:array, s(:hash, *val[0].values), val[3])
                  result = self.arg_blk_pass(result, val[4])
                 
    result
end

def _reduce_245(val, _values, result)
                  result = s(:array, val[0], s(:hash, *val[2].values))
                  result = self.arg_blk_pass(result, val[3])
                 
    result
end

def _reduce_246(val, _values, result)
                  result = s(:array, val[0]).add_all(val[2]).add(s(:hash, *val[4].values));
                  result = self.arg_blk_pass(result, val[5]);
                 
    result
end

def _reduce_247(val, _values, result)
                  result = self.arg_concat(s(:array, val[0]).add(s(:hash, *val[2].values)), val[5]);
                  result = self.arg_blk_pass(result, val[6]);
                 
    result
end

def _reduce_248(val, _values, result)
                  result = self.arg_concat(s(:array, val[0]).add_all(val[2]).add(s(:hash, *val[4].values)), val[7]);
                  result = self.arg_blk_pass(result, val[8]);
                 
    result
end

def _reduce_249(val, _values, result)
                  result = self.arg_blk_pass(s(:splat, val[1]), val[2]);
                 
    result
end

# reduce 250 omitted

def _reduce_251(val, _values, result)
                  result = lexer.cmdarg.stack.dup
                  lexer.cmdarg.push true
                
    result
end

def _reduce_252(val, _values, result)
                  lexer.cmdarg.stack.replace val[0]
                  result = val[1]
                
    result
end

# reduce 253 omitted

def _reduce_254(val, _values, result)
                 lexer.lex_state = :expr_endarg
               
    result
end

def _reduce_255(val, _values, result)
                  warning("don't put space before argument parentheses");
                  result = nil;
                 
    result
end

def _reduce_256(val, _values, result)
                 lexer.lex_state = :expr_endarg
               
    result
end

def _reduce_257(val, _values, result)
                  warning("don't put space before argument parentheses");
                  result = val[1];
                 
    result
end

def _reduce_258(val, _values, result)
                  result = s(:block_pass, val[1]);
                 
    result
end

def _reduce_259(val, _values, result)
                  result = val[1];
                 
    result
end

# reduce 260 omitted

def _reduce_261(val, _values, result)
                 result = s(:array, val[0])
               
    result
end

def _reduce_262(val, _values, result)
                 result = self.list_append(val[0], val[2])
               
    result
end

def _reduce_263(val, _values, result)
                 result = val[0] << val[2]
               
    result
end

def _reduce_264(val, _values, result)
                 result = self.arg_concat(val[0], val[3])
               
    result
end

def _reduce_265(val, _values, result)
                 result = s(:splat, val[1])
               
    result
end

# reduce 266 omitted

# reduce 267 omitted

# reduce 268 omitted

# reduce 269 omitted

# reduce 270 omitted

# reduce 271 omitted

# reduce 272 omitted

# reduce 273 omitted

def _reduce_274(val, _values, result)
                 result = new_call nil, val[0].to_sym
               
    result
end

def _reduce_275(val, _values, result)
                 result = self.lexer.lineno
               
    result
end

def _reduce_276(val, _values, result)
                 unless val[2] then
                   result = s(:nil)
                 else
                   result = s(:begin, val[2])
                 end

                 result.line = val[1]
               
    result
end

def _reduce_277(val, _values, result)
                  lexer.lex_state = :expr_endarg
               
    result
end

def _reduce_278(val, _values, result)
                  warning("(...) interpreted as grouped expression");
                  result = val[1];
                 
    result
end

def _reduce_279(val, _values, result)
                 result = val[1];
                 result.paren = true
                 
    result
end

def _reduce_280(val, _values, result)
                 result = s(:colon2, val[0], val[2].to_sym)
               
    result
end

def _reduce_281(val, _values, result)
                 result = s(:colon3, val[1].to_sym)
               
    result
end

def _reduce_282(val, _values, result)
                 val[2] ||= s(:arglist)
                 val[2][0] = :arglist if val[2][0] == :array # REFACTOR
                 if val[0].node_type == :self then
                   result = new_call nil, :"[]", val[2]
                 else
                   result = new_call val[0], :"[]", val[2]
                 end
               
    result
end

def _reduce_283(val, _values, result)
                  result = val[1] || s(:array)
                 
    result
end

def _reduce_284(val, _values, result)
                 result = s(:hash, *val[1].values)
               
    result
end

def _reduce_285(val, _values, result)
                 result = s(:return)
               
    result
end

def _reduce_286(val, _values, result)
                 result = new_yield val[2]
               
    result
end

def _reduce_287(val, _values, result)
                 result = new_yield
               
    result
end

def _reduce_288(val, _values, result)
                 result = new_yield
               
    result
end

def _reduce_289(val, _values, result)
                 result = s(:defined, val[3]);
               
    result
end

def _reduce_290(val, _values, result)
                 oper = val[0]
                 iter = val[1]
                 call = new_call(nil, oper.to_sym)
                 iter.insert 1, call
                 result = iter
                 call.line ||= iter.line
               
    result
end

# reduce 291 omitted

def _reduce_292(val, _values, result)
                 call = val[0]
                 iter = val[1]
                 iter.insert 1, call
                 result = iter
               
    result
end

def _reduce_293(val, _values, result)
                 val[1] = cond val[1]
                 if val[1][0] == :not then
                   result = s(:if, val[1].last, val[4], val[3])
                 else
                   result = s(:if, val[1], val[3], val[4])
                 end
                 # result.minimize_line
               
    result
end

def _reduce_294(val, _values, result)
                 val[1] = cond val[1]
                 if val[1][0] == :not then
                   result = s(:if, val[1].last, val[3], val[4])
                 else
                   result = s(:if, val[1], val[4], val[3])
                 end
                 # result.minimize_line
               
    result
end

def _reduce_295(val, _values, result)
                 lexer.cond.push true
               
    result
end

def _reduce_296(val, _values, result)
                 lexer.cond.pop
               
    result
end

def _reduce_297(val, _values, result)
                 block = val[5]
                 cond = self.cond val[2]
                 if cond[0] == :not then
                   result = s(:until, cond.last, block, true)
                 else
                   result = s(:while, cond, block, true)
                 end
                 # result.minimize_line
               
    result
end

def _reduce_298(val, _values, result)
                 lexer.cond.push true
               
    result
end

def _reduce_299(val, _values, result)
                 lexer.cond.pop
               
    result
end

def _reduce_300(val, _values, result)
                 block = val[5]
                 val[2] = cond val[2]
                 if val[2][0] == :not then
                   result = s(:while, val[2].last, block, true) # .line(val[0].line)
                 else
                   result = s(:until, val[2], block, true) # .line(val[0].line)
                 end
                 # result.minimize_line
               
    result
end

def _reduce_301(val, _values, result)
                  expr, body = val[1], val[3]
                  result = s(:case, expr);

                  while body and body.node_type == :when
                    result << body
                    body = body.delete_at 3
                  end

                  els = body

                  if els and els != s(:block) then
                    result << els
                  else
                    result << nil
                  end
                  # result.minimize_line
                 
    result
end

def _reduce_302(val, _values, result)
                  line, body = val[1], val[2]
                  result = s(:case, nil) # REFACTOR

                  while body and body.first == :when
                    result << body
                    body = body.delete_at 3
                  end

                  els = body

                  if els and els != s(:block) then
                    result << els
                  else
                    result << nil
                  end
                  result.minimize_line
               
    result
end

def _reduce_303(val, _values, result)
 # TODO: need a test
                 result = s(:case, nil, val[3])
                 # result.minimize_line
               
    result
end

def _reduce_304(val, _values, result)
                 lexer.cond.push true
               
    result
end

def _reduce_305(val, _values, result)
                 lexer.cond.pop;
               
    result
end

def _reduce_306(val, _values, result)
                 result = s(:for, val[4], val[1]) # .line(val[0].line)
                 result << val[7] if val[7]
               
    result
end

def _reduce_307(val, _values, result)
                 result = self.lexer.lineno
               
    result
end

def _reduce_308(val, _values, result)
                 self.comments.push self.lexer.comments
                 if (self.in_def || self.in_single > 0) then
                   yyerror("class definition in method body");
                 end
                 self.env.extend
               
    result
end

def _reduce_309(val, _values, result)
                 line, path, superclass, body = val[1], val[2], val[3], val[5]
                 scope = s(:scope, body).compact
                 result = s(:class, path, superclass, scope)
                 result.line = line
                 result.comments = self.comments.pop
                 self.env.unextend
               
    result
end

def _reduce_310(val, _values, result)
                 result = self.lexer.lineno
               
    result
end

def _reduce_311(val, _values, result)
                 result = self.in_def
                 self.in_def = false
               
    result
end

def _reduce_312(val, _values, result)
                 result = self.in_single
                 self.in_single = 0
                 self.env.extend
               
    result
end

def _reduce_313(val, _values, result)
                 recv, in_def, in_single, body = val[3], val[4], val[6], val[7]
                 scope = s(:scope, body).compact
                 result = s(:sclass, recv, scope)
                 result.line = val[2]
                 self.env.unextend
                 self.in_def = in_def
                 self.in_single = in_single
               
    result
end

def _reduce_314(val, _values, result)
                 result = self.lexer.lineno
               
    result
end

def _reduce_315(val, _values, result)
                 self.comments.push self.lexer.comments
                 yyerror("module definition in method body") if
                   self.in_def or self.in_single > 0

                 self.env.extend;
               
    result
end

def _reduce_316(val, _values, result)
                 line, path, body = val[1], val[2], val[4]
                 body = s(:scope, body).compact
                 result = s(:module, path, body)
                 result.line = line
                 result.comments = self.comments.pop
                 self.env.unextend;
               
    result
end

def _reduce_317(val, _values, result)
                 self.comments.push self.lexer.comments
                 self.in_def = true
                 self.env.extend
                 result = self.lexer.lineno
               
    result
end

def _reduce_318(val, _values, result)
 # TODO: refactor
                 line, name, args, body = val[2], val[1], val[3], val[4]
                 body ||= s(:nil)

                 body ||= s(:block)
                 body = s(:block, body) unless body.first == :block

                 result = s(:defn, name.to_sym, args, s(:scope, body))
                 result.line = line
                 result.comments = self.comments.pop

                 self.env.unextend
                 self.in_def = false
               
    result
end

def _reduce_319(val, _values, result)
                 self.comments.push self.lexer.comments
                 lexer.lex_state = :expr_fname
               
    result
end

def _reduce_320(val, _values, result)
                 self.in_single += 1
                 self.env.extend;
                 lexer.lex_state = :expr_end # force for args
               
    result
end

def _reduce_321(val, _values, result)
                 recv, name, args, body = val[1], val[4], val[6], val[7]
                 # recv, name, args, body = val[2], val[5], val[7], val[8]

                 body ||= s(:block)
                 body = s(:block, body) unless body.first == :block

                 result = s(:defs, recv, name.to_sym, args, s(:scope, body))
                 # result.line = val[1]
                 result.comments = self.comments.pop

                 self.env.unextend;
                 self.in_single -= 1
               
    result
end

def _reduce_322(val, _values, result)
                result = s(:break)
               
    result
end

def _reduce_323(val, _values, result)
                result = s(:next)
               
    result
end

def _reduce_324(val, _values, result)
                result = s(:redo)
               
    result
end

def _reduce_325(val, _values, result)
                result = s(:retry)
               
    result
end

def _reduce_326(val, _values, result)
                  result = value_expr(val[0])
                
    result
end

# reduce 327 omitted

# reduce 328 omitted

# reduce 329 omitted

# reduce 330 omitted

# reduce 331 omitted

# reduce 332 omitted

# reduce 333 omitted

# reduce 334 omitted

def _reduce_335(val, _values, result)
                  result = s(:if, val[1], val[3], val[4]);
              
    result
end

# reduce 336 omitted

def _reduce_337(val, _values, result)
                  result = val[1];
              
    result
end

# reduce 338 omitted

def _reduce_339(val, _values, result)
 val[0].delete_at 1 if val[0][1].nil? 
    result
end

# reduce 340 omitted

def _reduce_341(val, _values, result)
                  result = 0
              
    result
end

def _reduce_342(val, _values, result)
                  result = 0
                
    result
end

def _reduce_343(val, _values, result)
                  result = val[1];
              
    result
end

def _reduce_344(val, _values, result)
                  self.env.extend :dynamic
                
    result
end

def _reduce_345(val, _values, result)
 result = self.env.dynamic.keys 
    result
end

def _reduce_346(val, _values, result)
                  vars   = val[2]
                  body   = val[4]
                  result = new_iter nil, vars, body

                  self.env.unextend
                
    result
end

def _reduce_347(val, _values, result)
                raise SyntaxError, "Both block arg and actual block given." if
                  val[0] && val[0][0] == :blockpass

                result = val[1]
                result.insert 1, val[0]
              
    result
end

def _reduce_348(val, _values, result)
                  result = new_call val[0], val[2]
                  result << val[3] || s(:arglist)
              
    result
end

def _reduce_349(val, _values, result)
                  result = new_call val[0], val[2]
                  result << val[3] || s(:arglist)
              
    result
end

def _reduce_350(val, _values, result)
                  result = self.lexer.lineno
                
    result
end

def _reduce_351(val, _values, result)
                  result = new_call nil, val[0].to_sym, val[2]
                  result.line = val[1]
                
    result
end

def _reduce_352(val, _values, result)
                  result = new_call val[0], val[2].to_sym, val[3]
                
    result
end

def _reduce_353(val, _values, result)
                  result = new_call val[0], val[2].to_sym, val[3]
                
    result
end

def _reduce_354(val, _values, result)
                  result = new_call val[0], val[2].to_sym
                  result.minimize_line
                
    result
end

def _reduce_355(val, _values, result)
                  result = new_super val[1]
                  result.minimize_line
                
    result
end

def _reduce_356(val, _values, result)
                  result = s(:zsuper)
                
    result
end

def _reduce_357(val, _values, result)
                  self.env.extend :dynamic
                  result = self.lexer.lineno
                
    result
end

def _reduce_358(val, _values, result)
 result = self.env.dynamic.keys 
    result
end

def _reduce_359(val, _values, result)
 # REFACTOR
                  args   = val[2]
                  body   = val[4]
                  result = new_iter nil, args, body
                  self.env.unextend
                  result.line = val[1]
                
    result
end

def _reduce_360(val, _values, result)
                  self.env.extend :dynamic
                  result = self.lexer.lineno
                
    result
end

def _reduce_361(val, _values, result)
 result = self.env.dynamic.keys 
    result
end

def _reduce_362(val, _values, result)
                  args = val[2]
                  body = val[4]
                  result = new_iter nil, args, body
                  self.env.unextend
                  result.line = val[1]
                
    result
end

def _reduce_363(val, _values, result)
                 result = self.lexer.lineno
               
    result
end

def _reduce_364(val, _values, result)
                  result = s(:when, val[2], val[4])
                  result.line = val[1]
                  result << val[5] if val[5]
                
    result
end

# reduce 365 omitted

def _reduce_366(val, _values, result)
                  result = self.list_append(val[0], s(:when, val[3], nil))
                
    result
end

def _reduce_367(val, _values, result)
                  result = s(:array, s(:when, val[1], nil));
                
    result
end

# reduce 368 omitted

# reduce 369 omitted

def _reduce_370(val, _values, result)
                  exc_list = val[1] || s(:array)

                  result = s(:resbody, exc_list)
                  # result.line = val[1]

                  if val[2] then
                    l = val[2].line
                    exc_list << node_assign(val[2], s(:gvar, :"$!").line(l))

                    val[4] = s(:block, val[4]).line(l) if
                      val[4] && val[4][0] != :block
                  end

                  result << val[4]
                  result << val[5] if val[5]
                 
    result
end

def _reduce_371(val, _values, result)
result = nil;
    result
end

def _reduce_372(val, _values, result)
                  result = s(:array, val[0]);
                 
    result
end

# reduce 373 omitted

# reduce 374 omitted

def _reduce_375(val, _values, result)
                  result = val[1];
                 
    result
end

# reduce 376 omitted

def _reduce_377(val, _values, result)
                  if (val[1] != nil) then
                      result = val[1];
                  else
                      result = s(:nil)
                  end
                 
    result
end

# reduce 378 omitted

def _reduce_379(val, _values, result)
 result = s(:lit, val[0]) 
    result
end

def _reduce_380(val, _values, result)
 result = s(:lit, val[0]) 
    result
end

# reduce 381 omitted

def _reduce_382(val, _values, result)
                  val[0] = s(:dstr, val[0].value) if val[0][0] == :evstr
                  result = val[0];
                
    result
end

# reduce 383 omitted

def _reduce_384(val, _values, result)
                  result = self.literal_concat(val[0], val[1]);
                
    result
end

def _reduce_385(val, _values, result)
                  result = val[1]
                
    result
end

def _reduce_386(val, _values, result)
                  node = val[1]

                  unless node then
                    node = s(:xstr, '')
                  else
                    case node[0]
                    when :str
                      node[0] = :xstr
                    when :dstr
                      node[0] = :dxstr
                    else
                      node = s(:dxstr, '', node)
                    end
                  end

                  result = node
                
    result
end

def _reduce_387(val, _values, result)
                  node = val[1] || s(:str, '')
                  options = val[2]

                  o, k = 0, nil
                  options.split(//).each do |c| # FIX: this has a better home
                    v = {
                         'x' => Regexp::EXTENDED,
                         'i' => Regexp::IGNORECASE,
                         'm' => Regexp::MULTILINE,
                         'o' => Regexp::ONCE,
                         'n' => Regexp::ENC_NONE,
                         'e' => Regexp::ENC_EUC,
                         's' => Regexp::ENC_SJIS,
                         'u' => Regexp::ENC_UTF8,
                         }[c]
                    raise "unknown regexp option: #{c}" unless v
                    o += v
                    k = c if c =~ /[esu]/
                  end

                  case node[0]
                  when :str then
                    node[0] = :lit
                    node[1] = if k then
                                Regexp.new(node[1], o, k)
                              else
                                Regexp.new(node[1], o)
                              end
                  when :dstr then
                    if options =~ /o/ then
                      node[0] = :dregx_once
                    else
                      node[0] = :dregx
                    end
                    node << o if o and o != 0
                  else
                    node = s(:dregx, '', node);
                    node[0] = :dregx_once if options =~ /o/
                    node << o if o and o != 0
                  end

                  result = node
                 
    result
end

def _reduce_388(val, _values, result)
                   result = s(:array);
                 
    result
end

def _reduce_389(val, _values, result)
                 result = val[1];
                 
    result
end

def _reduce_390(val, _values, result)
                   result = s(:array)
                 
    result
end

def _reduce_391(val, _values, result)
                   word = val[1][0] == :evstr ? s(:dstr, '', val[1]) : val[1]
                   result = val[0] << word
                 
    result
end

# reduce 392 omitted

def _reduce_393(val, _values, result)
                   result = self.literal_concat(val[0], val[1]);
                 
    result
end

def _reduce_394(val, _values, result)
                   result = s(:array)
                 
    result
end

def _reduce_395(val, _values, result)
                   result = val[1]
                 
    result
end

def _reduce_396(val, _values, result)
                   result = s(:array)
                 
    result
end

def _reduce_397(val, _values, result)
                   result = val[0] << val[1]
                 
    result
end

def _reduce_398(val, _values, result)
 result = s(:str, "") 
    result
end

def _reduce_399(val, _values, result)
                     result = literal_concat(val[0], val[1])
                   
    result
end

def _reduce_400(val, _values, result)
 result = nil 
    result
end

def _reduce_401(val, _values, result)
                    result = literal_concat(val[0], val[1])
                  
    result
end

def _reduce_402(val, _values, result)
 result = s(:str, val[0]) 
    result
end

def _reduce_403(val, _values, result)
                   result = lexer.lex_strterm;
                   lexer.lex_strterm = nil
                   lexer.lex_state = :expr_beg
                 
    result
end

def _reduce_404(val, _values, result)
                   lexer.lex_strterm = val[1]
                   result = s(:evstr, val[2]);
                   
    result
end

def _reduce_405(val, _values, result)
                   result = lexer.lex_strterm;
                   lexer.lex_strterm = nil
                   lexer.lex_state = :expr_beg
                   lexer.cond.push false
                   lexer.cmdarg.push false
                 
    result
end

def _reduce_406(val, _values, result)
                   lexer.lex_strterm = val[1]
                   lexer.cond.lexpop
                   lexer.cmdarg.lexpop

                   case val[2]
                   when Sexp then
                     case val[2][0]
                     when :str, :dstr, :evstr then
                       result = val[2]
                     else
                       result = s(:evstr, val[2])
                     end
                   when nil then
                     result = s(:evstr)
                   else
                     raise "unknown rescue body: #{val[2].inspect}"
                   end
                 
    result
end

def _reduce_407(val, _values, result)
                   result = s(:gvar, val[0].to_sym);
                 
    result
end

def _reduce_408(val, _values, result)
                   result = s(:ivar, val[0].to_sym);
                 
    result
end

def _reduce_409(val, _values, result)
                   result = s(:cvar, val[0].to_sym);
                 
    result
end

# reduce 410 omitted

def _reduce_411(val, _values, result)
                   lexer.lex_state = :expr_end
                   result = val[1].to_sym
                 
    result
end

# reduce 412 omitted

# reduce 413 omitted

# reduce 414 omitted

# reduce 415 omitted

def _reduce_416(val, _values, result)
                   lexer.lex_state = :expr_end
                   result = val[1]

                   yyerror("empty symbol literal") if result.nil? or result.empty?

                   case result[0]
                   when :dstr then
                     result[0] = :dsym
                   when :str then
                     result = s(:lit, result.last.intern)
                   else
                     result = s(:dsym, '', result)
                   end

                 
    result
end

# reduce 417 omitted

# reduce 418 omitted

def _reduce_419(val, _values, result)
                 result = -val[1] # TODO: pt_testcase
               
    result
end

def _reduce_420(val, _values, result)
                 result = -val[1] # TODO: pt_testcase
               
    result
end

# reduce 421 omitted

# reduce 422 omitted

# reduce 423 omitted

# reduce 424 omitted

# reduce 425 omitted

def _reduce_426(val, _values, result)
                 result = :nil
               
    result
end

def _reduce_427(val, _values, result)
                 result = :self
               
    result
end

def _reduce_428(val, _values, result)
                 result = :true
               
    result
end

def _reduce_429(val, _values, result)
                 result = :false
               
    result
end

def _reduce_430(val, _values, result)
                 result = :"__FILE__"
               
    result
end

def _reduce_431(val, _values, result)
                 result = :"__LINE__"
               
    result
end

def _reduce_432(val, _values, result)
                   result = self.gettable(val[0])
                 
    result
end

def _reduce_433(val, _values, result)
                   result = self.assignable(val[0]);
                 
    result
end

def _reduce_434(val, _values, result)
 result = s(:nth_ref, val[0]) 
    result
end

def _reduce_435(val, _values, result)
 result = s(:back_ref, val[0]) 
    result
end

def _reduce_436(val, _values, result)
                 result = nil
               
    result
end

def _reduce_437(val, _values, result)
                 lexer.lex_state = :expr_beg
               
    result
end

def _reduce_438(val, _values, result)
                 result = val[2];
               
    result
end

def _reduce_439(val, _values, result)
                 yyerrok;
                 result = nil;
               
    result
end

def _reduce_440(val, _values, result)
                   result = val[1];
                   lexer.lex_state = :expr_beg
                 
    result
end

def _reduce_441(val, _values, result)
                   result = val[0];
                 
    result
end

def _reduce_442(val, _values, result)
                 result = args val[0], val[2], val[4], val[5]
               
    result
end

def _reduce_443(val, _values, result)
                 result = args val[0], val[2],    nil, val[3]
               
    result
end

def _reduce_444(val, _values, result)
                 result = args val[0],    nil, val[2], val[3]
               
    result
end

def _reduce_445(val, _values, result)
                 result = args val[0],    nil,    nil, val[1]
               
    result
end

def _reduce_446(val, _values, result)
                 result = args    nil, val[0], val[2], val[3]
               
    result
end

def _reduce_447(val, _values, result)
                 result = args    nil, val[0],    nil, val[1]
               
    result
end

def _reduce_448(val, _values, result)
                 result = args    nil,    nil, val[0], val[1]
               
    result
end

def _reduce_449(val, _values, result)
                 result = args    nil,    nil,    nil, val[0]
               
    result
end

def _reduce_450(val, _values, result)
                 result = args    nil,    nil,    nil,    nil
               
    result
end

def _reduce_451(val, _values, result)
                 yyerror("formal argument cannot be a constant");
               
    result
end

def _reduce_452(val, _values, result)
                 yyerror("formal argument cannot be an instance variable");
               
    result
end

def _reduce_453(val, _values, result)
                 yyerror("formal argument cannot be a class variable");
               
    result
end

def _reduce_454(val, _values, result)
                 identifier = val[0].to_sym
                 self.env[identifier] = :lvar

                 result = val[0];
               
    result
end

def _reduce_455(val, _values, result)
                   result = s(:args)
                   result << val[0].to_sym
                 
    result
end

def _reduce_456(val, _values, result)
                   val[0] << val[2].to_sym
                   result = val[0]
                 
    result
end

def _reduce_457(val, _values, result)
                   result = self.assignable(val[0], val[2]);
                   # TODO: detect duplicate names
                 
    result
end

def _reduce_458(val, _values, result)
                 result = s(:block, val[0])
               
    result
end

def _reduce_459(val, _values, result)
                 result = self.append_to_block(val[0], val[2]);
               
    result
end

# reduce 460 omitted

# reduce 461 omitted

def _reduce_462(val, _values, result)
 # TODO: differs from parse.y - needs tests
                  name = val[1].to_sym
                  self.assignable(name)
                  result = :"*#{name}"
                
    result
end

def _reduce_463(val, _values, result)
                 name = :"*"
                 self.env[name] = :lvar
                 result = name
               
    result
end

# reduce 464 omitted

# reduce 465 omitted

def _reduce_466(val, _values, result)
                  identifier = val[1].to_sym

                  self.env[identifier] = :lvar
                  result = s(:block_arg, identifier.to_sym)
                 
    result
end

def _reduce_467(val, _values, result)
                  result = val[1];
                 
    result
end

def _reduce_468(val, _values, result)
                 result = nil;
                 
    result
end

# reduce 469 omitted

def _reduce_470(val, _values, result)
                 lexer.lex_state = :expr_beg
               
    result
end

def _reduce_471(val, _values, result)
                 if (val[2].instanceof ILiteralNode) then
                    yyerror("Can't define single method for literals.");
                 end
                 result = val[2];
               
    result
end

def _reduce_472(val, _values, result)
 #  [!nil]
                  result = s(:array)
                 
    result
end

def _reduce_473(val, _values, result)
 #  [!nil]
                  result = val[0];
                 
    result
end

def _reduce_474(val, _values, result)
                  size = val[0].size
                  if (size % 2 != 1) then # != 1 because of leading :array
                    yyerror("Odd number (#{size}) list for Hash. #{val[0].inspect}");
                  end
                  result = val[0];
                 
    result
end

# reduce 475 omitted

def _reduce_476(val, _values, result)
                  list = val[0].dup
                  more = val[2][1..-1]
                  list.push(*more) unless more.empty?
                  result = list
                
    result
end

def _reduce_477(val, _values, result)
                  result = s(:array, val[0], val[2])
                
    result
end

# reduce 478 omitted

# reduce 479 omitted

# reduce 480 omitted

# reduce 481 omitted

# reduce 482 omitted

# reduce 483 omitted

# reduce 484 omitted

# reduce 485 omitted

# reduce 486 omitted

# reduce 487 omitted

# reduce 488 omitted

# reduce 489 omitted

# reduce 490 omitted

# reduce 491 omitted

# reduce 492 omitted

# reduce 493 omitted

# reduce 494 omitted

# reduce 495 omitted

# reduce 496 omitted

def _reduce_497(val, _values, result)
 yyerrok 
    result
end

# reduce 498 omitted

# reduce 499 omitted

def _reduce_500(val, _values, result)
 yyerrok 
    result
end

def _reduce_501(val, _values, result)
 result = nil 
    result
end

def _reduce_502(val, _values, result)
 result = nil 
    result
end

def _reduce_none(val, _values, result)
  val[0]
end

end   # class RubyParser
