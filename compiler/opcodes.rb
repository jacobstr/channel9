# *** This file is generated by InstructionParser ***

module Rubinius
  class InstructionSet
    opcode  0, :noop,                        :stack => [0, 0],     :args => []

    # Push primitive values
    opcode  1, :push_nil,                    :stack => [0, 1],     :args => []
    opcode  2, :push_true,                   :stack => [0, 1],     :args => []
    opcode  3, :push_false,                  :stack => [0, 1],     :args => []
    opcode  4, :push_int,                    :stack => [0, 1],     :args => [:number]
    opcode  5, :push_self,                   :stack => [0, 1],     :args => []

    # Manipulate literals
    opcode  6, :set_literal,                 :stack => [0, 0],     :args => [:literal]
    opcode  7, :push_literal,                :stack => [0, 1],     :args => [:literal]

    # Flow control
    opcode  8, :goto,                        :stack => [0, 0],     :args => [:location]
    opcode  9, :goto_if_false,               :stack => [1, 0],     :args => [:location]
    opcode 10, :goto_if_true,                :stack => [1, 0],     :args => [:location]
    opcode 11, :ret,                         :stack => [0, 0],     :args => []

    # Stack manipulations
    opcode 12, :swap_stack,                  :stack => [0, 0],     :args => []
    opcode 13, :dup_top,                     :stack => [0, 1],     :args => []
    opcode 14, :pop,                         :stack => [1, 0],     :args => []
    opcode 15, :rotate,                      :stack => [0, 0],     :args => [:count]
    opcode 16, :move_down,                   :stack => [0, 0],     :args => [:positions]

    # Manipulate local variables
    opcode 17, :set_local,                   :stack => [0, 0],     :args => [:index]
    opcode 18, :push_local,                  :stack => [0, 1],     :args => [:index]
    opcode 19, :push_local_depth,            :stack => [0, 1],     :args => [:depth, :index]
    opcode 20, :set_local_depth,             :stack => [0, 0],     :args => [:depth, :index]
    opcode 21, :passed_arg,                  :stack => [0, 1],     :args => [:index]

    # Manipulate execeptions
    opcode 22, :push_exception,              :stack => [0, 1],     :args => []
    opcode 23, :clear_exception,             :stack => [0, 0],     :args => []
    opcode 24, :pop_exception,               :stack => [1, 0],     :args => []
    opcode 25, :raise_exc,                   :stack => [0, 0],     :args => []
    opcode 26, :setup_unwind,                :stack => [0, 0],     :args => [:ip, :type]
    opcode 27, :pop_unwind,                  :stack => [0, 0],     :args => []
    opcode 28, :raise_return,                :stack => [0, 0],     :args => []
    opcode 29, :ensure_return,               :stack => [0, 0],     :args => []
    opcode 30, :raise_break,                 :stack => [0, 0],     :args => []
    opcode 31, :reraise,                     :stack => [0, 0],     :args => []

    # Manipulate arrays
    opcode 32, :make_array,                  :stack => [[0,1], 1], :args => [:count]
    opcode 33, :cast_array,                  :stack => [1, 1],     :args => []
    opcode 34, :shift_array,                 :stack => [1, 2],     :args => []

    # Manipulate instance variables
    opcode 35, :set_ivar,                    :stack => [0, 0],     :args => [:index]
    opcode 36, :push_ivar,                   :stack => [0, 1],     :args => [:index]

    # Manipulate constants
    opcode 37, :push_const,                  :stack => [0, 1],     :args => [:literal]
    opcode 38, :set_const,                   :stack => [0, 0],     :args => [:index]
    opcode 39, :set_const_at,                :stack => [2, 0],     :args => [:index]
    opcode 40, :find_const,                  :stack => [1, 1],     :args => [:index]
    opcode 41, :push_cpath_top,              :stack => [0, 1],     :args => []
    opcode 42, :push_const_fast,             :stack => [0, 1],     :args => [:literal, :association]

    # Send messages
    opcode 43, :set_call_flags,              :stack => [0, 0],     :args => [:flags]
    opcode 44, :allow_private,               :stack => [0, 0],     :args => []
    opcode 45, :send_method,                 :stack => [1, 1],     :args => [:literal]
    opcode 46, :send_stack,                  :stack => [[1,2], 1], :args => [:index, :count]
    opcode 47, :send_stack_with_block,       :stack => [[2,2], 1], :args => [:index, :count]

    CALL_FLAG_CONCAT = 2

    opcode 48, :send_stack_with_splat,       :stack => [[3,2], 1], :args => [:index, :count]
    opcode 49, :send_super_stack_with_block, :stack => [[1,2], 1], :args => [:index, :count]
    opcode 50, :send_super_stack_with_splat, :stack => [[2,2], 1], :args => [:index, :count]

    # Manipulate blocks
    opcode 51, :push_block,                  :stack => [0, 1],     :args => []
    opcode 52, :passed_blockarg,             :stack => [0, 1],     :args => [:count]
    opcode 53, :create_block,                :stack => [0, 1],     :args => [:index]
    opcode 54, :cast_for_single_block_arg,   :stack => [0, 1],     :args => []
    opcode 55, :cast_for_multi_block_arg,    :stack => [0, 1],     :args => []
    opcode 56, :cast_for_splat_block_arg,    :stack => [0, 1],     :args => []
    opcode 57, :yield_stack,                 :stack => [[0,1], 1], :args => [:count]
    opcode 58, :yield_splat,                 :stack => [[1,1], 1], :args => [:count]

    # Manipulate strings
    opcode 59, :string_append,               :stack => [2, 1],     :args => []
    opcode 60, :string_dup,                  :stack => [1, 1],     :args => []

    # Manipulate scope
    opcode 61, :push_scope,                  :stack => [0, 1],     :args => []
    opcode 62, :add_scope,                   :stack => [1, 0],     :args => []
    opcode 63, :push_variables,              :stack => [0, 1],     :args => []

    # Miscellaneous. TODO: better categorize these
    opcode 64, :check_interrupts,            :stack => [0, 0],     :args => []
    opcode 65, :yield_debugger,              :stack => [0, 0],     :args => []
    opcode 66, :is_nil,                      :stack => [1, 1],     :args => []
    opcode 67, :check_serial,                :stack => [1, 1],     :args => [:index, :serial]
    opcode 68, :check_serial_private,        :stack => [1, 1],     :args => [:index, :serial]

    # Access object fields
    opcode 69, :push_my_field,               :stack => [0, 1],     :args => [:index]
    opcode 70, :store_my_field,              :stack => [0, 0],     :args => [:index]

    # Type checks
    opcode 71, :kind_of,                     :stack => [2, 1],     :args => []
    opcode 72, :instance_of,                 :stack => [2, 1],     :args => []

    # Optimization instructions
    opcode 73, :meta_push_neg_1,             :stack => [0, 1],     :args => []
    opcode 74, :meta_push_0,                 :stack => [0, 1],     :args => []
    opcode 75, :meta_push_1,                 :stack => [0, 1],     :args => []
    opcode 76, :meta_push_2,                 :stack => [0, 1],     :args => []
    opcode 77, :meta_send_op_plus,           :stack => [2, 1],     :args => [:name]
    opcode 78, :meta_send_op_minus,          :stack => [2, 1],     :args => [:name]
    opcode 79, :meta_send_op_equal,          :stack => [2, 1],     :args => [:name]
    opcode 80, :meta_send_op_lt,             :stack => [2, 1],     :args => [:name]
    opcode 81, :meta_send_op_gt,             :stack => [2, 1],     :args => [:name]
    opcode 82, :meta_send_op_tequal,         :stack => [2, 1],     :args => [:name]
    opcode 83, :meta_send_call,              :stack => [[1,2], 1], :args => [:name, :count]

    # More misc
    opcode 84, :push_my_offset,              :stack => [0, 1],     :args => [:index]
  end
end
